1
00:00:00,000 --> 00:00:04,410
我們來看一下 所謂的放大式的攻擊

2
00:00:04,410 --> 00:00:05,710
所謂的Amplification

3
00:00:05,710 --> 00:00:08,550
就是放大式的攻擊到底怎麼一回事呢?

4
00:00:08,550 --> 00:00:10,710
放大式的攻擊裡面 一樣

5
00:00:10,710 --> 00:00:13,250
有一個叫做放大器的設備

6
00:00:13,250 --> 00:00:18,510
放大器本身他就是放大這個回覆攻擊封包的數量

7
00:00:18,510 --> 00:00:24,750
他是一般也是一個設備或者一個網路裡面的設備

8
00:00:24,750 --> 00:00:27,050
因為我們要放大整個回覆的量

9
00:00:27,050 --> 00:00:30,150
所以通常要很多台電腦一起做

10
00:00:30,150 --> 00:00:32,210
所以通常都是一個網路

11
00:00:32,210 --> 00:00:35,010
譬如網路裡面的很多台電腦同時回

12
00:00:35,010 --> 00:00:37,110
就是數量才會增加

13
00:00:37,110 --> 00:00:40,950
不是封包大小變大 而是數量變多

14
00:00:40,950 --> 00:00:42,750
一樣這個攻擊者

15
00:00:42,750 --> 00:00:46,880
他為了不要被偵測出來他在做這種攻擊

16
00:00:46,880 --> 00:00:50,510
所以他這個流量盡量跟正常流量是很相似的

17
00:00:50,510 --> 00:00:53,450
就看起來是正常的意思

18
00:00:53,450 --> 00:00:56,750
那一樣 針對每一個原始的封包

19
00:00:56,750 --> 00:00:59,050
就是這個request 需求封包

20
00:00:59,050 --> 00:01:00,150
我們要做回覆

21
00:01:00,150 --> 00:01:03,280
中間的設備我們說通常說都是一個網路

22
00:01:03,280 --> 00:01:07,280
這網路裡面的電腦就會每一個人回一個

23
00:01:07,280 --> 00:01:10,080
就造成多個的效果

24
00:01:10,080 --> 00:01:12,180
攻擊者他的期望就是說

25
00:01:12,180 --> 00:01:17,910
希望回覆封包的數量大於原始封包的數量

26
00:01:17,910 --> 00:01:20,980
所以他不是以小換大

27
00:01:20,980 --> 00:01:23,910
我們說他是以少換多

28
00:01:23,910 --> 00:01:28,350
較少量的封包但是換回大量的回覆

29
00:01:28,350 --> 00:01:30,780
所以他是以少換多的概念

30
00:01:30,780 --> 00:01:34,450
那我們說有甚麼樣的protocol呢

31
00:01:34,450 --> 00:01:36,010
可以符合這樣的特性呢

32
00:01:36,010 --> 00:01:40,410
一樣他用到TCP啦 UDP啦 這些都可以

33
00:01:40,410 --> 00:01:44,550
因為這些UDP TCP甚至ICMP

34
00:01:44,550 --> 00:01:47,910
我們知道都有一個很常需要的功能

35
00:01:47,910 --> 00:01:49,310
就是request reply

36
00:01:49,310 --> 00:01:52,680
就是你可以送出需求 然後server會回應

37
00:01:52,680 --> 00:01:54,880
就利用這個回應來發動攻擊

38
00:01:54,880 --> 00:01:56,080
這所謂的Amplify

39
00:01:56,080 --> 00:02:01,910
我們說這個中間系統通常就是子網路的主機

40
00:02:01,910 --> 00:02:03,380
因為主機可能很多台

41
00:02:03,380 --> 00:02:05,650
那他們每一台都回覆的話

42
00:02:05,650 --> 00:02:09,610
就會產生所謂的大量的回覆

43
00:02:09,610 --> 00:02:11,980
看一個例子 在這個攻擊裡面

44
00:02:11,980 --> 00:02:13,980
我們就說中間網路

45
00:02:13,980 --> 00:02:17,710
就是intermediate network裡面的大量主機

46
00:02:17,710 --> 00:02:20,950
我們可以利用譬如說ICMP的request

47
00:02:20,950 --> 00:02:24,250
我們知道ICMP的echo就相當於ping的功能

48
00:02:24,250 --> 00:02:27,310
他有一個echo request 就有一個echo reply

49
00:02:27,310 --> 00:02:30,350
那我們等一下會看一下像Smurf

50
00:02:30,350 --> 00:02:32,480
他就是一個DoS的攻擊

51
00:02:32,480 --> 00:02:34,680
UDP裡面像Fraggle的program

52
00:02:34,680 --> 00:02:40,310
這個都是用了所謂的request跟reply

53
00:02:40,310 --> 00:02:42,910
只是這個Fraggle是用UDP

54
00:02:42,910 --> 00:02:45,850
Fraggle這個程式是用UDP來做

55
00:02:45,850 --> 00:02:51,950
那TCP就不太適合做這個所謂的放大式的

56
00:02:51,950 --> 00:02:53,850
因為TCP建連線通常都是1對1

57
00:02:53,850 --> 00:02:57,780
1對1的這種連線建立 所以通常比較不適合用

58
00:02:57,780 --> 00:03:02,150
那放大式這種攻擊怎麼來防護呢?

59
00:03:02,150 --> 00:03:06,780
我們說通常現在的router都會做這樣的設定

60
00:03:06,780 --> 00:03:13,410
就是不允許外部來的廣播封包進入網路

61
00:03:13,410 --> 00:03:17,150
就是如果有人要送一個IP broadcast

62
00:03:17,150 --> 00:03:19,280
到這個router的某一個子網路

63
00:03:19,280 --> 00:03:22,080
這個router會把他擋掉

64
00:03:22,080 --> 00:03:24,310
因為我如果我們讓這個IP廣播的封包

65
00:03:24,310 --> 00:03:25,610
進到這個子網路去

66
00:03:25,610 --> 00:03:28,410
等一下可能一大堆的反彈出來

67
00:03:28,410 --> 00:03:30,050
所以通常現在的router

68
00:03:30,050 --> 00:03:36,310
都會不允許外部來的廣播封包進入這個子網路裡面

69
00:03:36,310 --> 00:03:39,350
以免引發後面大量的回覆

70
00:03:39,350 --> 00:03:41,350


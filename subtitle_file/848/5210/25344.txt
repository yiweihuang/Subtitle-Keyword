1
00:00:00,000 --> 00:00:03,910
我們來介紹一個叫做SOCKS proxy protocol

2
00:00:03,910 --> 00:00:06,850
那這個protocol的主要的目的就是說

3
00:00:06,850 --> 00:00:10,980
他是一個Generic proxy protocol

4
00:00:10,980 --> 00:00:14,680
也就是說如果說有一個新的application

5
00:00:14,680 --> 00:00:20,980
要開發它的proxy的時候 就不用重新寫的意思

6
00:00:20,980 --> 00:00:23,850
所以我們說它是一個proxy protocol

7
00:00:23,850 --> 00:00:26,550
希望說讓

8
00:00:26,550 --> 00:00:31,110
如果將來有一個新的應用要開發它的proxy的時候

9
00:00:31,110 --> 00:00:35,680
不用重新再寫code 等於說可以透過這個protocol

10
00:00:35,680 --> 00:00:40,380
可以讓將來有新的protocol application出現的時候

11
00:00:40,380 --> 00:00:43,380
更容易做到一個新的proxy的意思

12
00:00:43,380 --> 00:00:47,880
那我們說這個SOCKS Proxy protocol

13
00:00:47,880 --> 00:00:54,250
它可以給HTTP、FTP、telnet、SSL都可以用

14
00:00:54,250 --> 00:00:58,180
就它跟application layer protocol是沒有關係的

15
00:00:58,180 --> 00:01:02,180
所以為什麼叫做generic 就是說它是通用型的

16
00:01:02,180 --> 00:01:05,950
等於說不管我們這個application layer protocol是哪一種

17
00:01:05,950 --> 00:01:09,910
那它都可以用這個所謂的SOCKS Proxy protocol

18
00:01:09,910 --> 00:01:12,210
來建這個proxy的關係

19
00:01:12,210 --> 00:01:17,550
那這個protocol本身它也包含了authentication

20
00:01:17,550 --> 00:01:19,210
所謂的認證

21
00:01:19,210 --> 00:01:23,310
也就是說它可以讓合法的使用者

22
00:01:23,310 --> 00:01:27,250
或者應用或者IP可以pass through firewall

23
00:01:27,250 --> 00:01:29,880
就是說它經過這個authentication

24
00:01:29,880 --> 00:01:32,610
認證的機制可以讓合法的通過

25
00:01:32,610 --> 00:01:35,610
那不合法就把它濾掉 這是很基本的這個動作

26
00:01:35,610 --> 00:01:37,510
那底下我們就來看一下說

27
00:01:37,510 --> 00:01:41,850
這個SOCKS proxy protocol到底怎麼運作

28
00:01:41,850 --> 00:01:45,510
我們說這個就是防火牆的位置

29
00:01:45,510 --> 00:01:49,610
那這個防火牆它有一個應用在這裡

30
00:01:49,610 --> 00:01:53,810
那這個SOCKS有一個Library在這個所謂的使用者端

31
00:01:53,810 --> 00:01:58,110
那這個是SOCKS Daemon 這是我們所謂程式在這的地方

32
00:01:58,110 --> 00:02:00,780
那右邊這個地方就是我們的server

33
00:02:00,780 --> 00:02:03,810
也就左邊這是client 右邊這是server

34
00:02:03,810 --> 00:02:08,210
那我們希望說這個client到這個server中間

35
00:02:08,210 --> 00:02:12,610
有一個這個這是我們的proxy

36
00:02:12,610 --> 00:02:15,510
那它會介於這個client跟server之間

37
00:02:15,510 --> 00:02:18,550
然後我們中間用了這個SOCKS的protocol

38
00:02:18,550 --> 00:02:21,510
讓這個所謂的proxy可以做得更流暢

39
00:02:21,510 --> 00:02:23,110
所以說我們說第一個

40
00:02:23,110 --> 00:02:27,950
我們假設這個使用者它的browser

41
00:02:27,950 --> 00:02:33,250
譬如說他不管是Firefox或者IE或者Chrome等等

42
00:02:33,250 --> 00:02:38,510
就它的browser提出了一個所謂的一個page的需求

43
00:02:38,510 --> 00:02:42,410
也就它要下載一個譬如說一個page的內容

44
00:02:42,410 --> 00:02:44,850
那這個需求 我們說

45
00:02:44,850 --> 00:02:49,350
這個需求就會呼叫SOCKS Library

46
00:02:49,350 --> 00:02:52,550
那這個Library本身裡面有一堆的這個procedure

47
00:02:52,550 --> 00:02:55,780
那它會把這個我們講這個request

48
00:02:55,780 --> 00:03:00,050
把它做轉換 轉換成一個特定的格式

49
00:03:00,050 --> 00:03:02,710
因為她SOCKS是一個protocol

50
00:03:02,710 --> 00:03:06,980
所以這個使用者的這個需求

51
00:03:06,980 --> 00:03:11,650
它會把它轉換成格式 然後當然透過這個TCP的網路

52
00:03:11,650 --> 00:03:16,280
送到這個來 送到這個所謂的SOCKS Daemon來

53
00:03:16,280 --> 00:03:20,880
那這個SOCKS Daemon本身它就會檢查

54
00:03:20,880 --> 00:03:22,710
因為這個SOCKS Daemon是

55
00:03:22,710 --> 00:03:26,850
我們講run在這個防火牆的這個主機上面

56
00:03:26,850 --> 00:03:30,350
那第一個它當然會做authentication

57
00:03:30,350 --> 00:03:34,210
先做一個認證確定說這個使用者的合法性

58
00:03:34,210 --> 00:03:37,210
如果這個使用者是不合法或者沒有被授權的話

59
00:03:37,210 --> 00:03:38,950
這個封包就直接丟掉

60
00:03:38,950 --> 00:03:41,250
那如果說這個使用者是合法

61
00:03:41,250 --> 00:03:46,080
它就會把這個 等於說經過這個檢查之後

62
00:03:46,080 --> 00:03:49,310
然後再送到網路去 然後再直接送到這個使用者

63
00:03:49,310 --> 00:03:51,880
像這個是一個Apache的這個server

64
00:03:51,880 --> 00:03:54,680
等於說如果這個使用者是合法的話

65
00:03:54,680 --> 00:03:58,050
那這個Daemon本身就會把所有的data

66
00:03:58,050 --> 00:04:01,010
再把它forward到這個server來

67
00:04:01,010 --> 00:04:04,150
那我們特別注意到 對這個server來講的話

68
00:04:04,150 --> 00:04:09,080
他並不知道也不需要一個所謂的SOCKS Library

69
00:04:09,080 --> 00:04:12,080
因為對Web server來講的話

70
00:04:12,080 --> 00:04:16,510
它收到的data就等於說好像是使用者直接收到的data

71
00:04:16,510 --> 00:04:20,150
它不需要有一個SOCKS這樣的Library

72
00:04:20,150 --> 00:04:22,980
那主要還是因為中間這個防火牆

73
00:04:22,980 --> 00:04:25,980
已經幫我們做一個所謂的proxy

74
00:04:25,980 --> 00:04:30,350
相當於說這裡可能建一個這個所謂的連線

75
00:04:30,350 --> 00:04:34,180
透過TCP建連線 然後把這些參數帶過來

76
00:04:34,180 --> 00:04:37,750
那這邊會做檢查 如果說是身分合法的話

77
00:04:37,750 --> 00:04:40,980
我們就把這個data把它轉過來 到這裡來

78
00:04:40,980 --> 00:04:42,950
就是說這個server本身

79
00:04:42,950 --> 00:04:49,680
它就跟一個HTTP收到這個需求是一模一樣的

80
00:04:49,680 --> 00:04:52,910
那這個SOCKS proxy protocol就變成說

81
00:04:52,910 --> 00:04:55,910
我跟這個上面的application是沒有關係的

82
00:04:55,910 --> 00:04:59,050
像HTTP 這是一個application protocol

83
00:04:59,050 --> 00:05:00,810
當然還有如果還有像其他的

84
00:05:00,810 --> 00:05:04,510
像telnet、FTP甚至SSL

85
00:05:04,510 --> 00:05:09,110
他們都可以用這個SOCKS Library跟這個SOCKS Daemon

86
00:05:09,110 --> 00:05:14,580
用這兩個來提供這個所謂的application proxy的這個服務

87
00:05:14,580 --> 00:05:17,450
那我們最後來看一下說

88
00:05:17,450 --> 00:05:21,880
這種proxy gateway它的優點跟它的缺點

89
00:05:21,880 --> 00:05:25,510
我們說proxy它的優點就在於說

90
00:05:25,510 --> 00:05:30,080
它可以log所有的connection

91
00:05:30,080 --> 00:05:32,680
還有所有的connection activity

92
00:05:32,680 --> 00:05:36,780
也就所有這個連線的一些整個行為它都可以記錄下來

93
00:05:36,780 --> 00:05:41,350
然後proxy它也提供所謂的caching 所謂的快取

94
00:05:41,350 --> 00:05:45,410
就相當於說它把一些內容可以暫存在這個proxy裡面

95
00:05:45,410 --> 00:05:49,510
那如果使用者要抓過去已經暫存的內容的話

96
00:05:49,510 --> 00:05:50,980
可以很快地提供給它

97
00:05:50,980 --> 00:05:55,650
然後這個proxy本身可以做比較聰明的

98
00:05:55,650 --> 00:05:58,610
這個所謂的filtering based on content

99
00:05:58,610 --> 00:06:01,110
因為它是看到封包的內容

100
00:06:01,110 --> 00:06:04,610
所以它就可以依照內容來做過濾

101
00:06:04,610 --> 00:06:08,480
這是它比較 算是比較有智慧的這種過濾器

102
00:06:08,480 --> 00:06:13,380
那第四個就是說它可以提供user lever authentication

103
00:06:13,380 --> 00:06:17,910
那它的認證可以做到所謂的使用者的層級

104
00:06:17,910 --> 00:06:21,150
就它可以用帳號密碼來做認證

105
00:06:21,150 --> 00:06:24,510
它知道某一個人而不是只有靠IP

106
00:06:24,510 --> 00:06:28,710
因為我們剛剛有提到說有時候這個使用者的IP

107
00:06:28,710 --> 00:06:34,350
是動態分配的話 那靠IP來設Rule就會比較不準

108
00:06:34,350 --> 00:06:37,210
因為使用者IP是會變動的話

109
00:06:37,210 --> 00:06:40,280
那如果是用這個user level 就是用帳號密碼的話

110
00:06:40,280 --> 00:06:43,880
那只要帳號密碼一登入 你IP再換都沒有關係

111
00:06:43,880 --> 00:06:49,050
因為它是靠這個帳號密碼來做這個所謂的身分認證

112
00:06:49,050 --> 00:06:51,810
那它的缺點就是說 第一個呢

113
00:06:51,810 --> 00:06:57,450
目前不是所有的service都有這個proxy

114
00:06:57,450 --> 00:06:59,150
我們剛剛有提到說

115
00:06:59,150 --> 00:07:02,980
因為這個proxy本身跟application有關

116
00:07:02,980 --> 00:07:06,250
那如果有新的服務或新的application

117
00:07:06,250 --> 00:07:08,980
那你就必須先開發新的proxy

118
00:07:08,980 --> 00:07:12,550
那如果新的proxy沒有開發出來之前 它就不能用

119
00:07:12,550 --> 00:07:17,150
也就是說並不是所有的service目前都有proxy的version

120
00:07:17,150 --> 00:07:23,110
也就是說它沒有辦法提供所有新的服務的代理服務

121
00:07:23,110 --> 00:07:26,450
那第二個就是說針對不同的服務

122
00:07:26,450 --> 00:07:29,450
可能會有不同的proxy server

123
00:07:29,450 --> 00:07:33,450
當然如果說我們把所有的proxy都run在同一台機器上

124
00:07:33,450 --> 00:07:35,650
當然也可以 不過這樣剛剛提到

125
00:07:35,650 --> 00:07:37,880
因為proxy本身它要檢查到封包的內容

126
00:07:37,880 --> 00:07:41,550
它要建兩邊建連線 所以它的負擔已經很重

127
00:07:41,550 --> 00:07:45,810
那如果我們又把很多的這種所謂的新的服務

128
00:07:45,810 --> 00:07:49,850
它的proxy全部放在同一台機器 那這機器就更慢了

129
00:07:49,850 --> 00:07:54,080
所以它的缺點就是說 有可能我們需要針對不同的服務

130
00:07:54,080 --> 00:07:55,950
需要不同的proxy server

131
00:07:55,950 --> 00:07:58,450
就是我們硬體的建設會增多

132
00:07:58,450 --> 00:08:02,880
那第三個就是說 它需要在client這邊做一點修改

133
00:08:02,880 --> 00:08:05,080
因為如果要用這個proxy的話

134
00:08:05,080 --> 00:08:08,010
那個client必須執行

135
00:08:08,010 --> 00:08:11,180
我們剛剛叫做proxied或者SOCKS Library

136
00:08:11,180 --> 00:08:14,350
所以client這邊的程式 要稍微做一點修改

137
00:08:14,350 --> 00:08:19,550
那最後一個就是說 整個效能會比較差一點點

138
00:08:19,550 --> 00:08:22,510
因為它要做到封包內容的檢查

139
00:08:22,510 --> 00:08:24,310
然後要兩邊建連線

140
00:08:24,310 --> 00:08:28,180
那從一個連線的這些data

141
00:08:28,180 --> 00:08:30,580
要先抓出來然後處理檢查之後

142
00:08:30,580 --> 00:08:33,550
要放到另外一邊的連線裡頭去

143
00:08:33,550 --> 00:08:36,680
這個中間的處理都是要非常耗時間的

144
00:08:36,680 --> 00:08:39,680
所以整個效能來講通常會比較差一點

145
00:08:39,680 --> 00:08:45,610
那這個做法變成說可能需要比較高檔一點的硬體

146
00:08:45,610 --> 00:08:48,280
也就是它的成本 建置的成本會比較高一點點

147
00:08:48,280 --> 00:08:50,280


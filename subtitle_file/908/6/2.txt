1
00:00:09,280 --> 00:00:12,610
接下來我們就來介紹一個叫做sliding window protocol

2
00:00:12,610 --> 00:00:13,980
所謂的滑動視窗

3
00:00:13,980 --> 00:00:15,410
這個protocol非常的有名

4
00:00:15,410 --> 00:00:17,910
我們來看一下什麼叫做滑動視窗呢

5
00:00:17,910 --> 00:00:20,810
就是最主要就是因為要解決剛剛講的

6
00:00:20,810 --> 00:00:23,9
Stop-and-wait效能不佳的問題

7
00:00:23,10 --> 00:00:26,110
就是說在stop-and-wait我們送一個封包

8
00:00:26,110 --> 00:00:27,550
就要等ACK回來

9
00:00:27,550 --> 00:00:30,10
然後才能送下一個封包

10
00:00:30,10 --> 00:00:32,450
那sliding window的觀念就是說

11
00:00:32,450 --> 00:00:36,180
我可不可以說不要等那個ACK回來

12
00:00:36,180 --> 00:00:37,980
我就繼續送我的封包

13
00:00:37,980 --> 00:00:42,80
變成說我可以封包可以同時送多個封包

14
00:00:42,80 --> 00:00:43,510
在這個link上面

15
00:00:43,510 --> 00:00:45,910
那如果我控制得宜的話

16
00:00:45,910 --> 00:00:47,580
我們是可以做到這一點

17
00:00:47,580 --> 00:00:50,780
就是說我可以同時送好幾個封包出去

18
00:00:50,780 --> 00:00:52,610
然後再等ACK回來

19
00:00:52,610 --> 00:00:54,410
那ACK回來的之後我再送

20
00:00:54,410 --> 00:00:56,150
等於說我一次不是送一個封包

21
00:00:56,150 --> 00:00:59,50
而是一次送一批的

22
00:00:59,50 --> 00:01:01,110
這一批到底是多少

23
00:01:01,110 --> 00:01:02,710
等一下會來解釋說

24
00:01:02,710 --> 00:01:05,180
這一批一次可以送多少個封包

25
00:01:05,180 --> 00:01:08,750
這是有一些我們有一些所謂的參數來做設計的

26
00:01:08,750 --> 00:01:10,250
我們先來看一個這個動畫

27
00:01:10,250 --> 00:01:14,680
我們注意到這個動畫我們左邊是所謂的sender

28
00:01:14,680 --> 00:01:16,850
那右邊是receiver

29
00:01:16,850 --> 00:01:18,110
好，那我們看一下

30
00:01:18,110 --> 00:01:24,210
這個sender本身它會同時就是一個封包一個封包接著送

31
00:01:24,210 --> 00:01:26,149
一個接一個送

32
00:01:26,150 --> 00:01:27,180
我們看這個動畫

33
00:01:27,180 --> 00:01:28,250
這個綠色的

34
00:01:28,250 --> 00:01:30,580
注意到綠色就是我們送的封包

35
00:01:30,580 --> 00:01:33,280
這個藍色的就是我們回的ACK

36
00:01:33,280 --> 00:01:36,680
我們看這個sender已經開始送封包

37
00:01:36,680 --> 00:01:38,110
你注意到它是一個一個送

38
00:01:38,110 --> 00:01:40,780
然後ACK呢當然就一個一個一個回來

39
00:01:40,780 --> 00:01:42,950
所以這個地方結束

40
00:01:42,950 --> 00:01:44,180
在這個過程當中

41
00:01:44,180 --> 00:01:45,250
我們等於說

42
00:01:45,250 --> 00:01:48,810
這個sender它就送了八個封包出去

43
00:01:48,810 --> 00:01:50,450
在這個地方

44
00:01:50,450 --> 00:01:52,750
這個八個封包是sender送的

45
00:01:52,750 --> 00:01:55,550
那receiver呢也回了八個ACK

46
00:01:55,550 --> 00:01:59,350
而且這個八個封包本身是一個接一個

47
00:01:59,350 --> 00:02:01,509
它並沒有像stop-and-wait

48
00:02:01,510 --> 00:02:03,580
就是我送一個封包等一個ACK

49
00:02:03,580 --> 00:02:04,310
在這個例子裡面

50
00:02:04,310 --> 00:02:05,510
我是送八個封包

51
00:02:05,510 --> 00:02:08,80
就是一個一個把它送出去

52
00:02:08,80 --> 00:02:10,10
然後我再來看ACK有沒有回來

53
00:02:10,9 --> 00:02:12,679
當然我們知道說這個封包丟的過程當中

54
00:02:12,680 --> 00:02:13,680
也有可能發生說

55
00:02:13,680 --> 00:02:15,880
譬如說這個封包什麼掉了

56
00:02:15,880 --> 00:02:18,310
或者什麼ACK壞掉拉

57
00:02:18,310 --> 00:02:19,410
這個都有可能

58
00:02:19,410 --> 00:02:22,980
但至少我們先解決一個問題就是說

59
00:02:22,980 --> 00:02:27,980
我可以讓這個sender它在同一個時間

60
00:02:27,980 --> 00:02:31,980
可以一個、多個封包在網路上面跑的意思

61
00:02:31,980 --> 00:02:33,179
你看我們這個例子就是說

62
00:02:33,180 --> 00:02:38,380
同時呢我們讓八個封包在這個link上面傳輸

63
00:02:38,380 --> 00:02:40,810
好，那所謂的sliding window protocol

64
00:02:40,810 --> 00:02:43,780
就是希望能夠提供這樣的一個服務

65
00:02:43,780 --> 00:02:49,250
就是我可以同時讓多個封包在link上面傳輸

66
00:02:49,250 --> 00:02:50,710
那我們也知道說

67
00:02:50,710 --> 00:02:56,110
因為多個封包當然複雜度就會比stop-and-wait複雜多了

68
00:02:56,110 --> 00:02:59,210
那我們怎麼來控制這樣的做法

69
00:02:59,210 --> 00:03:00,610
底下我們就來看

70
00:03:00,610 --> 00:03:03,510
好，我們說要做到這一點

71
00:03:03,510 --> 00:03:05,310
我們就把每一個封包呢

72
00:03:05,310 --> 00:03:07,780
多了一個資訊在上頭

73
00:03:07,780 --> 00:03:09,410
我們叫做sequence number

74
00:03:09,410 --> 00:03:11,549
就給它一個編號的意思

75
00:03:11,550 --> 00:03:12,880
這個編號呢

76
00:03:12,880 --> 00:03:14,10
不是只有一個bit

77
00:03:14,10 --> 00:03:16,810
因為只有一個bit只能編0、1

78
00:03:16,810 --> 00:03:20,310
譬如說我們這個sequence number就可以比較大一點

79
00:03:20,310 --> 00:03:21,810
這個number的意思

80
00:03:21,810 --> 00:03:23,810
譬如說假設是三個bit

81
00:03:23,810 --> 00:03:26,110
三個bit就可以有8種編號

82
00:03:26,110 --> 00:03:27,110
就是說0到7嘛

83
00:03:27,110 --> 00:03:29,850
那如果我們說是10個bit

84
00:03:29,850 --> 00:03:32,780
就2的十次方我們就有一千多個編號

85
00:03:32,780 --> 00:03:34,550
那我們如果用16個bit

86
00:03:34,550 --> 00:03:36,810
16那2的十六次方

87
00:03:36,810 --> 00:03:39,80
2的十六次方就是65536

88
00:03:39,80 --> 00:03:41,950
就大概六萬多個sequence number可以用

89
00:03:41,950 --> 00:03:44,750
好，所以這個sequence number本身是

90
00:03:44,750 --> 00:03:48,180
我們這個sliding window新加入一個元素拉

91
00:03:48,180 --> 00:03:51,880
就是我們每一個封包給它編一個編號

92
00:03:51,880 --> 00:03:53,350
我們把它叫做sequence number

93
00:03:53,350 --> 00:03:55,710
那Sequence number可以長可以短

94
00:03:55,710 --> 00:03:59,580
這個完全是後面參數的這個選擇

95
00:03:59,580 --> 00:04:02,80
除了sequence number之外

96
00:04:02,80 --> 00:04:03,410
我們說這個sender

97
00:04:03,410 --> 00:04:05,980
我們有sender、有receiver兩邊

98
00:04:05,980 --> 00:04:08,49
Sender本身要維持

99
00:04:08,50 --> 00:04:10,710
我們叫維護三個不同的variable

100
00:04:10,710 --> 00:04:13,780
我們首先第一個叫做Sending window size

101
00:04:13,780 --> 00:04:17,250
叫做SWS，Sending window size

102
00:04:17,250 --> 00:04:19,380
什麼叫做window size呢

103
00:04:19,380 --> 00:04:25,480
Window size就是說我們sender同時可以送多少封包

104
00:04:25,480 --> 00:04:27,150
而不用等ACK

105
00:04:27,150 --> 00:04:29,150
這是很重要的觀念

106
00:04:29,150 --> 00:04:33,880
就是說sender同時可以送多少個封包

107
00:04:33,880 --> 00:04:36,850
而不用停下來等ACK

108
00:04:36,850 --> 00:04:38,810
這是所謂的window size

109
00:04:38,810 --> 00:04:42,10
我們叫做所謂的視窗的這個大小

110
00:04:42,10 --> 00:04:43,210
像我們這個例子

111
00:04:43,210 --> 00:04:45,10
剛剛前面這個例子

112
00:04:45,10 --> 00:04:48,150
我們sender同時送了多少個封包出去沒有停

113
00:04:48,150 --> 00:04:50,150
1、2、3、4、5、6、7、8

114
00:04:50,150 --> 00:04:51,349
像這個例子

115
00:04:51,350 --> 00:04:53,150
我們的window size就是8

116
00:04:53,150 --> 00:04:56,580
因為sender同時送了八個封包

117
00:04:56,580 --> 00:04:58,680
1、2、3、4、5、6、7、8

118
00:04:58,680 --> 00:04:59,950
中間沒有停下來

119
00:04:59,950 --> 00:05:02,680
那這個就是所謂的window size的概念

120
00:05:02,680 --> 00:05:04,780
我們sender有這樣一個window size

121
00:05:04,780 --> 00:05:10,450
說sender可以同時送多少個封包在外面跑

122
00:05:10,450 --> 00:05:13,610
然後呢不用等這個所謂的ACK收到

123
00:05:13,610 --> 00:05:15,850
那另外一個角度來看

124
00:05:15,850 --> 00:05:17,980
就是說那有多少個封包呢

125
00:05:17,980 --> 00:05:20,510
是所謂的unacknowledged

126
00:05:20,510 --> 00:05:25,610
就是沒有收到回應那可以在外面傳送的封包數量

127
00:05:25,610 --> 00:05:28,650
叫做所謂的sending window size

128
00:05:28,650 --> 00:05:31,510
好，那同時這個sender

129
00:05:31,510 --> 00:05:34,980
還要記錄一個叫last acknowledgement received

130
00:05:34,980 --> 00:05:37,10
我們叫LAR

131
00:05:37,10 --> 00:05:39,50
LAR的意思是說

132
00:05:39,50 --> 00:05:43,950
那sender本身會陸陸續續收到對方的ACK嘛

133
00:05:43,950 --> 00:05:46,180
因為我們同時送多個封包出去了嘛

134
00:05:46,180 --> 00:05:49,680
同時多個封包在傳輸的過程當中

135
00:05:49,680 --> 00:05:51,710
當然等一下就會有多個ACK

136
00:05:51,710 --> 00:05:53,849
ACK通常我們現在是一對一

137
00:05:53,850 --> 00:05:56,50
一個封包一個ACK

138
00:05:56,50 --> 00:05:57,250
你送八個封包出去

139
00:05:57,250 --> 00:05:59,250
等一下就會有八個ACK回來

140
00:05:59,250 --> 00:06:01,50
那問題是這八個ACK

141
00:06:01,50 --> 00:06:02,310
我們也知道網路的狀況

142
00:06:02,310 --> 00:06:04,710
這八個ACK本身有可能發生什麼狀況呢

143
00:06:04,710 --> 00:06:07,909
第一個ACK可能會掉就是lost掉

144
00:06:07,910 --> 00:06:09,850
第二個ACK可能會delay

145
00:06:09,850 --> 00:06:12,680
Delay的結果就是說那個ACK回來的時候

146
00:06:12,680 --> 00:06:13,850
數據就不一定會一樣

147
00:06:13,850 --> 00:06:15,980
因為有些ACK被延遲了

148
00:06:15,980 --> 00:06:18,80
就有的早到、有的晚到

149
00:06:18,80 --> 00:06:19,479
所以我們可以想像

150
00:06:19,480 --> 00:06:21,680
當我送八個封包出去的時候

151
00:06:21,680 --> 00:06:25,710
這個八個ACK可能就不會這麼幸運

152
00:06:25,710 --> 00:06:28,180
就完全八個ACK完全按照順序進來

153
00:06:28,180 --> 00:06:30,880
它可能會順序調過來、順序會調過來

154
00:06:30,880 --> 00:06:32,280
所以我們要記錄著說

155
00:06:32,280 --> 00:06:35,349
我們叫last acknowledgement received

156
00:06:35,350 --> 00:06:38,880
就是說我們所收到的這個ACK

157
00:06:38,880 --> 00:06:42,909
所收到的ACK的最後一個ACK是什麼

158
00:06:42,910 --> 00:06:46,50
就是我們目前所收到的ACK裡面

159
00:06:46,50 --> 00:06:49,450
那個sequence number最大的那個

160
00:06:49,450 --> 00:06:53,450
最後一次收到這個acknowledgement的sequence number

161
00:06:53,450 --> 00:06:58,210
因為我們這個ACK本身它也會帶一個資料就是說

162
00:06:58,210 --> 00:07:00,909
我這個ACK是代表第幾個封包的

163
00:07:00,910 --> 00:07:03,780
就是ACK上面也會帶一個sequence number

164
00:07:03,780 --> 00:07:06,979
那它這個sequence number就是說你封包的sequence number

165
00:07:06,980 --> 00:07:07,910
譬如說這個是編號六

166
00:07:07,910 --> 00:07:09,480
我就有一個ACK 6

167
00:07:09,480 --> 00:07:11,610
編號七我就有一個ACK 7

168
00:07:11,610 --> 00:07:16,10
就是說你收到最後收到的這個acknowledgement

169
00:07:16,10 --> 00:07:21,110
上面的sequence number就代表說你已經送過去的封包裡面

170
00:07:21,110 --> 00:07:26,80
現在已經收到ACK、已經收到ACK的那個最大的數字

171
00:07:26,80 --> 00:07:29,580
好，那另外還要maintain一個叫做所謂的

172
00:07:29,580 --> 00:07:32,310
我們叫做last frame sent

173
00:07:32,310 --> 00:07:36,50
就是我們雖然可以連續送八個

174
00:07:36,50 --> 00:07:39,780
剛剛那個例子我們可以連續送window size、Sending window size

175
00:07:39,780 --> 00:07:45,309
可是你可能送封包的時候必須一個一個送

176
00:07:45,310 --> 00:07:48,380
所以這個last frame sent代表是說

177
00:07:48,380 --> 00:07:53,550
那你現在已經用到了第幾個sequence number

178
00:07:53,550 --> 00:07:56,510
就是你最後傳送的這個封包

179
00:07:56,510 --> 00:07:58,710
我們叫做last frame sent

180
00:07:58,710 --> 00:08:03,180
最後或者最近傳送的這個封包的sequence number

181
00:08:03,180 --> 00:08:06,850
也就是說我們有時候這個window size可能很大

182
00:08:06,850 --> 00:08:08,380
譬如說我有八嘛

183
00:08:08,380 --> 00:08:11,350
可是你的資料量可能沒有那麼多

184
00:08:11,350 --> 00:08:12,580
所以你可能先用掉一個

185
00:08:12,580 --> 00:08:15,849
然後等一下有資料量的時候再用掉第二個

186
00:08:15,850 --> 00:08:18,580
那可能資料量突然多一點就用掉三個

187
00:08:18,580 --> 00:08:20,250
那最後再一個用

188
00:08:20,250 --> 00:08:21,750
就是我們那個sequence number

189
00:08:21,750 --> 00:08:23,450
是一個一個用掉的

190
00:08:23,450 --> 00:08:28,479
那你最後或者最近送出去的這個封包

191
00:08:28,480 --> 00:08:30,680
它的sequence number是多少

192
00:08:30,680 --> 00:08:33,280
我們叫做所謂的last frame sent

193
00:08:33,280 --> 00:08:34,850
就是最近送的這個封包

194
00:08:34,850 --> 00:08:38,150
那這個是sender本身要紀錄的三個參數

195
00:08:38,150 --> 00:08:40,809
好，同時呢我們來看一下

196
00:08:40,809 --> 00:08:46,250
這個sender本身要maintain這三個參數之間的不等式

197
00:08:46,250 --> 00:08:50,380
就是說因為所謂的sending window size

198
00:08:50,380 --> 00:08:54,350
Window size算是一個所謂的極限拉

199
00:08:54,350 --> 00:08:55,410
一個上限

200
00:08:55,410 --> 00:08:57,780
就是我們同時可以送多少個封包出去

201
00:08:57,780 --> 00:09:02,510
那依這個例子來看的話我們就說假設這個case

202
00:09:02,510 --> 00:09:07,50
我們的這個sending window size事實上是等於

203
00:09:07,50 --> 00:09:09,79
我們說這個例子等於七拉

204
00:09:09,80 --> 00:09:11,750
因為我們這個框框裡面

205
00:09:11,750 --> 00:09:14,10
總共有，我們把它編號

206
00:09:14,10 --> 00:09:16,350
我們把這個每一個封包都把它編號

207
00:09:16,350 --> 00:09:17,280
我們在這裡面編號

208
00:09:17,280 --> 00:09:19,410
譬如說1、2、3、4、5、6、7、8、9、10

209
00:09:19,410 --> 00:09:20,110
把它編號

210
00:09:20,110 --> 00:09:24,180
好，那在這個編完號之後呢

211
00:09:24,180 --> 00:09:25,579
就開始我們講

212
00:09:25,580 --> 00:09:28,250
依這個例子我們的這個sending window size是七

213
00:09:28,250 --> 00:09:30,680
所以我們就可以送七個封包出去

214
00:09:30,680 --> 00:09:32,479
那在這個例子裡面呢

215
00:09:32,480 --> 00:09:35,710
我們也送了七個封包出去

216
00:09:35,710 --> 00:09:37,710
編號是，等於說我們這裡面

217
00:09:37,710 --> 00:09:39,210
這個封包都是有丟出去的

218
00:09:39,210 --> 00:09:41,950
4、5、6、7、8、9、10

219
00:09:41,950 --> 00:09:43,280
我們把封包都丟出去了

220
00:09:43,280 --> 00:09:46,709
所以我們看last frame sent在這裡嘛

221
00:09:46,710 --> 00:09:50,310
就是我最近送的封包Sequence number就是10

222
00:09:50,310 --> 00:09:52,109
好，那這個地方就是說

223
00:09:52,110 --> 00:09:55,380
那我已經收到ACK了

224
00:09:55,380 --> 00:09:59,980
像這邊都是藍色的都是已經收到ACK了

225
00:09:59,980 --> 00:10:01,810
就是這個封包丟出去

226
00:10:01,810 --> 00:10:03,449
而且已經收到ACK了

227
00:10:03,450 --> 00:10:06,610
那已經收到ACK，我們現在收到了是1、2、3

228
00:10:06,610 --> 00:10:10,650
我們封包1、2、3已經收到ACK了

229
00:10:10,650 --> 00:10:13,750
而封包編號4、5、6、7、8、9、10

230
00:10:13,750 --> 00:10:16,480
這七個呢都還沒有收到ACK

231
00:10:16,480 --> 00:10:20,910
所以我們說收到ACK裡面的sequence number最大的

232
00:10:20,910 --> 00:10:22,350
在這個例子就是3

233
00:10:22,350 --> 00:10:25,510
然後呢你所丟出去的封包裡面

234
00:10:25,510 --> 00:10:28,510
Sequence number最大的就是10

235
00:10:28,510 --> 00:10:31,610
就是你最後或者最近才丟出去的

236
00:10:31,610 --> 00:10:33,780
封包的sequence number就是10

237
00:10:33,780 --> 00:10:35,510
所以在這個例子裡面呢

238
00:10:35,510 --> 00:10:36,850
我們就可以看得到

239
00:10:36,850 --> 00:10:40,550
就是說LAR呢他是3

240
00:10:40,550 --> 00:10:43,50
LFS呢他是10

241
00:10:43,50 --> 00:10:44,609
這個時候代表說

242
00:10:44,610 --> 00:10:47,80
我們送了7個封包出去

243
00:10:47,80 --> 00:10:48,880
現在都在等ACK

244
00:10:48,880 --> 00:10:51,350
那它們的關係就是說

245
00:10:51,350 --> 00:10:57,780
這個LFS呢減掉LAR必須小於等於SWS

246
00:10:57,780 --> 00:11:01,250
這個主要是控制說我們的window size

247
00:11:01,250 --> 00:11:04,350
剛剛提到window size代表說你同時

248
00:11:04,350 --> 00:11:08,250
Sender同時可以有多少個封包送出去

249
00:11:08,250 --> 00:11:10,680
而不用等ACK回來

250
00:11:10,680 --> 00:11:14,380
同時可以有多少封包在網路上面送

251
00:11:14,380 --> 00:11:16,810
而且不用等ACK回來的意思

252
00:11:16,810 --> 00:11:17,979
阿因為等於7嘛

253
00:11:17,980 --> 00:11:19,980
所以這兩個數字相減

254
00:11:19,980 --> 00:11:23,580
它一定要小於等於window size的意思

255
00:11:23,580 --> 00:11:24,850
這樣控制這個window size

256
00:11:24,850 --> 00:11:26,410
好，我們再來看一下

257
00:11:26,410 --> 00:11:31,579
如果說我們因為現在正在等這個綠色的七個封包

258
00:11:31,580 --> 00:11:32,880
都已經丟出去了

259
00:11:32,880 --> 00:11:37,10
現在正在等這個所謂的ACK回來

260
00:11:37,10 --> 00:11:37,810
我們來看一下

261
00:11:37,810 --> 00:11:40,979
這個時候我們假設ACK也回來了

262
00:11:40,980 --> 00:11:43,980
我們假設這個封包4的ACK先回來

263
00:11:43,980 --> 00:11:47,510
注意到，好，我們注意到

264
00:11:47,510 --> 00:11:51,50
因為封包編號4的它的ACK回來了

265
00:11:51,50 --> 00:11:53,750
那回來之後我們就發現說

266
00:11:53,750 --> 00:11:57,550
那這個4這個時候也算是正常的收到了

267
00:11:57,550 --> 00:12:01,180
那正常的收到我們這個LAR

268
00:12:01,180 --> 00:12:02,680
我們就會看一下

269
00:12:02,680 --> 00:12:04,50
我就會往這邊移過來

270
00:12:04,50 --> 00:12:08,380
代表說我成功收到的ACK

271
00:12:08,380 --> 00:12:12,110
剛剛編號是3嘛  因為現在已經到4了

272
00:12:12,110 --> 00:12:14,850
所以我就把LAR就往右移一個

273
00:12:14,850 --> 00:12:16,180
好，往右移一個之後

274
00:12:16,180 --> 00:12:18,609
我們注意到我們這個window

275
00:12:18,610 --> 00:12:22,950
就是這個window它就可以往右邊滑動一個位置

276
00:12:22,950 --> 00:12:26,210
滑動一個位置代表說

277
00:12:26,210 --> 00:12:28,50
我們就空出了這個11號

278
00:12:28,50 --> 00:12:32,150
編號11號就代表說  這個地方空出來了

279
00:12:32,150 --> 00:12:37,350
代表說我可以sender可以再送一個封包囉

280
00:12:37,350 --> 00:12:40,650
因為window代表是說剛剛講7嘛

281
00:12:40,650 --> 00:12:44,980
最多同時有7個封包在外面送不用等ACK

282
00:12:44,980 --> 00:12:47,150
那我剛剛也送了7個綠色拉

283
00:12:47,150 --> 00:12:49,380
好，現在可是回來一個ACK了

284
00:12:49,380 --> 00:12:51,580
4嘛，4回來ACK了

285
00:12:51,580 --> 00:12:55,80
那代表說那我在外面送的就剩下6拉

286
00:12:55,80 --> 00:13:00,550
因為4已經被回應了  回應代表說已經對方成功收到

287
00:13:00,550 --> 00:13:02,550
所以它就不算在上面跑

288
00:13:02,550 --> 00:13:05,280
因為它已經收到了  所以我就剩下6

289
00:13:05,280 --> 00:13:07,380
可是我說我可以同時送7個阿

290
00:13:07,380 --> 00:13:10,150
那我現在剩下6個在外面跑

291
00:13:10,150 --> 00:13:14,480
所以我就應該可以再送一個  所以我就說我們這個window

292
00:13:14,480 --> 00:13:18,610
我們說特別注意到  這個window就是這樣子會移過來

293
00:13:18,610 --> 00:13:24,110
這個就叫做sliding window  就是說這個視窗它會滑動的

294
00:13:24,110 --> 00:13:29,310
那滑動過來之後呢就會發現說  這個白色的11

295
00:13:29,310 --> 00:13:33,150
就是這個數字就跑出來了  跑出來代表說我們可以

296
00:13:33,150 --> 00:13:36,350
這個sender這個時候可以再送一個封包

297
00:13:36,350 --> 00:13:38,80
而且用掉編號11

298
00:13:38,80 --> 00:13:42,210
我們說sender剛好也有data  剛好它手上也有data

299
00:13:42,210 --> 00:13:45,710
它就把封包丟出去  而且把這個11用掉

300
00:13:45,710 --> 00:13:50,810
那注意到它用掉的時候 我們這個所謂的last frame sent

301
00:13:50,810 --> 00:13:53,979
就最後或最近送的封包這個編號呢

302
00:13:53,980 --> 00:13:57,310
當然也就要把它改成11嘛

303
00:13:57,310 --> 00:14:01,849
所以整個就滑過去了  所以這個過程當中我們就注意到

304
00:14:01,850 --> 00:14:08,650
當我們把資料  這個sender可以把封包一次丟出去不用等ACK

305
00:14:08,650 --> 00:14:11,280
就是送這個window size

306
00:14:11,280 --> 00:14:13,380
那送完之後呢你就必須等ACK了

307
00:14:13,380 --> 00:14:16,80
那ACK如果按照順序回來的話

308
00:14:16,80 --> 00:14:19,10
我們這個視窗就會適度的滑動

309
00:14:19,10 --> 00:14:23,980
那視窗一滑動 滑動視窗就代表說

310
00:14:23,980 --> 00:14:29,510
對方的ACK、對方的封包正確收到而且ACK也正常的回來

311
00:14:29,510 --> 00:14:31,80
你這個視窗才會滑動

312
00:14:31,80 --> 00:14:36,350
視窗一滑動就代表說你可以再多送這個封包

313
00:14:36,350 --> 00:14:37,950
那可以多送多少個封包

314
00:14:37,950 --> 00:14:41,510
就看我們這個視窗滑動的這個距離

315
00:14:41,510 --> 00:14:44,550
你滑一個位置就可以多送一個封包

316
00:14:44,550 --> 00:14:48,880
如果你可以一次滑兩個位置  就可以再多送兩個封包

317
00:14:48,880 --> 00:14:55,710
一次滑三個位置、三格  那就可以同時再送三個封包的意思

318
00:14:55,710 --> 00:14:57,380
好，我們說

319
00:14:57,380 --> 00:15:00,80
當一個acknowledgement收到

320
00:15:00,80 --> 00:15:03,180
就是當一個這個回應收到之後呢

321
00:15:03,180 --> 00:15:06,680
我們這個sender呢就會把這個LAR

322
00:15:06,680 --> 00:15:11,550
就是所謂的last acknowledgement received這個

323
00:15:11,550 --> 00:15:12,979
就把它往右邊移

324
00:15:12,980 --> 00:15:18,880
這樣的話就可以允許這個sender再送下一個封包的意思

325
00:15:18,880 --> 00:15:23,610
剛剛提到視窗往右移一格那我們就可以送一個封包

326
00:15:23,610 --> 00:15:25,680
那等一下如果再收到一個ACK

327
00:15:25,680 --> 00:15:29,10
按照順序回來的ACK我們再移一格

328
00:15:29,10 --> 00:15:31,880
再來一個按照順序的我們再移一格

329
00:15:31,880 --> 00:15:34,680
就剛剛提到  一開始呢我們把這個7個

330
00:15:34,680 --> 00:15:37,609
剛剛講那個綠色的7個封包送完之後

331
00:15:37,610 --> 00:15:39,850
我的一個window呢就停在那裡

332
00:15:39,850 --> 00:15:41,480
收到一個ACK

333
00:15:41,480 --> 00:15:44,280
4回來我就移一個、5再移一個

334
00:15:44,280 --> 00:15:46,579
6移一個、7移一個、8移一個

335
00:15:46,580 --> 00:15:48,980
這樣子我就可以收到一個ACK移一個位置

336
00:15:48,980 --> 00:15:50,810
收到一個ACK移一個

337
00:15:50,810 --> 00:15:52,880
就滑動、滑動、滑動、滑動

338
00:15:52,880 --> 00:15:56,280
那每滑動一次就多了一個白色的

339
00:15:56,280 --> 00:15:58,350
每滑動一次就多了一個sequence number

340
00:15:58,350 --> 00:15:59,480
新的、可以用

341
00:15:59,480 --> 00:16:01,250
那我就可以變成說

342
00:16:01,250 --> 00:16:03,680
我開始送八個封包、七個封包出去了

343
00:16:03,680 --> 00:16:06,849
等一下有ACK我就可以再送一個封包

344
00:16:06,850 --> 00:16:10,480
再有ACK我就再送一個封包

345
00:16:10,480 --> 00:16:13,480
所以我就可以讓那個傳送、收ACK

346
00:16:13,480 --> 00:16:18,180
傳送、收ACK讓它們可以同時來進行

347
00:16:18,180 --> 00:16:21,550
那我們說  我們這個七個封包都丟出去了

348
00:16:21,550 --> 00:16:24,979
我們說也可能發生狀況說

349
00:16:24,980 --> 00:16:28,550
譬如說封包全部掉了  或者它回ACK

350
00:16:28,550 --> 00:16:30,609
我們講一個封包回一個ACK

351
00:16:30,610 --> 00:16:32,180
七個封包就回七個ACK

352
00:16:32,180 --> 00:16:34,410
那也有可能這個ACK通通不見了

353
00:16:34,410 --> 00:16:35,910
或者某些ACK不見了

354
00:16:35,910 --> 00:16:38,850
所以呢  每一個封包丟出去的同時

355
00:16:38,850 --> 00:16:40,810
它還是要設定一個timer

356
00:16:40,810 --> 00:16:43,510
一樣timeout的機制還是要用到

357
00:16:43,510 --> 00:16:47,210
每一個封包出去  都要設定一個timer的意思

358
00:16:47,210 --> 00:16:49,950
那使得說任何一個封包掉了

359
00:16:49,950 --> 00:16:54,650
或者它的對應的相對的這個回應ACK掉了或者delay

360
00:16:54,650 --> 00:16:57,750
我們講掉了或是delay都要考慮

361
00:16:57,750 --> 00:17:00,110
它就發生timeout就會重送

362
00:17:00,110 --> 00:17:03,380
那我們也就是說還是這個timer timeout的機制

363
00:17:03,380 --> 00:17:06,950
還是要含在裡面  那我們還特別注意到說

364
00:17:06,950 --> 00:17:13,480
因為這個封包丟出去我們要等對方 等那個對應的ACK

365
00:17:13,480 --> 00:17:18,880
在ACK還沒有回來之前  我們是有機會重送這個封包

366
00:17:18,880 --> 00:17:21,450
剛剛提到只要發生timeout你就要重送

367
00:17:21,450 --> 00:17:23,250
那既然要重送代表說

368
00:17:23,250 --> 00:17:24,609
我們必須有一個buffer

369
00:17:24,609 --> 00:17:27,679
我們等於說這個sender本身要有一個buffer

370
00:17:27,680 --> 00:17:32,280
把送過的封包說暫存在這個地方

371
00:17:32,280 --> 00:17:36,350
就是送過但是呢還沒有收到ACK的

372
00:17:36,350 --> 00:17:40,449
收到ACK了就代表說對方已經正確收到了

373
00:17:40,450 --> 00:17:44,180
就是說收到ACK代表對方已經正確收到

374
00:17:44,180 --> 00:17:47,310
我們就可以把它清掉了  因為那個已經結束了

375
00:17:47,310 --> 00:17:50,379
任務已經結束了  所以我們必須有足夠的buffer

376
00:17:50,380 --> 00:17:53,380
Buffer多少呢  Buffer window size

377
00:17:53,380 --> 00:17:56,650
譬如說window size等於七就代表說我們要有7個buffer

378
00:17:56,650 --> 00:18:00,310
因為sender同時有七個封包會在外面跑

379
00:18:00,310 --> 00:18:03,50
好，那這個七個封包在外面跑

380
00:18:03,50 --> 00:18:07,879
那有可能每一個都需要  將來有可能每一個都會timeout

381
00:18:07,880 --> 00:18:10,610
都有可能timeout  那timeout都要重送

382
00:18:10,610 --> 00:18:12,449
重送的時候你封包不可能不在手上

383
00:18:12,450 --> 00:18:14,280
也就是說為了重送呢

384
00:18:14,280 --> 00:18:17,850
這個sender本身必須有足夠大的buffer

385
00:18:17,850 --> 00:18:20,80
來buffer已經送出去的封包

386
00:18:20,80 --> 00:18:24,610
那這個buffer size呢基本上就是等於這個SWS


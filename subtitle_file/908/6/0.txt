1
00:00:09,50 --> 00:00:10,850
好，在這一章裡面呢

2
00:00:10,850 --> 00:00:14,80
我們來跟各位介紹所謂的reliable transmission

3
00:00:14,80 --> 00:00:16,910
就是說我們在傳輸的時候呢

4
00:00:16,910 --> 00:00:19,580
可能要通過一個所謂的communication link

5
00:00:19,580 --> 00:00:21,709
不管是有線的、無線的

6
00:00:21,710 --> 00:00:24,50
我們從一邊傳到另外一邊的時候

7
00:00:24,50 --> 00:00:26,850
我們怎麼來做所謂的可靠的傳輸

8
00:00:26,850 --> 00:00:28,650
那在這一章裡面

9
00:00:28,650 --> 00:00:32,910
我們要介紹的內容先會做一個基本的介紹

10
00:00:32,910 --> 00:00:35,680
介紹說什麼叫做reliable transmission

11
00:00:35,680 --> 00:00:37,680
那困難在什麼地方

12
00:00:37,680 --> 00:00:39,850
然後我們會介紹第一個

13
00:00:39,850 --> 00:00:42,810
非常有名的叫做stop-and-wait protocol

14
00:00:42,810 --> 00:00:45,980
這是一個非常簡單的方法

15
00:00:45,980 --> 00:00:49,180
那它也可以做到所謂的reliable transmission

16
00:00:49,180 --> 00:00:51,750
但是呢它的效能不夠好

17
00:00:51,750 --> 00:00:54,950
然後可能會有延伸一些可能的問題

18
00:00:54,950 --> 00:00:57,650
接下來我們來介紹一個非常有名的

19
00:00:57,650 --> 00:00:59,879
叫做所謂的sliding window protocol

20
00:00:59,880 --> 00:01:01,150
我們叫做滑動視窗

21
00:01:01,150 --> 00:01:05,950
那sliding window本身它就改善了stop-and-wait的方式

22
00:01:05,950 --> 00:01:12,10
那不但是可以同時送多個封包而且可以做到所謂的reliable

23
00:01:12,10 --> 00:01:12,950
真正的reliable

24
00:01:12,950 --> 00:01:14,580
而且它的效能也好很多

25
00:01:14,580 --> 00:01:17,10
那最後我們會介紹一些

26
00:01:17,10 --> 00:01:22,510
針對sliding window protocol有哪些issue我們必須考慮的

27
00:01:22,510 --> 00:01:24,680
那接下來我們就開始來介紹

28
00:01:24,680 --> 00:01:26,750
什麼叫做reliable transmission

29
00:01:26,750 --> 00:01:29,810
我們說所謂的reliable transmission

30
00:01:29,810 --> 00:01:33,550
就是說我們希望資料傳送的時候呢

31
00:01:33,550 --> 00:01:38,210
可能會經過一個所謂的連結 communication link

32
00:01:38,210 --> 00:01:41,580
這個link本身可能可以是一個有線的

33
00:01:41,580 --> 00:01:44,110
就像一個同軸電腦或者同線

34
00:01:44,110 --> 00:01:47,480
那也有可能是無線的就是像wifi這樣子的東西

35
00:01:47,480 --> 00:01:49,680
就是說我們從2個node

36
00:01:49,680 --> 00:01:53,110
從一邊，假如說從左邊這邊要送到右邊來

37
00:01:53,110 --> 00:01:55,980
那我們中間呢經過一個 link

38
00:01:55,980 --> 00:01:59,980
這個link可以我們說簡單到是一個連線

39
00:01:59,980 --> 00:02:02,50
那也可能是一個LAN

40
00:02:02,50 --> 00:02:03,410
譬如說一個區域網路

41
00:02:03,410 --> 00:02:06,80
稍微有幾個交換機接起來都可以算

42
00:02:06,80 --> 00:02:08,250
好，那我們在傳輸的過程當中

43
00:02:08,250 --> 00:02:12,50
譬如說我們在封包從這邊送過去的過程當中

44
00:02:12,50 --> 00:02:15,510
那可能因為會有一些所謂的干擾

45
00:02:15,510 --> 00:02:17,679
就是說我們的資料

46
00:02:17,680 --> 00:02:20,510
在經過一個所謂的communication link的時候

47
00:02:20,510 --> 00:02:23,750
可能會因為我們叫做signal interference

48
00:02:23,750 --> 00:02:26,780
訊號的干擾譬如說電磁波

49
00:02:26,780 --> 00:02:29,950
這種干擾可能會造成我們data會錯誤

50
00:02:29,950 --> 00:02:32,310
那我們怎麼檢查data錯誤呢

51
00:02:32,310 --> 00:02:33,810
通常我們在一個frame

52
00:02:33,810 --> 00:02:36,610
我們講一個封包後面會有一個檢查碼

53
00:02:36,610 --> 00:02:39,50
那最常用的就是所謂的CRC

54
00:02:39,50 --> 00:02:41,650
所謂的cyclic redundancy check

55
00:02:41,650 --> 00:02:43,680
那CRC的方式就是說

56
00:02:43,680 --> 00:02:47,380
把我們資料的內容做一個運算、得到一個值

57
00:02:47,380 --> 00:02:51,280
最後我們把這個值跟data一起送到對方去

58
00:02:51,280 --> 00:02:53,280
那送的過程當中

59
00:02:53,280 --> 00:02:57,50
譬如說中間如果因為訊號干擾讓資料錯誤的話

60
00:02:57,50 --> 00:02:59,650
那對方收到的時候呢

61
00:02:59,650 --> 00:03:02,350
等於說也會做一樣CRC的檢查

62
00:03:02,350 --> 00:03:04,480
那如果發現內容不一樣

63
00:03:04,480 --> 00:03:06,510
譬如說檢查碼不相同

64
00:03:06,510 --> 00:03:10,780
那它知道說這個封包就已經算是錯誤了或者被毀掉了

65
00:03:10,780 --> 00:03:14,680
好，那當然有很多方法來解這個問題

66
00:03:14,680 --> 00:03:17,910
我們說有一些方法它是說 就是說叫做error codes

67
00:03:17,910 --> 00:03:22,680
有一些方式就是說我們除了CRC之外

68
00:03:22,680 --> 00:03:26,380
我們另外再加一些所謂的重複的資料

69
00:03:26,380 --> 00:03:29,10
就是我把我的資料再加多一點東西進去

70
00:03:29,10 --> 00:03:32,109
目的就是說可以所謂的不只是偵錯

71
00:03:32,110 --> 00:03:34,10
這是所謂的糾錯

72
00:03:34,10 --> 00:03:36,810
希望可以做到所謂的correct

73
00:03:36,810 --> 00:03:39,180
就是說我不但發現錯誤之後

74
00:03:39,180 --> 00:03:42,110
我還可以把這個錯誤把它更正回來

75
00:03:42,110 --> 00:03:45,150
那為了更正當然你就要付出代價

76
00:03:45,150 --> 00:03:47,180
就是說那個傳輸的資料量

77
00:03:47,180 --> 00:03:50,680
會比原來的資料可能多了更多一點

78
00:03:50,680 --> 00:03:57,10
所以這種方式呢  我們講它的overhead、它的負擔通常是有點過高

79
00:03:57,10 --> 00:04:01,410
所以一般來講我們就盡量不採用這種方式

80
00:04:01,410 --> 00:04:04,510
就是說我們讓這個封包傳送的過程當中

81
00:04:04,510 --> 00:04:06,950
如果這個封包被corrupt

82
00:04:06,950 --> 00:04:09,450
我們說如果封包被損毀的話

83
00:04:09,450 --> 00:04:10,780
我們就把它丟掉

84
00:04:10,780 --> 00:04:14,910
那我們就很簡單就是損毀的資料我們就把它discard

85
00:04:14,910 --> 00:04:15,579
就把它丟掉

86
00:04:15,580 --> 00:04:18,350
那這樣的話你的資料當然就毀掉嘛

87
00:04:18,350 --> 00:04:19,450
對方就沒有收到

88
00:04:19,450 --> 00:04:24,50
那我們說什麼叫做reliable transmission 可靠傳輸

89
00:04:24,50 --> 00:04:26,950
可靠的傳輸就是說你這個資料非常的重要

90
00:04:26,950 --> 00:04:32,349
對方一定要正確收到 阿如果說因為訊號干擾

91
00:04:32,350 --> 00:04:37,180
你這個封包如果掉了  那我們就要想辦法再送一次

92
00:04:37,180 --> 00:04:39,550
就是一定要讓對方正確收到

93
00:04:39,550 --> 00:04:42,210
這個叫做所謂的reliable transmission

94
00:04:42,210 --> 00:04:45,810
就是資料一定要讓對方正確收到

95
00:04:45,810 --> 00:04:51,350
那我們說怎麼樣做到這個樣的reliable transmission呢

96
00:04:51,350 --> 00:04:54,180
很簡單  我們用兩個常用的技術

97
00:04:54,180 --> 00:04:56,10
第一個叫做acknowledgement

98
00:04:56,10 --> 00:05:00,110
Acknowledgement的意思就是說對方如果成功收到的話

99
00:05:00,110 --> 00:05:03,680
那它應該告訴我說它有收到

100
00:05:03,680 --> 00:05:06,510
就是回應  就是我送一個封包給對方

101
00:05:06,510 --> 00:05:11,380
那對方如果正確收到的話它要告訴我、告訴這個sender

102
00:05:11,380 --> 00:05:14,950
說它正確收到  這個我們叫做所謂的acknowledgement

103
00:05:14,950 --> 00:05:16,479
就是你要正確地回應

104
00:05:16,480 --> 00:05:19,10
那第二個我們叫做所謂的timeout

105
00:05:19,10 --> 00:05:22,950
就是說雖然receiver它會配合

106
00:05:22,950 --> 00:05:24,450
如果正確收到的話

107
00:05:24,450 --> 00:05:27,80
那我們會做一個所謂的回應

108
00:05:27,80 --> 00:05:30,250
但是它有可能根本就沒收到

109
00:05:30,250 --> 00:05:32,680
那沒有收到就不可能給回應

110
00:05:32,680 --> 00:05:34,850
那這樣不是就僵在那裏了嗎

111
00:05:34,850 --> 00:05:38,180
就是sender等回應但是receiver根本沒收到

112
00:05:38,180 --> 00:05:40,280
它就不可能給回應阿

113
00:05:40,280 --> 00:05:42,150
那這樣就整個僵在那裏了

114
00:05:42,150 --> 00:05:45,10
所以必須靠一個機制我們叫做所謂的timeout

115
00:05:45,10 --> 00:05:49,550
Timeout就是說sender把這個資料送出去之後呢

116
00:05:49,550 --> 00:05:51,410
它就啟動一個所謂的計時器

117
00:05:51,410 --> 00:05:55,410
它希望在這個計時器所謂的倒時

118
00:05:55,410 --> 00:05:57,380
就是所謂的那個時間到之前

119
00:05:57,380 --> 00:06:00,780
能夠收到receiver的所謂的回應

120
00:06:00,780 --> 00:06:03,710
這個回應大概可以算一下時間

121
00:06:03,710 --> 00:06:06,210
就是雙方的一般我們叫做round trip time

122
00:06:06,210 --> 00:06:09,580
就是我送封包到對方多久然後回來多久

123
00:06:09,580 --> 00:06:12,80
那我這個timer timeout的時間

124
00:06:12,80 --> 00:06:15,780
就是比這個 round trip time來回呢再長一點點

125
00:06:15,780 --> 00:06:18,349
讓這個資料呢稍微有一點緩衝的空間

126
00:06:18,350 --> 00:06:21,310
那如果說我送一個封包之後呢

127
00:06:21,310 --> 00:06:23,10
就啟動這個所謂的計時器

128
00:06:23,10 --> 00:06:25,150
那計時器如果已經到了

129
00:06:25,150 --> 00:06:28,710
時間到了還沒有收到所謂的ACK

130
00:06:28,710 --> 00:06:30,49
就是對方的回應的話

131
00:06:30,50 --> 00:06:34,210
那我們就知道這個封包可能掉了或者回應掉了

132
00:06:34,210 --> 00:06:38,210
那因為我們掉的方向可能是封包掉或者回應的掉

133
00:06:38,210 --> 00:06:42,280
那這個sender都會不知道對方有沒有收到

134
00:06:42,280 --> 00:06:43,609
那不管是哪一個

135
00:06:43,610 --> 00:06:46,10
這個timer time out的時候

136
00:06:46,10 --> 00:06:48,510
這個sender就重送

137
00:06:48,510 --> 00:06:49,510
我們叫做retransmission

138
00:06:49,510 --> 00:06:53,680
這樣的、這兩個所謂的機制用起來

139
00:06:53,680 --> 00:06:56,510
就是acknowledgement加上所謂的timeout

140
00:06:56,510 --> 00:06:59,480
我們基本上就可以做到reliable transmission

141
00:06:59,480 --> 00:07:02,550
所以我們說什麼叫做acknowledgement呢

142
00:07:02,550 --> 00:07:09,310
就是說當receiver就是接收端它成功地收到一個封包

143
00:07:09,310 --> 00:07:13,50
成功的包含CRC檢查、check都對

144
00:07:13,50 --> 00:07:17,310
成功收到之後呢它會送一個叫做acknowledgement

145
00:07:17,310 --> 00:07:22,80
我們用所謂的ACK來做所謂的簡寫

146
00:07:22,80 --> 00:07:23,280
用A‧C‧K

147
00:07:23,280 --> 00:07:26,580
它會送一個ACK的frame

148
00:07:26,580 --> 00:07:28,950
那這個叫做所謂的control frame

149
00:07:28,950 --> 00:07:32,180
就是這個ACK本身它並沒有帶data

150
00:07:32,180 --> 00:07:34,950
我送一個封包是data嘛給對方

151
00:07:34,950 --> 00:07:37,450
那對方收到之後呢就回我一個ACK

152
00:07:37,450 --> 00:07:39,880
我們叫做acknowledgement簡稱ACK

153
00:07:39,880 --> 00:07:42,850
那這個ACK本身因為它沒有帶data

154
00:07:42,850 --> 00:07:45,310
所以我們說它是一個叫control frame

155
00:07:45,310 --> 00:07:50,510
它是為了控制這個流程、控制這個傳輸呢過程更流暢

156
00:07:50,510 --> 00:07:54,150
而特殊設計的一個frame所以我們叫做control frame

157
00:07:54,150 --> 00:07:56,549
因為它沒有帶data的意思啦

158
00:07:56,550 --> 00:08:01,10
那如果它帶有data的時候 那就代表兩方這個通訊

159
00:08:01,10 --> 00:08:04,210
我們叫做一般叫做所謂的 full duplex

160
00:08:04,210 --> 00:08:05,849
就是兩方同時在送data

161
00:08:05,850 --> 00:08:08,180
如果我們兩邊都在送data的時候

162
00:08:08,180 --> 00:08:11,410
那這個回覆本身就可以帶在data上面

163
00:08:11,410 --> 00:08:13,250
這個我們一般叫做pick it back

164
00:08:13,250 --> 00:08:18,110
那這個我們後面再來介紹 我們說這個所謂的

165
00:08:18,110 --> 00:08:21,850
假設這個ACK呢它只是一個control frame

166
00:08:21,850 --> 00:08:24,550
它就是我就是為了回應

167
00:08:24,550 --> 00:08:28,80
我收到一個正確的封包而特別送出來的frame

168
00:08:28,80 --> 00:08:29,580
我們叫做control frame

169
00:08:29,580 --> 00:08:33,949
好，那我們說當sender它送了一個封包出去

170
00:08:33,950 --> 00:08:36,210
然後它也收到一個ACK

171
00:08:36,210 --> 00:08:39,50
有收到ACK那我們說這個代表說

172
00:08:39,49 --> 00:08:42,609
這個sender剛剛送出去的這個frame

173
00:08:42,610 --> 00:08:46,150
是已經成功地被對方收到

174
00:08:46,150 --> 00:08:49,110
所以這個時候就叫做所謂的reliable transmission

175
00:08:49,110 --> 00:08:53,80
就是我送一個封包而且呢收到一個ACK

176
00:08:53,80 --> 00:08:55,350
這個是一個非常好的結果

177
00:08:55,350 --> 00:08:57,710
好，那我們說

178
00:08:57,710 --> 00:09:02,480
如果呢sender它把封包丟出去了

179
00:09:02,480 --> 00:09:04,450
可是呢經過一個時間

180
00:09:04,450 --> 00:09:06,950
我還是沒有收到這個ACK

181
00:09:06,950 --> 00:09:09,10
就因為ACK可能掉了、封包可能掉了

182
00:09:09,10 --> 00:09:13,610
兩種狀況都有可能  那它就會需要再重送一次嘛

183
00:09:13,610 --> 00:09:18,80
那這個重送一次的機制呢  我們就叫用所謂的timeout的概念

184
00:09:18,80 --> 00:09:25,280
等於說我們會設定一個計時器我們叫做timer  那當timer這個timeout之後

185
00:09:25,280 --> 00:09:30,410
我們就必須做所謂的retransmit the original frame

186
00:09:30,410 --> 00:09:34,280
就是在剛剛那個frame再送一次

187
00:09:34,280 --> 00:09:36,110
因為我們傳輸的過程當中

188
00:09:36,110 --> 00:09:39,710
有可能封包會壞掉  或者它的回應

189
00:09:39,710 --> 00:09:43,380
我們講它的ACK可能壞掉 兩個都有可能

190
00:09:43,380 --> 00:09:46,850
不管哪一個sender都不會收到回應

191
00:09:46,850 --> 00:09:50,80
那沒有收到回應就不能等、不能一直等

192
00:09:50,80 --> 00:09:52,810
所以那個timer它等到time out之後呢

193
00:09:52,810 --> 00:09:57,750
它就要重送剛剛那個沒有收到回應的那個封包 就重送一次

194
00:09:57,750 --> 00:10:03,80
那我們說這種利用acknowledgement回應

195
00:10:03,80 --> 00:10:06,880
還有timeout這兩個機制設計的方法

196
00:10:06,880 --> 00:10:12,710
簡單來講就叫做所謂的Automatic Repeat reQuest

197
00:10:12,710 --> 00:10:15,410
我們一般叫做ARQ的演算法

198
00:10:15,410 --> 00:10:19,780
所謂的ARQ就是Automatic Repeat reQuest

199
00:10:19,780 --> 00:10:23,150
Automatic Repeat就是因為它有timeout

200
00:10:23,150 --> 00:10:25,510
Timeout之後呢再送一次

201
00:10:25,510 --> 00:10:27,110
所以叫做automatic repeat

202
00:10:27,110 --> 00:10:30,310
那reQuest就是相當於我們把資料送出去

203
00:10:30,310 --> 00:10:33,750
就等reQuest那個acknowledgement、ACK

204
00:10:33,750 --> 00:10:36,480
那ARQ是非常有名的

205
00:10:36,480 --> 00:10:42,50
基本上就是因為它用了acknowledgement跟timeout這兩個機制

206
00:10:42,50 --> 00:10:47,750
好，那接下來我們就來介紹一個很基本的

207
00:10:47,750 --> 00:10:49,710
所謂的reliable transmission

208
00:10:49,710 --> 00:10:51,850
我們叫做stop-and-wait protocol

209
00:10:51,850 --> 00:10:55,850
好，我們說這個stop-and-wait這個protocol呢

210
00:10:55,850 --> 00:10:59,650
它的機制是非常簡單也非常直覺

211
00:10:59,650 --> 00:11:02,949
就是說從這個protocol的名字

212
00:11:02,950 --> 00:11:07,350
我們大略就可以想到什麼叫做stop-and-wait

213
00:11:07,350 --> 00:11:12,410
就是說每次送一個frame、sender每次送一個frame

214
00:11:12,410 --> 00:11:14,949
它就停下來，這個叫做stop

215
00:11:14,950 --> 00:11:16,980
送一個封包就停下來

216
00:11:16,980 --> 00:11:19,710
然後wait、wait什麼呢

217
00:11:19,710 --> 00:11:21,350
Wait對方的ACK

218
00:11:21,350 --> 00:11:24,910
就是送一個封包就要等一個回應這麼簡單

219
00:11:24,910 --> 00:11:28,910
就是說每次這個sender送一個封包之後呢

220
00:11:28,910 --> 00:11:32,949
它就會等一個回應就是一對一

221
00:11:32,950 --> 00:11:34,550
送一個封包等一個回應

222
00:11:34,550 --> 00:11:39,180
等這個回應到了之後呢才能送下一個封包

223
00:11:39,180 --> 00:11:42,280
就是一個封包送完一定要等一個回應過來

224
00:11:42,280 --> 00:11:46,410
那如果回應沒有回來或者來不及回來那我就timeout

225
00:11:46,410 --> 00:11:49,209
Timeout我就重送、重送剛剛那個封包

226
00:11:49,210 --> 00:11:55,280
那一直到一個封包都有收到這個它的對應的這個回應ACK之後呢

227
00:11:55,280 --> 00:11:58,10
才會送下一個封包

228
00:11:58,10 --> 00:12:00,310
就是一個封包送出去要等回應

229
00:12:00,310 --> 00:12:02,979
那如果回應沒有回來它就timeout

230
00:12:02,980 --> 00:12:05,150
Timeout它就重送然後再等回應

231
00:12:05,150 --> 00:12:07,310
等到這個回應收到之後呢

232
00:12:07,310 --> 00:12:10,79
才會進行所謂的下一個封包

233
00:12:10,80 --> 00:12:14,780
那這樣的機制呢我們說就是所謂的stop-and-wait的機制

234
00:12:14,780 --> 00:12:19,50
就是等到time out的時候呢它會做retransmission的動作

235
00:12:19,50 --> 00:12:22,50
好，那我們來看這麼簡單的機制

236
00:12:22,50 --> 00:12:26,150
那我們來看看它有幾個不同scenario、幾個情境

237
00:12:26,150 --> 00:12:30,880
就是說stop-and-wait就是送一個封包然後等一個回應

238
00:12:30,880 --> 00:12:34,250
這麼簡單的機制那其實雖然方法很簡單

239
00:12:34,250 --> 00:12:36,10
可是狀況也有點複雜

240
00:12:36,10 --> 00:12:37,810
我們有四個狀況來討論一下

241
00:12:37,810 --> 00:12:42,410
第一個呢我們說第一個是算是最正常

242
00:12:42,410 --> 00:12:43,780
就是什麼事情都沒有發生

243
00:12:43,780 --> 00:12:46,880
也就是說這個封包呢丟給對方

244
00:12:46,880 --> 00:12:49,910
然後對方的ACK也都正確收到

245
00:12:49,910 --> 00:12:52,110
我們說第一個case就是說這個ACK

246
00:12:52,110 --> 00:12:55,710
在timeout之前就收到了

247
00:12:55,710 --> 00:12:58,510
就像我們講左邊的這個case

248
00:12:58,510 --> 00:13:01,50
我們看一下就是說第一個

249
00:13:01,50 --> 00:13:04,510
就是這個sender送一個封包給receiver

250
00:13:04,510 --> 00:13:06,310
我們這個動畫裡面有show一個

251
00:13:06,310 --> 00:13:10,380
我們再看一次  就是說sender本身把這個封包丟給receiver

252
00:13:10,380 --> 00:13:14,950
那receiver收到了而且也正確那它就回一個ACK

253
00:13:14,950 --> 00:13:18,610
所以它就回一個ACK 這個地方ACK就回來

254
00:13:18,610 --> 00:13:23,610
而且這個ACK回來呢  在這個time out之前就到

255
00:13:23,610 --> 00:13:25,750
我們這裡有設計一個所謂time out的概念

256
00:13:25,750 --> 00:13:29,50
就是說我們一個封包丟出去的時候

257
00:13:29,50 --> 00:13:31,880
我們在這個地方就有點像我就啟動一個timer

258
00:13:31,880 --> 00:13:38,780
這個timer在這個時間點  在這個時間點如果ACK沒有回來

259
00:13:38,780 --> 00:13:41,250
我就會timeout  timeout我就要重送

260
00:13:41,250 --> 00:13:43,610
不過剛好這個case比較單純

261
00:13:43,610 --> 00:13:48,880
就是ACK呢它也及時在time out之前就收到了

262
00:13:48,880 --> 00:13:53,180
所以這個狀況是最正常 如果送一個封包過去

263
00:13:53,180 --> 00:13:57,949
然後我設一個timer 那timer timeout之前這個ACK就回來了

264
00:13:57,950 --> 00:14:02,380
等於說timeout假設那麼長 那送一個封包過去ACK回來

265
00:14:02,380 --> 00:14:05,410
那這個是最正常、這個是最好的狀況

266
00:14:05,410 --> 00:14:08,180
就是說封包也沒有掉、ACK也沒有掉

267
00:14:08,180 --> 00:14:11,410
那我就可以這樣送一個封包等一個ACK

268
00:14:11,410 --> 00:14:15,449
然後接下來ACK收到  我就可以送下一個封包、下一個ACK

269
00:14:15,450 --> 00:14:17,880
一個封包、一個ACK、一個封包、一個ACK

270
00:14:17,880 --> 00:14:23,480
至少可以這樣子算是流暢的傳送下去 而且它非常的可靠

271
00:14:23,480 --> 00:14:29,10
這是第一個狀況 第一個狀況呢是算是最好的狀況

272
00:14:29,10 --> 00:14:31,650
我們再來看第二個狀況 第二個狀況就是說

273
00:14:31,650 --> 00:14:34,480
這個original frame它是lost

274
00:14:34,480 --> 00:14:38,650
就是原來的這個封包、原始的封包它掉了

275
00:14:38,650 --> 00:14:41,150
好，我們來看這個動畫、看右邊這個動畫

276
00:14:41,150 --> 00:14:45,480
我們說 封包丟出去的時候呢送到一半它就掉了

277
00:14:45,480 --> 00:14:50,80
可能因為有什麼干擾  或者是檢查碼發現錯誤

278
00:14:50,80 --> 00:14:54,650
錯誤也是把它  封包把它當成損毀就把它丟掉

279
00:14:54,650 --> 00:14:57,650
那丟掉之後當然就不能送ACK拉

280
00:14:57,650 --> 00:15:02,610
因為那個ACK是代表說是正確收到receiver才能回ACK嘛

281
00:15:02,610 --> 00:15:05,950
阿這個封包丟掉可能是第一個 它是錯誤的

282
00:15:05,950 --> 00:15:09,480
所receiver就不能回ACK 第二個有可能說

283
00:15:09,480 --> 00:15:13,850
這個封包根本在網路的中間就完全、完全毀掉了

284
00:15:13,850 --> 00:15:17,410
所以receiver根本就沒有收到 那沒有收到的話

285
00:15:17,410 --> 00:15:19,579
當然也不可能就、不可能回ACK嘛

286
00:15:19,580 --> 00:15:23,280
所以這個時候變成說ACK就不會出現

287
00:15:23,280 --> 00:15:25,550
ACK不會出現我們再來看

288
00:15:25,550 --> 00:15:27,979
就這個sender本身它在等ACK

289
00:15:27,980 --> 00:15:30,650
可是這個ACK呢它永遠不會出現

290
00:15:30,650 --> 00:15:33,79
所以它就會我們講它就會timeout

291
00:15:33,80 --> 00:15:34,910
那timeout之後呢

292
00:15:34,910 --> 00:15:38,750
當然就retransmission 所以這個地方我們就看到說

293
00:15:38,750 --> 00:15:42,580
好，我們這裡呢就先有一個所謂的timeout的event

294
00:15:42,580 --> 00:15:45,950
在這個時間點這個地方發生了timeout

295
00:15:45,950 --> 00:15:49,480
那之後呢這個就重送嘛、就重送一個封包

296
00:15:49,480 --> 00:15:52,650
那重送之後呢 那就等一個ACK

297
00:15:52,650 --> 00:15:55,880
這時候ACK呢就算是順利地回來了

298
00:15:55,880 --> 00:15:59,550
所以在這個例子裡面呢倒是也還好

299
00:15:59,550 --> 00:16:00,910
就是說我的frame

300
00:16:00,910 --> 00:16:05,280
譬如說傳送的過程當中  像這個地方frame壞掉

301
00:16:05,280 --> 00:16:09,410
那可是呢我會因為有time out的機制

302
00:16:09,410 --> 00:16:12,910
所以雖然frame壞掉  但是因為有timeout的機制

303
00:16:12,910 --> 00:16:16,980
所以、所以我還是可以因為timeout然後重送

304
00:16:16,980 --> 00:16:21,250
讓我這個資料呢還是可以成功地送到對方


1
00:00:08,85 --> 00:00:10,78
接下來我們來跟各位介紹

2
00:00:10,78 --> 00:00:13,14
什麼叫做logical channel的概念

3
00:00:13,15 --> 00:00:15,68
我們剛剛有提到說 我們一個link

4
00:00:15,68 --> 00:00:17,28
就是說他真的連線呢

5
00:00:17,28 --> 00:00:19,81
可能是可以有線的 可以是無線的

6
00:00:19,81 --> 00:00:24,11
可是一般的link都是把兩個node

7
00:00:24,11 --> 00:00:27,64
他們因為直接在一起嘛

8
00:00:27,65 --> 00:00:29,91
譬如說 有線的把兩個連接在一起

9
00:00:29,91 --> 00:00:32,95
或是說無線的 他們都是很近的距離

10
00:00:32,95 --> 00:00:35,7
因為他們可以直接可以通訊

11
00:00:35,8 --> 00:00:36,58
所以我們剛提到說

12
00:00:36,58 --> 00:00:40,5
怎麼樣在這個link上面傳輸的時候呢

13
00:00:40,5 --> 00:00:41,35
更有效率啦

14
00:00:41,35 --> 00:00:43,38
那個頻寬怎麼樣共用啦

15
00:00:43,38 --> 00:00:46,25
怎麼讓它提升頻寬的使用率啦等等

16
00:00:46,25 --> 00:00:50,85
那強調的都是比較短距 然後直接連接的

17
00:00:50,85 --> 00:00:53,95
可是我們的Internet是一個非常非常大的網路啊

18
00:00:53,95 --> 00:00:55,91
那我們最遠的兩端

19
00:00:55,91 --> 00:00:59,68
我們所謂的host他們真的在通訊的時候

20
00:00:59,68 --> 00:01:02,95
是要經過很多這種所謂的link link link

21
00:01:02,95 --> 00:01:06,8
就是那個連線可能要經過幾個

22
00:01:06,8 --> 00:01:09,000
或者幾十個這樣的link

23
00:01:09,1 --> 00:01:11,68
那不同 而且這個路線上面呢

24
00:01:11,68 --> 00:01:15,38
我們講 這個link的種類也很多啊

25
00:01:15,38 --> 00:01:19,98
可能第一段走ethernet 第二段可能走wifi

26
00:01:19,98 --> 00:01:24,38
第三段 可能走我們講像將來的LTE或者wimax

27
00:01:24,38 --> 00:01:27,45
第四段第五段 就是每一段

28
00:01:27,45 --> 00:01:30,31
走的這個link呢可能都不一樣

29
00:01:30,31 --> 00:01:32,88
然後速度的快慢也都不一樣

30
00:01:32,88 --> 00:01:36,88
所以對我們這種所謂的logical channel就是說

31
00:01:36,88 --> 00:01:39,27
那我們的應用 像我們說

32
00:01:39,28 --> 00:01:41,18
我們在兩台電腦上面

33
00:01:41,18 --> 00:01:46,78
譬如說run了 譬如說剛提到有視訊會議的應用

34
00:01:46,78 --> 00:01:49,55
那我們這個應用在互相溝通的時候呢

35
00:01:49,55 --> 00:01:53,61
通常我們會給他建立一個所謂的channel

36
00:01:53,61 --> 00:01:55,38
那這個channel呢

37
00:01:55,38 --> 00:01:57,21
我們為什麼叫做logical channel

38
00:01:57,21 --> 00:01:59,41
所謂的logical意思就是說

39
00:01:59,41 --> 00:02:05,54
他並不是真正的去建一條線把它建起來

40
00:02:05,55 --> 00:02:06,98
因為我們說

41
00:02:06,98 --> 00:02:09,61
即使你的封包丟到Internet上面

42
00:02:09,61 --> 00:02:12,18
他也會動態的走不同的路

43
00:02:12,18 --> 00:02:15,95
就是說我們兩端的應用在互相通訊

44
00:02:15,95 --> 00:02:18,75
通訊就是說 我會丟封包給你你會丟封包給我

45
00:02:18,75 --> 00:02:21,21
我們封包在互相這種交流的時候

46
00:02:21,21 --> 00:02:26,15
這個封包一旦進到Internet他會走不同的路啊

47
00:02:26,15 --> 00:02:30,90
雖然我們說封包在Internet裡面會走不同的路

48
00:02:30,91 --> 00:02:34,25
但是對我們這種application來講的話

49
00:02:34,25 --> 00:02:36,58
我都不要管這些事情 我不用管

50
00:02:36,58 --> 00:02:41,60
我只要管說 我們彼此之間有建一個channel

51
00:02:41,61 --> 00:02:45,25
那這個channel我們就叫做所謂的logical channel

52
00:02:45,25 --> 00:02:50,18
就是說他跟我們在網路上面實際會走哪一條路呢

53
00:02:50,18 --> 00:02:51,75
是沒有關係

54
00:02:51,75 --> 00:02:54,81
就是他會走實際的路線可能會不一樣

55
00:02:54,81 --> 00:02:56,78
但我們都不是那麼在意

56
00:02:56,78 --> 00:03:00,48
我們只在意說 我們是有連結

57
00:03:00,48 --> 00:03:02,1
就是我們的關係啦

58
00:03:02,1 --> 00:03:05,81
就是說我們這兩端建了一個所謂的connection

59
00:03:05,81 --> 00:03:07,45
所以我們講這個connection本身

60
00:03:07,45 --> 00:03:09,11
他是比較logical的

61
00:03:09,11 --> 00:03:12,45
就是說這種connection本身 當然是在網路上面

62
00:03:12,45 --> 00:03:15,48
他在傳輸的時候會走不同的路

63
00:03:15,48 --> 00:03:19,15
但是我們的關係呢是連在這裡

64
00:03:19,15 --> 00:03:22,75
就跟下面真的在送封包的時候

65
00:03:22,75 --> 00:03:25,58
走什麼路是沒有關係的

66
00:03:25,58 --> 00:03:27,35
我們的關係就是因為

67
00:03:27,35 --> 00:03:28,71
我們用了資料結構

68
00:03:28,71 --> 00:03:31,48
把我們建一個所謂的連結的關係

69
00:03:31,48 --> 00:03:33,8
那這種連結的關係呢

70
00:03:33,8 --> 00:03:35,75
就叫做所謂的logical channel

71
00:03:35,75 --> 00:03:37,15
像這個例子裡面

72
00:03:37,15 --> 00:03:41,84
我們這邊有兩個 這個application的軟體

73
00:03:41,85 --> 00:03:43,51
一個在左邊 一個在右邊

74
00:03:43,51 --> 00:03:44,95
那我們中間

75
00:03:44,95 --> 00:03:46,78
建了一個這個虛線的

76
00:03:46,78 --> 00:03:48,65
這是說我們建立一個connection

77
00:03:48,65 --> 00:03:51,61
簡單 就叫做所謂的logical channel

78
00:03:51,61 --> 00:03:52,75
我們剛提到

79
00:03:52,75 --> 00:03:54,58
為什麼叫logical為什麼不叫physical呢

80
00:03:54,58 --> 00:03:58,51
logical就是因為他並不是真正的線

81
00:03:58,51 --> 00:04:00,65
不是一個這樣子的線

82
00:04:00,65 --> 00:04:04,31
這個線只是一個關係存在而已

83
00:04:04,31 --> 00:04:08,11
那我們真的網路傳輸這個封包的時候呢

84
00:04:08,11 --> 00:04:11,85
他可能是會這樣子繞過去

85
00:04:11,85 --> 00:04:14,88
也可能這樣子繞等等等等 繞

86
00:04:14,88 --> 00:04:16,94
就是說他走哪一條路我們都無所謂

87
00:04:16,95 --> 00:04:19,58
但是我們的關係是存在在那裡的

88
00:04:19,58 --> 00:04:22,17
變成這個叫做所謂的logical channel的概念

89
00:04:22,17 --> 00:04:26,54
那我們現在像在TCP 我們後面會介紹

90
00:04:26,55 --> 00:04:31,45
TCP本身他就需要說 我兩邊應用的軟體

91
00:04:31,45 --> 00:04:33,68
如果用TCP要通訊的話

92
00:04:33,68 --> 00:04:36,87
我們必須先建一個連線 這個連線呢

93
00:04:36,88 --> 00:04:40,5
就是我們這裡所謂的logical channel的意思

94
00:04:40,5 --> 00:04:42,75
這個連線本身是關係存在

95
00:04:42,75 --> 00:04:44,68
真的封包在網路上面送

96
00:04:44,68 --> 00:04:47,10
走哪一條路這都沒有關係

97
00:04:47,11 --> 00:04:49,68
只是我們的關係存在

98
00:04:49,68 --> 00:04:52,44
好 那接下來我們再來介紹說

99
00:04:52,45 --> 00:04:53,95
一般的網路

100
00:04:53,95 --> 00:04:58,61
我們對這個網路的可靠性也是非常的在意

101
00:04:58,61 --> 00:05:00,10
就是說網路本身

102
00:05:00,11 --> 00:05:03,75
我們說應該把一些error 一些錯誤呢

103
00:05:03,75 --> 00:05:06,25
把它隱藏起來

104
00:05:06,25 --> 00:05:10,15
不要讓使用者來擔心這個問題

105
00:05:10,15 --> 00:05:12,8
我們來看看說

106
00:05:12,8 --> 00:05:14,94
網路上面到底可能發生什麼樣的錯誤呢？

107
00:05:14,95 --> 00:05:19,51
我們說 第一個 我們的bits呢可能會lost

108
00:05:19,51 --> 00:05:21,38
就是說我們的資料

109
00:05:21,38 --> 00:05:23,15
因為在網路上面傳輸的內容

110
00:05:23,15 --> 00:05:25,34
都是一個bit一個bit

111
00:05:25,35 --> 00:05:27,75
因為我們都是數位的這種通訊嘛

112
00:05:27,75 --> 00:05:32,10
所以我們的資料最後都會轉換成一個bit一個bit

113
00:05:32,11 --> 00:05:33,61
就是0101這樣子

114
00:05:33,61 --> 00:05:36,27
然後在我們的這個所謂的channel上面傳送

115
00:05:36,28 --> 00:05:40,85
我們講譬如說這個 一個physical link

116
00:05:40,85 --> 00:05:42,80
譬如說這個有線的資料

117
00:05:42,81 --> 00:05:45,21
這個有線本身譬如說是光纖

118
00:05:45,21 --> 00:05:48,88
是銅線 或者是同軸電纜

119
00:05:48,88 --> 00:05:51,71
或者所謂的無線 透過天線的

120
00:05:51,71 --> 00:05:54,11
我們在資料上面傳送的時候呢

121
00:05:54,11 --> 00:05:56,41
 都是一個bit一個bit送

122
00:05:56,41 --> 00:05:59,5
所以我們說我們的資料在上面送

123
00:05:59,5 --> 00:06:00,85
都是一個bit一個bit

124
00:06:00,85 --> 00:06:05,44
那這個bit本身 在上面是用什麼形式來呈現呢

125
00:06:05,45 --> 00:06:09,38
如果是走所謂的線路 像銅線

126
00:06:09,38 --> 00:06:13,65
我們是用電位 就是我們有電壓嘛

127
00:06:13,65 --> 00:06:16,70
那如果是光纖呢 那我就用光

128
00:06:16,71 --> 00:06:20,71
用光 譬如說我用亮度或者有光沒有光 也可以

129
00:06:20,71 --> 00:06:23,98
那如果你用那種所謂的無線通訊

130
00:06:23,98 --> 00:06:26,81
那你上面是什麼 就是電磁波的能量

131
00:06:26,81 --> 00:06:31,15
就是說我們用 我們的資料是1或0

132
00:06:31,15 --> 00:06:35,51
可是1或0我們在不同的link上面有不同的表達方式

133
00:06:35,51 --> 00:06:38,68
這我們會介紹 那既然有不同的表達方式

134
00:06:38,68 --> 00:06:40,10
他就容易受到干擾

135
00:06:40,11 --> 00:06:43,48
譬如說我們用電位 那你在傳輸這個線路

136
00:06:43,48 --> 00:06:46,25
你可能經過一個 譬如說一個電場

137
00:06:46,25 --> 00:06:48,30
或者一個電磁波比較強的

138
00:06:48,31 --> 00:06:49,95
那如果產生一個電磁波

139
00:06:49,95 --> 00:06:52,45
你這個原來的電壓可能就被干擾掉

140
00:06:52,45 --> 00:06:55,31
你原來本來比較電位就會變成

141
00:06:55,31 --> 00:06:58,1
亂掉了 你的資料就會錯掉

142
00:06:58,1 --> 00:07:01,34
所以 在這個link上面傳輸呢

143
00:07:01,35 --> 00:07:04,98
也沒有百分之百說一定對啦

144
00:07:04,98 --> 00:07:07,68
所以尤其是銅線的傳輸

145
00:07:07,68 --> 00:07:10,1
很容易受電磁波的干擾

146
00:07:10,1 --> 00:07:14,48
光纖 因為光束 比較不受 因為他是光嘛

147
00:07:14,48 --> 00:07:17,71
跟電比較沒有直接的這個影響關係

148
00:07:17,71 --> 00:07:20,91
所以電磁波比較不容易影響到光的傳輸

149
00:07:20,91 --> 00:07:25,1
所以光纖我們說 一般可以送的距離更遠

150
00:07:25,1 --> 00:07:27,61
因為他不受電磁波的干擾

151
00:07:27,61 --> 00:07:30,27
不管怎麼樣 就是說我們的bits

152
00:07:30,28 --> 00:07:33,38
我們的資料 在這個link上面傳輸的時候呢

153
00:07:33,38 --> 00:07:35,45
可能會錯掉一個bit

154
00:07:35,45 --> 00:07:37,58
我們說1變成0 就是錯掉

155
00:07:37,58 --> 00:07:40,15
0變成1 也是錯掉

156
00:07:40,15 --> 00:07:43,1
那這個錯誤呢 我們當然希望說

157
00:07:43,1 --> 00:07:45,68
如果是1變成0 你這個封包就全部丟掉

158
00:07:45,68 --> 00:07:48,97
很可惜 所以我們會有一些機制

159
00:07:48,98 --> 00:07:52,28
 就是說 萬一你真的有錯誤發生的時候呢

160
00:07:52,28 --> 00:07:55,5
那我怎麼樣把他補救回來

161
00:07:55,5 --> 00:07:59,38
我們第一個就偵錯 我偵測說哪個bit錯掉

162
00:07:59,38 --> 00:08:02,11
另外一個叫做糾錯

163
00:08:02,11 --> 00:08:03,41
叫做correction

164
00:08:03,41 --> 00:08:05,65
就是說我如果知道這個bit錯掉

165
00:08:05,65 --> 00:08:08,88
那我就看啊 那你如果是錯掉的

166
00:08:08,88 --> 00:08:12,38
那你現在1變成0 我就把你更正回來就好了

167
00:08:12,38 --> 00:08:14,48
所以第一個我們要偵錯

168
00:08:14,48 --> 00:08:16,81
第二個就要做到所謂的糾錯

169
00:08:16,81 --> 00:08:18,18
就是有錯誤把你更正

170
00:08:18,18 --> 00:08:21,27
那我們如果錯誤呢是一個bit

171
00:08:21,28 --> 00:08:24,1
這就比較容易簡單可以偵測出來

172
00:08:24,1 --> 00:08:28,1
萬一這個錯的是一個 我們叫做burst error

173
00:08:28,1 --> 00:08:32,18
burst error就是說 我連續錯了好多個bits

174
00:08:32,18 --> 00:08:36,1
譬如說這個打了一個雷 然後趴！

175
00:08:36,1 --> 00:08:37,54
這個錯掉幾十個bits

176
00:08:37,54 --> 00:08:39,50
幾十個bits要把它還原

177
00:08:39,51 --> 00:08:42,21
這個就比較困難啦 還原一個bit比較簡單

178
00:08:42,20 --> 00:08:44,84
還原幾十個bits就不容易啦

179
00:08:44,85 --> 00:08:46,15
那這個就牽涉到說

180
00:08:46,15 --> 00:08:48,55
那我們當時在傳輸的時候呢

181
00:08:48,55 --> 00:08:50,37
有沒有增加一些

182
00:08:50,38 --> 00:08:53,95
所謂未來可以糾錯的資訊

183
00:08:53,95 --> 00:08:56,71
通常的做法都是說 我多送幾個bits

184
00:08:56,71 --> 00:08:58,98
 譬如說最簡單就是說 那我送兩個封包

185
00:08:58,98 --> 00:09:02,70
譬如說原來這個資料這麼大 那我再送一倍

186
00:09:02,71 --> 00:09:05,45
萬一這個壞掉了 我至少還有一份在

187
00:09:05,45 --> 00:09:06,74
類似像這樣子

188
00:09:06,75 --> 00:09:10,8
就是說我可以因為多送了一些重複的資料

189
00:09:10,8 --> 00:09:12,45
讓我將來在收到的時候呢

190
00:09:12,45 --> 00:09:17,38
有能力偵測跟糾錯 或者偵錯跟糾錯的話

191
00:09:17,38 --> 00:09:23,11
這個都是我們說網路把error把它處理掉

192
00:09:23,11 --> 00:09:27,58
等於說他可以來處理這種網路的error

193
00:09:27,58 --> 00:09:31,5
他可以把它等於說 把他完整的處理掉

194
00:09:31,5 --> 00:09:34,78
那另外就是說 除了bit錯誤之外

195
00:09:34,78 --> 00:09:36,55
剛剛講 bit是因為

196
00:09:36,55 --> 00:09:39,40
在傳輸經過一個link的時候呢

197
00:09:39,41 --> 00:09:42,61
各種干擾讓他錯誤 那我們可以把他找到

198
00:09:42,61 --> 00:09:45,21
 糾錯 這個是一個做法

199
00:09:45,21 --> 00:09:46,5
另外一個做法就是說

200
00:09:46,5 --> 00:09:48,98
萬一你真的沒有辦法把它更正回來的話

201
00:09:48,98 --> 00:09:51,38
那封包就把它丟掉 因為我們說

202
00:09:51,38 --> 00:09:54,45
 Internet本來就是unreliable

203
00:09:54,45 --> 00:09:57,31
就是不可靠 萬一真的有發生錯誤的話

204
00:09:57,31 --> 00:09:59,50
真的救不回來就把它丟掉

205
00:09:59,51 --> 00:10:01,18
另外一個就是說

206
00:10:01,18 --> 00:10:04,85
除了封包在傳輸的這種干擾之外

207
00:10:04,85 --> 00:10:07,48
封包還會掉 掉什麼呢

208
00:10:07,48 --> 00:10:11,5
就是因為所謂的congestion 擁擠

209
00:10:11,5 --> 00:10:14,35
擁擠就剛剛提到 我封包收進來都是對的

210
00:10:14,35 --> 00:10:17,40
 router把封包收進來 通通都正確

211
00:10:17,41 --> 00:10:20,88
都沒有錯 只是我要把他丟出去的時候呢

212
00:10:20,88 --> 00:10:23,60
來不及丟出去 因為我阻塞

213
00:10:23,61 --> 00:10:26,88
譬如說 我本來要從這個link把封包丟出去

214
00:10:26,88 --> 00:10:28,35
結果這個link現在就剛好阻塞

215
00:10:28,35 --> 00:10:29,38
為什麼要阻塞呢

216
00:10:29,38 --> 00:10:32,41
因為他下一個這個router他已經塞住了

217
00:10:32,41 --> 00:10:34,81
那塞住的時候我們封包丟不出去

218
00:10:34,81 --> 00:10:35,98
可是因為一直進來啊

219
00:10:35,98 --> 00:10:40,27
就進來的速度如果遠遠大於出去的速度

220
00:10:40,28 --> 00:10:42,1
你就一定要把它queue起來

221
00:10:42,1 --> 00:10:45,64
先放在一般我們叫做queue或者buffer

222
00:10:45,65 --> 00:10:48,28
那不管queue或buffer都是記憶體

223
00:10:48,28 --> 00:10:50,18
所以他一定有一個上限

224
00:10:50,18 --> 00:10:53,95
所以一開始如果說進來的速度大於出去的速度

225
00:10:53,95 --> 00:10:55,95
一開始的時候還可以忍受

226
00:10:55,95 --> 00:10:58,8
因為等於說我可以暫時把它存起來

227
00:10:58,8 --> 00:11:01,5
等一下慢慢的把他消化

228
00:11:01,5 --> 00:11:03,71
可是如果進來的量持續的擴大

229
00:11:03,71 --> 00:11:06,78
真的消化不了的時候 就要開始丟封包

230
00:11:06,78 --> 00:11:09,28
阿這個封包呢 我們就叫做lost

231
00:11:09,28 --> 00:11:12,91
因為阻塞 封包被丟棄

232
00:11:12,91 --> 00:11:15,98
這個也是網路裡面會常發生的問題

233
00:11:15,98 --> 00:11:18,31
網路上面呢還有更嚴重

234
00:11:18,31 --> 00:11:19,90
譬如說我整個link斷掉

235
00:11:19,91 --> 00:11:27,38
甚至說我整個router 都當掉 譬如說我停電

236
00:11:27,38 --> 00:11:30,75
這一區停電 那他網路都斷得一塌糊塗

237
00:11:30,75 --> 00:11:33,85
那所以有link可能斷掉 router可能壞掉啦

238
00:11:33,85 --> 00:11:37,18
還有我們剛也介紹 我的message可能delay

239
00:11:37,18 --> 00:11:40,91
delay就是說因為我們進到router之後

240
00:11:40,91 --> 00:11:43,41
我們說一個封包進到這個router

241
00:11:43,41 --> 00:11:45,55
我們會繞繞繞繞繞

242
00:11:45,55 --> 00:11:47,48
最後才繞到那個destination嘛

243
00:11:47,48 --> 00:11:51,58
就是說 那我們這個繞路的過程當中

244
00:11:51,58 --> 00:11:55,1
就是叫delay 因為他會被延遲

245
00:11:55,1 --> 00:11:58,35
那我們說 這個message本身

246
00:11:58,35 --> 00:12:01,55
也有可能 我們叫做out of order

247
00:12:01,55 --> 00:12:04,48
就是順序 也可能不一樣

248
00:12:04,48 --> 00:12:06,88
順序不一樣 因為我們也知道說

249
00:12:06,88 --> 00:12:09,60
 因為每一個封包走的路線不一樣

250
00:12:09,61 --> 00:12:11,61
譬如說第一個封包 我走這樣子

251
00:12:11,61 --> 00:12:16,15
就比較遠嘛 那第二個封包呢 就直接走進來

252
00:12:16,15 --> 00:12:19,68
所以這個第一個封包跟第二個封包

253
00:12:19,68 --> 00:12:23,98
就可能第一個封包就會比較晚才到啊

254
00:12:23,98 --> 00:12:28,48
第二個封包比較早一點到 就是先送就後到

255
00:12:28,48 --> 00:12:30,81
或者後到 後送的先到

256
00:12:30,81 --> 00:12:32,71
所以我們封包本身

257
00:12:32,71 --> 00:12:35,71
會有這個out of order的這個現象

258
00:12:35,71 --> 00:12:38,91
最後一個就是說 可能還有第三者

259
00:12:38,91 --> 00:12:41,65
我們叫做所謂的eavesdrop

260
00:12:41,65 --> 00:12:44,31
第三者的所謂的竄改

261
00:12:44,31 --> 00:12:49,60
封包還有可能被竄改 就是因為我們提到

262
00:12:49,61 --> 00:12:53,95
在網路上面的封包 都是用store and forward

263
00:12:53,95 --> 00:12:57,55
就是先收起來 router都是先收起來

264
00:12:57,55 --> 00:13:00,40
然後査表 然後再轉出去

265
00:13:00,41 --> 00:13:02,61
那既然是先收起來了

266
00:13:02,61 --> 00:13:06,45
所以這個封包就存在我的記憶體裡面

267
00:13:06,45 --> 00:13:11,15
任何資料存在記憶體 你就有可能可以把它竄改

268
00:13:11,15 --> 00:13:14,25
那當然如果你的資料被改掉

269
00:13:14,25 --> 00:13:16,68
那你有沒有辦法把他偵測出來

270
00:13:16,68 --> 00:13:19,95
這個就牽涉到前面 像跟類似這個一樣

271
00:13:19,95 --> 00:13:22,31
就是說 那如果你的資料是錯誤的

272
00:13:22,31 --> 00:13:24,80
你有沒有辦法把它找出來

273
00:13:24,81 --> 00:13:26,75
所以比較好的通訊就是說

274
00:13:26,75 --> 00:13:29,55
如果你的資料被竄改過 你知道

275
00:13:29,55 --> 00:13:31,50
所以這個封包你絕對不要

276
00:13:31,51 --> 00:13:33,28
因為他被竄改過了

277
00:13:33,28 --> 00:13:36,58
但是如果說 當時 當初設計的時候呢

278
00:13:36,58 --> 00:13:38,35
就沒有設計得這麼好

279
00:13:38,35 --> 00:13:41,68
所以資料如果被人家惡意竄改

280
00:13:41,68 --> 00:13:44,58
你可能不知道 那這個就很麻煩了

281
00:13:44,58 --> 00:13:47,31
就是說 網路上面一切存在說

282
00:13:47,31 --> 00:13:48,58
可能會有第三者

283
00:13:48,58 --> 00:13:52,64
藏在這個網路裡面 他隨時找機會

284
00:13:52,65 --> 00:13:54,91
第一個竄改你的封包

285
00:13:54,91 --> 00:13:58,98
第二個可能會譬如說竊聽你的封包

286
00:13:58,98 --> 00:14:02,7
因為他在上面 網路繞來繞去

287
00:14:02,8 --> 00:14:03,85
封包被繞來繞去呢

288
00:14:03,85 --> 00:14:10,18
的確 他是很有機會在那邊靜靜地收封包啦

289
00:14:10,18 --> 00:14:12,48
最簡單就是像我們無線網路

290
00:14:12,48 --> 00:14:14,78
通常你只要把筆電一打開

291
00:14:14,78 --> 00:14:16,11
因為他是無線通訊嘛

292
00:14:16,11 --> 00:14:18,45
那上面天上封包這樣子飛來飛去

293
00:14:18,45 --> 00:14:20,55
一大堆 你直接把天線一打開

294
00:14:20,55 --> 00:14:21,98
封包就一直跑進來

295
00:14:21,98 --> 00:14:24,11
那你就看看說 你收進來之後

296
00:14:24,11 --> 00:14:26,28
你有沒有能力把他解讀嘛

297
00:14:26,28 --> 00:14:28,65
就是裡面有很多帳號密碼都在裡面

298
00:14:28,65 --> 00:14:30,88
甚至credit card的number都在裡面

299
00:14:30,88 --> 00:14:32,68
只要你有辦法解讀

300
00:14:32,68 --> 00:14:34,98
你就可以把他整個竊取出來

301
00:14:34,98 --> 00:14:38,68
所以重要的資訊在網路上面傳輸的時候呢

302
00:14:38,68 --> 00:14:41,50
最好都 我們講最好都是要加密

303
00:14:41,51 --> 00:14:46,61
你加密之後至少別人拿得到 那至少看不懂

304
00:14:46,61 --> 00:14:48,18
因為它解不出來

305
00:14:48,18 --> 00:14:49,81
那如果說沒有加密的話

306
00:14:49,81 --> 00:14:52,65
相對的就相當的危險

307
00:14:52,65 --> 00:14:54,65



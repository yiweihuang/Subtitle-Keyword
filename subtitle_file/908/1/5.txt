1
00:00:09,1 --> 00:00:12,14
我們來介紹所謂的network的architecture

2
00:00:12,15 --> 00:00:14,21
就是網路的這個整個結構

3
00:00:14,21 --> 00:00:17,1
那現代的這種網路呢

4
00:00:17,1 --> 00:00:20,8
為了在將來實作上更方便

5
00:00:20,8 --> 00:00:22,61
所以我們通常都把他分成所謂的

6
00:00:22,61 --> 00:00:24,65
layer的所謂的structure

7
00:00:24,65 --> 00:00:27,18
就是說我們把它分層 分成一層一層

8
00:00:27,18 --> 00:00:32,000
那我們說 在ISO 就是國際標準組織裡面

9
00:00:32,000 --> 00:00:36,4
他有一個這個model是所謂的分成七層啦

10
00:00:36,5 --> 00:00:37,11
所謂seven layer

11
00:00:37,11 --> 00:00:38,68
那從最下面的所謂的

12
00:00:38,68 --> 00:00:40,25
physical layer到data link layer

13
00:00:40,25 --> 00:00:43,38
到network layer到transportation layer等等

14
00:00:43,38 --> 00:00:46,87
那我們這裡呢先用一個概念性的介紹說

15
00:00:46,88 --> 00:00:48,71
什麼叫做一個layer的

16
00:00:48,71 --> 00:00:51,80
所謂的分層式的網路的系統

17
00:00:51,81 --> 00:00:54,71
像這個例子我們就是說 我們假設呢

18
00:00:54,71 --> 00:00:58,58
把他簡單的 比較粗糙的把他分成四層

19
00:00:58,58 --> 00:01:01,95
最下面這一層 我們就是說所謂的hardware

20
00:01:01,95 --> 00:01:03,48
就是硬體層

21
00:01:03,48 --> 00:01:06,35
什麼是硬體層呢 就是網路設備

22
00:01:06,35 --> 00:01:08,51
或者那個連線的設備

23
00:01:08,51 --> 00:01:12,95
有link啦 有網卡啦 然後有路由器呀等等

24
00:01:12,95 --> 00:01:16,18
所謂下面整個網路 都把他簡化

25
00:01:16,18 --> 00:01:19,5
到一個所謂的hardware的一個layer

26
00:01:19,5 --> 00:01:23,54
這舉個例子 然後接下來就是說

27
00:01:23,55 --> 00:01:27,1
那我們上面一層叫做host to host connectivity

28
00:01:27,1 --> 00:01:29,81
因為我們的網路的目的

29
00:01:29,81 --> 00:01:35,15
就是要讓兩端的這個主機能夠連接嘛

30
00:01:35,15 --> 00:01:38,31
所以我們可以上一層 就可以想上層說

31
00:01:38,31 --> 00:01:40,98
那我有兩個主機要連結

32
00:01:40,98 --> 00:01:44,21
兩個主機他們要連接起來做通訊

33
00:01:44,21 --> 00:01:48,1
我們所以叫做host to host的connectivity

34
00:01:48,1 --> 00:01:51,38
就是兩台主機之間讓他可以通訊

35
00:01:51,38 --> 00:01:53,85
那我們主機上面呢

36
00:01:53,85 --> 00:01:56,65
通常又同時會run很多應用

37
00:01:56,65 --> 00:01:59,88
那這個叫做process to process的channel

38
00:01:59,88 --> 00:02:04,20
譬如說 我上面可能會有不同的應用

39
00:02:04,21 --> 00:02:05,88
那每一個應用呢

40
00:02:05,88 --> 00:02:08,78
可能會建好幾個所謂的connection

41
00:02:08,78 --> 00:02:11,48
變成process跟process之間的通訊

42
00:02:11,48 --> 00:02:12,68
然後最上面呢

43
00:02:12,68 --> 00:02:14,75
才是所謂的application的program

44
00:02:14,75 --> 00:02:19,000
就是說我們可以簡單的分層的概念是這樣子啦

45
00:02:19,1 --> 00:02:21,51
那我們接下來就來看說

46
00:02:21,51 --> 00:02:24,5
在這種分層的概念裡面呢

47
00:02:24,5 --> 00:02:27,15
有一個很重要的這個元素呢

48
00:02:27,15 --> 00:02:30,30
或者一個很重要的機制 就叫做protocol

49
00:02:30,31 --> 00:02:35,11
我們叫做所謂的協議 或者叫做通訊的協定

50
00:02:35,11 --> 00:02:38,81
那這個protocol是為什麼需要這樣的東西呢

51
00:02:38,81 --> 00:02:41,000
因為我們網路

52
00:02:41,1 --> 00:02:46,85
是把很多不同的主機或者不同的設備

53
00:02:46,85 --> 00:02:48,91
網路設備 把他連結起來

54
00:02:48,91 --> 00:02:52,61
那我的資料要送給對方的時候

55
00:02:52,61 --> 00:02:55,15
對方他怎麼看的懂

56
00:02:55,15 --> 00:02:58,95
就是說我們要讓這個主機跟主機之間

57
00:02:58,95 --> 00:03:00,65
要能夠溝通

58
00:03:00,65 --> 00:03:02,88
我們說溝通就是把封包丟給對方

59
00:03:02,88 --> 00:03:05,81
那你封包丟給對方為什麼對方看的懂

60
00:03:05,81 --> 00:03:10,45
所以我們中間這個封包的格式啊 就要一致

61
00:03:10,45 --> 00:03:12,97
還有就是說 不只是格式一致

62
00:03:12,98 --> 00:03:16,15
而是說那我們這個通訊的流程啊

63
00:03:16,15 --> 00:03:18,75
譬如說你第一個封包應該是什麼封包

64
00:03:18,75 --> 00:03:20,60
那我應該回你什麼封包

65
00:03:20,61 --> 00:03:22,25
那你看到我回的封包

66
00:03:22,25 --> 00:03:24,15
你應該再給我什麼封包

67
00:03:24,15 --> 00:03:27,65
就是他們這個流程 那也要對啊

68
00:03:27,65 --> 00:03:31,81
所以我們一定要制定 所謂的protocol

69
00:03:31,81 --> 00:03:36,28
protocol就是雙方通訊的協議啦

70
00:03:36,28 --> 00:03:38,41
就是大家遵守這個協議的話

71
00:03:38,41 --> 00:03:41,95
我可以跟妳通訊 如果你沒有遵守這個協議

72
00:03:41,95 --> 00:03:44,25
我送給你的資料你可能就看不懂

73
00:03:44,25 --> 00:03:45,51
或者你會解讀錯誤

74
00:03:45,51 --> 00:03:48,88
所以我們說什麼叫做protocol呢

75
00:03:48,88 --> 00:03:51,35
protocol本身就是定義

76
00:03:51,35 --> 00:03:54,91
我們說他define interface 介面

77
00:03:54,91 --> 00:03:58,48
介面就是因為我們有單元

78
00:03:58,48 --> 00:04:00,41
我們或者叫object或者entity

79
00:04:00,41 --> 00:04:01,97
我們要溝通

80
00:04:01,98 --> 00:04:03,71
譬如說我的主機跟你的主機

81
00:04:03,71 --> 00:04:06,97
我的程式跟你的程式 就是雙方要溝通

82
00:04:06,98 --> 00:04:11,35
那一個protocol本身除了電腦跟電腦之間

83
00:04:11,35 --> 00:04:14,21
或者電腦跟設備 或者設備跟設備

84
00:04:14,21 --> 00:04:16,41
除了這種橫向的

85
00:04:16,41 --> 00:04:19,58
我們叫做peer to peer之外 他還有上下

86
00:04:19,58 --> 00:04:24,25
上下就是因為我們剛剛說 我們把網路的結構

87
00:04:24,25 --> 00:04:27,1
尤其是軟體結構上面 分成好幾層

88
00:04:27,1 --> 00:04:30,65
那這個分個好幾層有一個很重要的概念就是說

89
00:04:30,65 --> 00:04:32,1
他每一層

90
00:04:32,1 --> 00:04:34,54
這個protocol在設計的時候呢

91
00:04:34,55 --> 00:04:38,28
他會用下一層所提供的服務

92
00:04:38,28 --> 00:04:41,21
就是下一層提供我什麼樣的功能

93
00:04:41,21 --> 00:04:44,15
那我依據下一層所提出的功能

94
00:04:44,15 --> 00:04:46,78
然後加點東西 加值啦

95
00:04:46,78 --> 00:04:49,8
我提供上一層的這個服務

96
00:04:49,8 --> 00:04:51,5
也就是說我們一般的protocol呢

97
00:04:51,5 --> 00:04:55,38
分兩個 一個就是說 怎麼跟peer system

98
00:04:55,38 --> 00:04:58,35
就是跟對方溝通的時候

99
00:04:58,35 --> 00:05:00,45
這個部分 一個就是說

100
00:05:00,45 --> 00:05:03,91
那我在相同的主機上面

101
00:05:03,91 --> 00:05:05,58
或者相同的系統上面

102
00:05:05,58 --> 00:05:09,87
我上下層的溝通 所以一個是所謂的縱向啦

103
00:05:09,88 --> 00:05:11,28
上下層的protocol

104
00:05:11,28 --> 00:05:14,25
或者不同layer之間的溝通

105
00:05:14,25 --> 00:05:16,78
一個是所謂的橫向

106
00:05:16,78 --> 00:05:20,20
就是說我跟不同的電腦之間 我怎麼溝通

107
00:05:20,21 --> 00:05:23,78
所以protocol呢 是整個網路結構裡面

108
00:05:23,78 --> 00:05:26,18
我們叫 說 他是一個building block

109
00:05:26,18 --> 00:05:29,68
他是最核心的 所謂的方塊

110
00:05:29,68 --> 00:05:31,18
就是類似一個積木啦

111
00:05:31,18 --> 00:05:34,5
就是說 我們的network的architecture呢

112
00:05:34,5 --> 00:05:37,85
是從各式各樣的protocol

113
00:05:37,85 --> 00:05:42,68
一個一個把它疊起來 把它組織起來的意思

114
00:05:42,68 --> 00:05:44,87
就是說我們是有很多protocol

115
00:05:44,88 --> 00:05:47,8
譬如說我們IP就是一個protocol

116
00:05:47,8 --> 00:05:51,8
TCP是一個protocol UDP是一個protocol

117
00:05:51,8 --> 00:05:55,27
所以我們等下會介紹 很多不同的protocol

118
00:05:55,28 --> 00:05:57,51
所以間單的講就是說

119
00:05:57,51 --> 00:05:59,91
每一個protocol的object呢

120
00:05:59,91 --> 00:06:03,18
我們講 他有兩個interface

121
00:06:03,18 --> 00:06:07,51
一個protocol有兩個interface就是說

122
00:06:07,51 --> 00:06:11,75
第一個peer to peer 就是說對peer跟peer之間

123
00:06:11,75 --> 00:06:13,70
就對方 電腦跟電腦

124
00:06:13,71 --> 00:06:16,68
或電腦跟設備 設備跟設備等等

125
00:06:16,68 --> 00:06:22,34
他們要互相交換message 剛提到 譬如說

126
00:06:22,35 --> 00:06:27,11
假設我們講TCP 不是兩邊要建連線嗎

127
00:06:27,11 --> 00:06:29,95
建連線就要先送一個叫做SYN

128
00:06:29,95 --> 00:06:32,65
有一個ACK SYN-ACK 類似像這樣

129
00:06:32,65 --> 00:06:35,1
他們要來回送資料啊

130
00:06:35,1 --> 00:06:37,30
這個資料本身就叫做message

131
00:06:37,31 --> 00:06:40,85
啊這個message的格式是什麼 順序是什麼

132
00:06:40,85 --> 00:06:41,80
這個都要定

133
00:06:41,81 --> 00:06:45,41
這個是所謂的橫向之間的所謂的介面

134
00:06:45,41 --> 00:06:47,35
那縱向的界面是什麼

135
00:06:47,35 --> 00:06:50,45
縱向就是說 我們講 這個叫service的interface

136
00:06:51,91 --> 00:06:53,51
service這邊就是說

137
00:06:53,51 --> 00:06:56,21
那妳TCP提供什麼服務給上一層

138
00:06:56,21 --> 00:07:00,41
我們說TCP提供的是可靠的傳輸服務

139
00:07:00,41 --> 00:07:02,81
就是說你把資料丟給TCP

140
00:07:02,81 --> 00:07:07,38
TCP就會負責可靠的送給對方那個TCP

141
00:07:07,38 --> 00:07:09,88
就是他會可靠的送給對方

142
00:07:09,88 --> 00:07:13,88
可是我們說 TCP下面是根據這個IP啊

143
00:07:13,88 --> 00:07:15,31
那我們也說啊

144
00:07:15,31 --> 00:07:18,91
這個IP就是internet裡面最重要的protocol

145
00:07:18,91 --> 00:07:20,88
而 他是不可靠的

146
00:07:20,88 --> 00:07:25,5
就IP是不可靠的 那妳TCP是可靠的

147
00:07:25,5 --> 00:07:27,21
也就是說TCP本身

148
00:07:27,21 --> 00:07:31,61
他是建在一個不可靠的這個服務上

149
00:07:31,61 --> 00:07:35,5
然後他要提供可靠的服務

150
00:07:35,5 --> 00:07:39,10
所以TCP其實是非常任重道遠

151
00:07:39,11 --> 00:07:42,15
也就是說 他非常非常的嚴謹

152
00:07:42,15 --> 00:07:44,31
也就是說他也非常厲害

153
00:07:44,31 --> 00:07:48,51
因為他必須在一個不可靠的環境之下

154
00:07:48,51 --> 00:07:50,48
提供可靠的服務

155
00:07:50,48 --> 00:07:53,18
所以我們後面會介紹 TCP怎麼做

156
00:07:53,18 --> 00:07:57,75
所以TCP/IP是現在網路裡面最重要的技術

157
00:07:57,75 --> 00:08:00,10
也就是說TCP他到底

158
00:08:00,11 --> 00:08:03,28
怎麼樣在一個不可靠的環境之下

159
00:08:03,28 --> 00:08:07,8
提供可靠的傳送 可靠的服務

160
00:08:07,8 --> 00:08:09,25
也就是說我們整個protocol來講

161
00:08:09,25 --> 00:08:11,85
簡單的來說 protocol的介面

162
00:08:11,85 --> 00:08:13,31
像我們這個圖裡面呢

163
00:08:13,31 --> 00:08:17,8
我們跟各位介紹說 我們這個藍色的

164
00:08:17,8 --> 00:08:18,75
這就是我們的protocol

165
00:08:18,75 --> 00:08:22,55
這是protocol 那他可能是譬如說TCP

166
00:08:22,55 --> 00:08:24,28
可能是IP 可能是UDP

167
00:08:24,28 --> 00:08:25,88
任何一個protocol都可以

168
00:08:25,88 --> 00:08:29,38
只是說這個protocol在定義上

169
00:08:29,38 --> 00:08:33,10
他有一個這個我們叫做peer to peer

170
00:08:33,10 --> 00:08:37,58
等於說是兩個protocol的entity之間的溝通啦

171
00:08:37,58 --> 00:08:38,95
我們講橫向溝通

172
00:08:38,95 --> 00:08:40,65
這裡面牽涉到就是說

173
00:08:40,65 --> 00:08:43,35
那你丟的封包的內容

174
00:08:43,34 --> 00:08:45,40
譬如說封包的格式

175
00:08:45,41 --> 00:08:47,28
最主要是格式啦 要有一個format

176
00:08:47,28 --> 00:08:49,51
譬如說第一個byte是什麼意思

177
00:08:49,51 --> 00:08:50,58
第二個byte是什麼意思

178
00:08:50,58 --> 00:08:51,98
第三個byte是什麼意思

179
00:08:51,98 --> 00:08:54,60
你丟過來的時候封包的格式

180
00:08:54,61 --> 00:08:56,88
一定要大家遵循

181
00:08:56,88 --> 00:08:59,60
所以這個是第一個是格式

182
00:08:59,61 --> 00:09:01,48
第二個是他的流程

183
00:09:01,48 --> 00:09:04,18
譬如說你應該先送什麼封包

184
00:09:04,18 --> 00:09:05,28
再送什麼封包

185
00:09:05,28 --> 00:09:09,1
再送什麼封包 就是那個流程跟那個格式

186
00:09:09,1 --> 00:09:11,31
這個是橫向的這個規格

187
00:09:11,31 --> 00:09:13,1
那我們說所謂的縱向

188
00:09:13,1 --> 00:09:14,84
就是每一個protocol呢

189
00:09:14,85 --> 00:09:19,8
他都會提供所謂的service給上一層用

190
00:09:19,8 --> 00:09:23,51
所以我們特別強調 在這個layer的結構之下

191
00:09:23,51 --> 00:09:25,5
每一個protocol

192
00:09:25,5 --> 00:09:28,25
他都是利用下層所提供的服務

193
00:09:28,25 --> 00:09:32,55
然後經過加值 或經過處理之後

194
00:09:32,55 --> 00:09:34,74
 提供服務給上層

195
00:09:34,75 --> 00:09:38,11
那下層的服務跟上層的服務

196
00:09:38,11 --> 00:09:39,58
當然可以不一樣

197
00:09:39,58 --> 00:09:41,78
depends on他加了什麼值

198
00:09:41,78 --> 00:09:43,25
他做了什麼功夫

199
00:09:43,25 --> 00:09:45,35
所以每一個protocol我們說

200
00:09:45,35 --> 00:09:48,1
第一個 怎麼樣橫向的聯繫

201
00:09:48,1 --> 00:09:50,38
第二個 怎麼縱向的提供服務

202
00:09:50,38 --> 00:09:52,45
所以這就是定義一個protocol

203
00:09:52,45 --> 00:09:54,48
就是說你這個protocol提供什麼服務

204
00:09:54,48 --> 00:09:56,85
像我們剛剛講TCP提供什麼服務

205
00:09:56,85 --> 00:09:59,71
TCP提供可靠傳輸服務

206
00:09:59,71 --> 00:10:02,91
那UDP提供什麼服務

207
00:10:02,91 --> 00:10:05,81
UDP提供不可靠的傳輸服務

208
00:10:05,81 --> 00:10:07,88
所以我們看 TCP UDP

209
00:10:07,88 --> 00:10:09,58
他就是不同的protocol啊

210
00:10:09,58 --> 00:10:11,28
他的服務就不一樣

211
00:10:11,28 --> 00:10:13,58
那他們下面呢都是base on IP

212
00:10:13,58 --> 00:10:16,85
所以你看 UDP他就簡單多啦

213
00:10:16,85 --> 00:10:18,68
因為IP是不可靠

214
00:10:18,68 --> 00:10:22,95
UDP他也不可靠 所以UDP的任務就是說

215
00:10:22,95 --> 00:10:26,1
我在不可靠的環境 提供不可靠的服務

216
00:10:26,1 --> 00:10:28,1
那他其實什麼事都不用做

217
00:10:28,1 --> 00:10:30,7
他只要把封包丟下去就好了

218
00:10:30,8 --> 00:10:32,5
UDP就是這麼簡單

219
00:10:32,5 --> 00:10:34,85
我們說TCP就困難啦

220
00:10:34,85 --> 00:10:37,51
因為TCP是要在不可靠的環境

221
00:10:37,51 --> 00:10:38,58
提供可靠的服務

222
00:10:38,58 --> 00:10:41,68
所以TCP就複雜 而且精彩的多了

223
00:10:41,68 --> 00:10:44,8
我們再來看 所有的protocol裡面

224
00:10:44,8 --> 00:10:46,11
一定要有一個所謂的spec

225
00:10:46,11 --> 00:10:49,38
每一個protocol呢 我們說都有所謂的規格

226
00:10:49,38 --> 00:10:53,85
規格的意思就是說 如果大家要去實作的時候

227
00:10:53,85 --> 00:10:56,18
那你依據什麼來做

228
00:10:56,18 --> 00:10:59,48
這個不能用嘴巴講啊 一定要文字把它寫下來

229
00:10:59,48 --> 00:11:00,91
剛提到 譬如說

230
00:11:00,91 --> 00:11:06,28
我TCP要溝通要先建連線 這個就是規格

231
00:11:06,28 --> 00:11:10,75
那連線怎麼建 建連線的時候那個格式是什麼

232
00:11:10,75 --> 00:11:12,91
我們叫做所謂message的format

233
00:11:12,91 --> 00:11:14,75
這個都要寫下來

234
00:11:14,75 --> 00:11:16,35
然後我們一般還有一個叫做

235
00:11:16,35 --> 00:11:18,11
state transition的diagram

236
00:11:18,11 --> 00:11:20,45
 就是他的整個類似flow chart

237
00:11:20,45 --> 00:11:23,17
流程圖啦 或者這個所謂的狀態圖

238
00:11:23,18 --> 00:11:25,8
這個都是在規格裡面

239
00:11:25,8 --> 00:11:31,5
那你規格定下來 大家才有依循再去寫程式

240
00:11:31,5 --> 00:11:33,85
那我們說同樣的規格

241
00:11:33,85 --> 00:11:37,88
不同的人寫出來的東西也不見得功能是一樣的喔

242
00:11:37,88 --> 00:11:41,74
就規格寫在那裡 每個人解讀規格不一樣

243
00:11:41,75 --> 00:11:45,11
同樣一個文章 貼在那裡 每個人看文章

244
00:11:45,11 --> 00:11:46,70
他認知不一定一樣

245
00:11:46,71 --> 00:11:51,11
所以規格雖然訂得很清楚 不同的公司

246
00:11:51,11 --> 00:11:55,28
不同的工程師把它寫出來的時候不見得一樣

247
00:11:55,28 --> 00:11:59,71
所以我們說 如果他們寫出來的軟體

248
00:11:59,71 --> 00:12:02,61
可以互相的 真的可以溝通

249
00:12:02,61 --> 00:12:03,88
這個很好

250
00:12:03,88 --> 00:12:10,38
我們一般叫做interoperable 就是可以互通

251
00:12:10,38 --> 00:12:14,88
互通 就是說我們在全世界呢 也有很多單位

252
00:12:14,88 --> 00:12:18,7
專門在做這種所謂的互通測試

253
00:12:18,8 --> 00:12:20,21
也就是說我們現在有一個規格

254
00:12:20,21 --> 00:12:22,17
然後大家很多公司

255
00:12:22,18 --> 00:12:25,38
全世界那麼多公司 都去實作了這個規格

256
00:12:25,38 --> 00:12:30,95
我們大家到一個實驗室來 一般叫做互通測試

257
00:12:30,95 --> 00:12:33,85
就我跟你接會不會通 你跟我接會不會通

258
00:12:33,85 --> 00:12:35,25
大家來接接看

259
00:12:35,25 --> 00:12:40,18
都可以通 你這個軟體才算是成熟

260
00:12:40,18 --> 00:12:45,18
就同樣的規格 每個公司 每個工程師

261
00:12:45,18 --> 00:12:48,21
他把它做出來 程式寫出來的時候

262
00:12:48,21 --> 00:12:51,78
可能都不一樣 譬如說有些地方沒有注意到

263
00:12:51,78 --> 00:12:54,88
有些地方解釋不相同

264
00:12:54,88 --> 00:12:58,1
寫出來的code 寫出來的程式也不見得都一樣

265
00:12:58,1 --> 00:13:02,38
我們就說 如果有兩個或兩個以上的protocol呢

266
00:13:02,38 --> 00:13:06,15
他在實作這個spec的時候

267
00:13:06,15 --> 00:13:10,48
我們說非常的正確 accurate

268
00:13:10,48 --> 00:13:15,31
他非常非常的正確 非常忠實的把它做出來

269
00:13:15,31 --> 00:13:20,37
他應該可以互相通 叫做相容的意思

270
00:13:20,38 --> 00:13:22,98
我們叫做interoperable

271
00:13:22,98 --> 00:13:26,50
一般這種測試叫做interobility

272
00:13:26,51 --> 00:13:30,41
就是互相運作呢 可不可以互相溝通

273
00:13:30,41 --> 00:13:34,68
那我們說 這個protocol是這麼重要啊

274
00:13:34,68 --> 00:13:38,58
那我們的網路的結構又有這麼多的protocol

275
00:13:38,58 --> 00:13:43,38
剛剛提到什麼TCP UDP IP 甚至HTTP

276
00:13:43,38 --> 00:13:45,65
然後DNS domain name server

277
00:13:45,65 --> 00:13:50,71
加加起來幾百種 那這些標準誰來訂

278
00:13:50,71 --> 00:13:53,71
如果沒有一個組織來訂標準的話

279
00:13:53,71 --> 00:13:56,48
那這個根本就沒有辦法通

280
00:13:56,48 --> 00:14:00,21
還好 在internet上面標準制定的單位

281
00:14:00,21 --> 00:14:02,31
我們叫做IETF

282
00:14:02,31 --> 00:14:06,11
他是叫做internet engineering task force

283
00:14:06,11 --> 00:14:08,25
類似一個任務的小組啦

284
00:14:08,25 --> 00:14:09,71
那他的任務呢

285
00:14:09,71 --> 00:14:14,38
就是來制定internet上面相關的protocol

286
00:14:14,38 --> 00:14:16,28
那我們接下來就來看

287
00:14:16,28 --> 00:14:19,41
那這個protocol的結構是什麼呢

288
00:14:19,41 --> 00:14:24,8
我們假設從IP這層來看的話 還是比較簡單

289
00:14:24,8 --> 00:14:27,11
因為IP我們現在都把它定位在

290
00:14:27,11 --> 00:14:29,35
所謂的network layer 第三層

291
00:14:29,35 --> 00:14:34,21
第三層這裡呢 我們現在呢 假設是IP啦

292
00:14:34,21 --> 00:14:38,45
所以我們這裡 相當於這個IP呢就是第三層的

293
00:14:38,45 --> 00:14:42,80
他們中間就是一個protocol 叫做IP

294
00:14:42,81 --> 00:14:46,11
那IP上面的就是第四層

295
00:14:46,11 --> 00:14:49,38
第四層我們剛也提到 我這裡有UDP喔

296
00:14:49,38 --> 00:14:52,35
喔對不起我有TCP

297
00:14:52,35 --> 00:14:55,48
那TCP是提供什麼呢？可靠的服務

298
00:14:55,48 --> 00:15:01,95
那我有UDP UDP呢是提供不可靠的服務

299
00:15:01,95 --> 00:15:07,18
那我什麼東西需要可靠的服務呢 譬如說FTP

300
00:15:07,18 --> 00:15:10,41
我們知道FTP是什麼呢？

301
00:15:10,41 --> 00:15:14,71
FTP是叫做file transfer protocol 傳檔案

302
00:15:14,71 --> 00:15:16,95
我們知道傳檔案一定要可靠

303
00:15:16,95 --> 00:15:20,5
檔案不能傳到後來說錯掉了

304
00:15:20,5 --> 00:15:23,25
那這還得了 檔案傳輸一定要很可靠

305
00:15:23,25 --> 00:15:26,25
所以FTP呢他就用TCP

306
00:15:26,25 --> 00:15:29,45
因為TCP提供可靠的傳輸

307
00:15:29,45 --> 00:15:35,48
還有HTTP我們說 到網頁上瀏覽HTTP

308
00:15:35,48 --> 00:15:36,85
你看網頁的時候

309
00:15:36,85 --> 00:15:39,15
不能說你今天看的內容跟明天看的內容

310
00:15:39,15 --> 00:15:43,40
明明內容一樣可是看到的東西不一樣 這樣不行

311
00:15:43,41 --> 00:15:45,18
或者說我看到的東西是錯的

312
00:15:45,18 --> 00:15:49,48
譬如說數字是錯的 圖片是錯的 這都不對

313
00:15:49,48 --> 00:15:53,15
所以在網頁瀏覽的時候呢

314
00:15:53,15 --> 00:15:56,11
他也要求這個資料的正確性

315
00:15:56,11 --> 00:15:58,35
所以他要建連線

316
00:15:58,35 --> 00:16:00,35
而且比較長時間的通訊

317
00:16:00,35 --> 00:16:03,7
通常都會用所謂的TCP

318
00:16:03,8 --> 00:16:07,11
另外一種服務呢 可能不需要長時間的建連線

319
00:16:07,11 --> 00:16:09,40
就是所謂的類似像domain name server

320
00:16:09,41 --> 00:16:11,75
domain name service就是說

321
00:16:11,75 --> 00:16:14,5
一般我們在上網的時候

322
00:16:14,5 --> 00:16:16,95
通常都是記得那個URL

323
00:16:16,95 --> 00:16:19,45
譬如說www.google.com

324
00:16:19,45 --> 00:16:23,21
你記得google嘛 你應該不記得google的IP

325
00:16:23,21 --> 00:16:26,1
因為google他的IP也可能動態會變

326
00:16:26,1 --> 00:16:29,50
所以當你打一個所謂的網址的時候呢

327
00:16:29,51 --> 00:16:34,68
那最後要連線一定要靠IP啊 所以網址轉IP

328
00:16:34,68 --> 00:16:37,38
這個服務叫做domain name service

329
00:16:37,38 --> 00:16:38,88
就是所謂的DNS

330
00:16:38,88 --> 00:16:41,88
那DNS本身通常都是査詢

331
00:16:41,88 --> 00:16:43,70
你只是把domain name丟給他

332
00:16:43,71 --> 00:16:46,31
然後他問完IP之後就回你

333
00:16:46,31 --> 00:16:50,48
所以他是一個一問一個一答 短時間快速結束

334
00:16:50,48 --> 00:16:52,25
所以他就不需要建連線

335
00:16:52,25 --> 00:16:53,81
因為連線就要三個封包了

336
00:16:53,81 --> 00:16:56,75
我只要一問一答 我兩個封包自己就做完了

337
00:16:56,75 --> 00:17:00,1
建連線然後再送過去再回來 根本就多此一舉

338
00:17:00,1 --> 00:17:05,21
所以很多服務呢 他是快速短暫 不用長時間

339
00:17:05,21 --> 00:17:07,50
我們就用這種所謂的UDP

340
00:17:07,50 --> 00:17:09,24
那我們說UDP不可靠啊

341
00:17:09,25 --> 00:17:11,41
那你送過去問萬一沒有回來怎麼辦

342
00:17:11,40 --> 00:17:14,8
那你就問兩次嘛 就那麼簡單

343
00:17:14,8 --> 00:17:15,75
就是說 如果這個網路不可靠

344
00:17:15,75 --> 00:17:18,31
你問一次沒有回應 你就問兩次啊

345
00:17:18,31 --> 00:17:21,24
一般如果連續兩次都沒有回應

346
00:17:21,25 --> 00:17:22,48
這種機率也是不大啦

347
00:17:22,48 --> 00:17:25,5
再不行你問三次嘛

348
00:17:25,5 --> 00:17:26,81
那你說問了一百次都沒有回應

349
00:17:26,80 --> 00:17:28,60
那我只能告訴你網路可能斷掉了

350
00:17:28,60 --> 00:17:30,81
網路斷線了 這也沒辦法

351
00:17:30,81 --> 00:17:32,41
網路斷線了誰都沒辦法

352
00:17:32,41 --> 00:17:35,75
所以我們變成看說 我們根據我們的需求

353
00:17:35,75 --> 00:17:39,95
我們就會用不同的這個protocol

354
00:17:39,95 --> 00:17:41,85
不同的服務 剛提到

355
00:17:41,85 --> 00:17:44,91
如果你要做檔案傳輸 FTP

356
00:17:44,91 --> 00:17:46,41
那我們就會走這一條

357
00:17:46,41 --> 00:17:48,11
雖然在這邊繞繞繞 沒關係

358
00:17:48,11 --> 00:17:49,68
繞上來最後到這邊

359
00:17:49,68 --> 00:17:53,85
那我們知道只要進到internet就是不可靠

360
00:17:53,85 --> 00:17:55,11
他可能就會掉

361
00:17:55,11 --> 00:17:58,34
還好我們TCP專門解這樣的問題

362
00:17:58,35 --> 00:18:00,25
就是說萬一你這個封包在這裡面

363
00:18:00,25 --> 00:18:01,71
譬如說有一些損毀

364
00:18:01,71 --> 00:18:04,1
有一些這個被丟棄

365
00:18:04,1 --> 00:18:07,14
有一些不知道繞到哪裡去 任何問題

366
00:18:07,15 --> 00:18:12,78
這個TCP他會跟這個TCP 他們會解決

367
00:18:12,78 --> 00:18:16,98
你掉的他會重送的 不對的他會重送

368
00:18:16,98 --> 00:18:18,91
所以等於說

369
00:18:18,91 --> 00:18:21,84
如果我們畫一條線來代表這個服務的話

370
00:18:21,85 --> 00:18:24,91
我們就這樣畫一條線 就是說

371
00:18:24,91 --> 00:18:29,91
這裏怎麼進 這裏怎麼出

372
00:18:29,91 --> 00:18:33,27
我們畫一條線的時候就可以說

373
00:18:33,28 --> 00:18:34,78
我TCP就保證你

374
00:18:34,78 --> 00:18:36,85
你丟給我什麼 我送給對方就什麼

375
00:18:36,85 --> 00:18:42,11
下面網路怎麼亂怎麼差 那是我TCP的事

376
00:18:42,11 --> 00:18:45,45
我負責 所以TCP就提供這樣的服務

377
00:18:45,45 --> 00:18:48,48
怎麼進怎麼出 那對於上面的應用

378
00:18:48,48 --> 00:18:52,31
像FTP啦HTTP來講 他就覺得很好啊

379
00:18:52,31 --> 00:18:54,44
我丟給TCP就反正責任制嘛

380
00:18:54,45 --> 00:18:55,68
丟給他就全部幫我負責

381
00:18:55,68 --> 00:18:58,78
那下面怎麼樣 就他負責

382
00:18:58,78 --> 00:19:01,88
所以我們這個protocol的結構就是這樣

383
00:19:01,88 --> 00:19:06,81
我們分層 每一層可能會有一個或多個

384
00:19:06,81 --> 00:19:08,44
大部份是複數啦

385
00:19:08,45 --> 00:19:11,55
大部份是多個protocol 然後分層負責

386
00:19:11,55 --> 00:19:15,55
那每一層的服務都是根據下一層的服務

387
00:19:15,55 --> 00:19:18,88
經過加值 然後提供服務給上一層

388
00:19:18,88 --> 00:19:21,34
這個就是我們protocol的架構

389
00:19:21,35 --> 00:19:23,35



1
00:00:09,18 --> 00:00:11,81
好 接下來我們來介紹說 這個網路上面呢

2
00:00:11,81 --> 00:00:15,1
這個資源怎麼做有效的這個共享

3
00:00:15,1 --> 00:00:16,97
就是說resource怎麼做比較

4
00:00:16,97 --> 00:00:19,21
所謂的cost effective的share

5
00:00:19,21 --> 00:00:22,88
那我們首先就來想 那什麼叫做resource

6
00:00:22,88 --> 00:00:26,81
就是在網路上面的資源是什麼？ 譬如說link

7
00:00:26,81 --> 00:00:29,8
網路的這個所謂的連線

8
00:00:29,8 --> 00:00:32,40
這個鏈路就是一個很重要的字 就是這個link

9
00:00:32,40 --> 00:00:36,74
像這個例子裡面 這個link就相當於是這個

10
00:00:36,75 --> 00:00:39,71
就是一個link

11
00:00:39,71 --> 00:00:42,41
這個link可能是有線的 可能是無線的

12
00:00:42,41 --> 00:00:45,74
就是有線或無線都可以 就是一個link本身

13
00:00:45,75 --> 00:00:48,28
他就是因為頻寬是有限的

14
00:00:48,28 --> 00:00:52,25
那我有那麼多的電腦 都要送資料

15
00:00:52,25 --> 00:00:53,95
那都要經過這個link

16
00:00:53,95 --> 00:00:56,80
那我到底要怎麼來用這個link

17
00:00:56,81 --> 00:00:58,81
讓他很有效的意思啦

18
00:00:58,81 --> 00:01:02,31
那node當然也是啦 就像switch啦 router啦

19
00:01:02,31 --> 00:01:04,15
這些都是網路的資源

20
00:01:04,15 --> 00:01:08,5
那我們先來看說 那我們怎麼來share一個link

21
00:01:08,5 --> 00:01:12,61
就是說我們的link呢 怎麼讓大家來用

22
00:01:12,61 --> 00:01:14,58
因為像我們這個例子

23
00:01:14,58 --> 00:01:17,28
我們這邊左邊 有三台電腦

24
00:01:17,28 --> 00:01:19,61
右邊也有三台電腦

25
00:01:19,61 --> 00:01:22,31
那可是我們中間呢 只有一個link

26
00:01:22,31 --> 00:01:28,38
那我們怎麼讓這個link 可以被大家所使用

27
00:01:28,38 --> 00:01:31,35
就是這些不同的電腦呢 在傳輸的時候呢

28
00:01:31,35 --> 00:01:34,78
要共用這個所謂的link

29
00:01:34,78 --> 00:01:37,85
我們看這個資源 怎麼來做

30
00:01:37,85 --> 00:01:39,18
那我們首先看

31
00:01:39,18 --> 00:01:42,61
那什麼叫做所謂的multiplexing

32
00:01:42,61 --> 00:01:45,85
multiplexing呢一般我們叫所謂的多工啦

33
00:01:45,85 --> 00:01:48,54
就是說 像這個例子呢

34
00:01:48,55 --> 00:01:49,91
比較在這個地方發生

35
00:01:49,91 --> 00:01:53,58
像這個交換機 本身他

36
00:01:53,58 --> 00:01:56,25
來自於 他的資料來自於

37
00:01:56,25 --> 00:01:59,41
像我們左邊這三個station 在這個地方

38
00:01:59,41 --> 00:02:02,65
這三個station的資料呢

39
00:02:02,65 --> 00:02:05,30
都會送到這個交換機裡面來

40
00:02:05,31 --> 00:02:09,55
所以這個交換機本身 等於說他的來源有三個

41
00:02:09,55 --> 00:02:12,88
可是他的出口呢 在這個例子裡面只有一個

42
00:02:12,88 --> 00:02:16,25
相當於說 我們這邊有一個要這樣子出去

43
00:02:16,25 --> 00:02:19,11
有一個要這樣子 有一個要這樣子

44
00:02:19,11 --> 00:02:24,55
等於說我的input呢比我的output還多

45
00:02:24,55 --> 00:02:27,88
那我就要做一個 類似叫做mux

46
00:02:27,88 --> 00:02:31,88
就是 那我等下是不是先送第一個

47
00:02:31,88 --> 00:02:34,75
然後再來送第二個 再來送第三個

48
00:02:34,75 --> 00:02:36,84
就是說我怎麼樣傳輸

49
00:02:36,85 --> 00:02:40,8
可以讓這三個station的資料呢

50
00:02:40,8 --> 00:02:42,11
都可以譬如說共用

51
00:02:42,11 --> 00:02:45,67
那這個所謂的multiplexing是指這個意思

52
00:02:45,68 --> 00:02:47,45
就是從多個來源

53
00:02:47,45 --> 00:02:50,95
然後怎麼讓它導到一個共同的出口

54
00:02:50,95 --> 00:02:54,75
倒過來 我們叫做所謂的demultiplexing

55
00:02:54,75 --> 00:02:56,28
就是反方向的意思

56
00:02:56,28 --> 00:03:00,45
像這個地方 那這個右邊這個switch呢

57
00:03:00,45 --> 00:03:02,51
他就在做所謂的demultiplexing

58
00:03:02,51 --> 00:03:06,15
因為他從一個link這個中間這個link

59
00:03:06,15 --> 00:03:07,7
把資料收進來

60
00:03:07,8 --> 00:03:10,91
因為這三個封包都經過這樣一個link嘛

61
00:03:10,91 --> 00:03:13,61
但是他收進來之後 他必須知道說

62
00:03:13,61 --> 00:03:14,98
這個封包是要給誰啊

63
00:03:14,98 --> 00:03:19,58
 所以他在做這個分流的動作 像這樣子的動作

64
00:03:21,28 --> 00:03:24,90
從一個進來 然後把它分散到不同地方去

65
00:03:24,91 --> 00:03:27,28
這個叫做所謂的demultiplexing

66
00:03:27,28 --> 00:03:31,84
那前極 這邊就是做所謂的multiplexing

67
00:03:31,85 --> 00:03:33,91
就是前端這邊做multiplex

68
00:03:33,91 --> 00:03:37,8
那後端這邊就做demultiplexing

69
00:03:37,8 --> 00:03:40,45
好 那利用這種所謂的multiplexing的技術呢

70
00:03:40,45 --> 00:03:43,30
我們就可以讓一個link

71
00:03:43,31 --> 00:03:47,41
同時來乘載多個來源的封包啦

72
00:03:47,41 --> 00:03:49,15
好 那我們接下來就來看

73
00:03:49,15 --> 00:03:53,7
multiplexing的技術呢 有哪一些

74
00:03:53,8 --> 00:03:57,78
那 首先我們看第一個 最常用到的

75
00:03:57,78 --> 00:03:59,55
譬如說叫做所謂的FDM

76
00:03:59,55 --> 00:04:02,75
一般叫做frequency division的multiplexing

77
00:04:02,75 --> 00:04:07,30
就是說我們把這個不管是有線或者無線 這個link

78
00:04:07,31 --> 00:04:08,88
不管有線無線

79
00:04:08,88 --> 00:04:11,25
每一個link呢都有一個所謂的頻寬

80
00:04:11,25 --> 00:04:13,91
或簡稱他的叫做frequency band

81
00:04:13,91 --> 00:04:16,21
也就是他的頻率的這個頻帶

82
00:04:16,21 --> 00:04:20,5
那我們假設譬如說 我們有這個例子有四個user

83
00:04:20,5 --> 00:04:23,94
有四個user要用一個link

84
00:04:23,95 --> 00:04:26,91
可是我們就把這個link上面的頻帶呢

85
00:04:26,91 --> 00:04:31,88
我們把它切成四個 類似四個所謂的frequency

86
00:04:31,88 --> 00:04:35,38
把它切成不同的frequency

87
00:04:35,38 --> 00:04:39,5
譬如說user1用一個frequency

88
00:04:39,5 --> 00:04:41,41
user2用一個frequency

89
00:04:41,41 --> 00:04:43,41
user3一個frequency

90
00:04:43,41 --> 00:04:44,91
user4一個frequency

91
00:04:44,91 --> 00:04:51,58
我們原來把 我們的這個所謂的 頻寬 把它切成

92
00:04:51,58 --> 00:04:55,1
譬如說切成四份 變成叫sub-band

93
00:04:55,1 --> 00:04:57,65
切成四個 然後讓每一個user

94
00:04:57,65 --> 00:05:00,98
等於說各用一個所謂的頻寬

95
00:05:00,98 --> 00:05:03,58
當然每一個頻寬就只有原來的四分之一啦

96
00:05:03,58 --> 00:05:06,65
可是呢 他任何時間都可以用

97
00:05:06,65 --> 00:05:11,81
相當於說我們本來有一個頻寬 裡面有四個頻道

98
00:05:11,81 --> 00:05:14,81
那我讓每一個user呢用一個頻道

99
00:05:14,81 --> 00:05:16,11
可是每一個頻道呢

100
00:05:16,11 --> 00:05:19,31
它的寬度就是只有原來的四分之一

101
00:05:19,31 --> 00:05:21,5
就是他可以送的比較慢

102
00:05:21,5 --> 00:05:23,91
因為速度變成只剩下原來的四分之一

103
00:05:23,91 --> 00:05:25,21
可是他可以一直都在送

104
00:05:25,21 --> 00:05:27,55
等於說他有一個比較慢

105
00:05:27,55 --> 00:05:31,51
但是呢專用的一個頻道的意思

106
00:05:31,51 --> 00:05:34,68
因為我把大頻寬 切成小頻道嘛

107
00:05:34,68 --> 00:05:37,10
那每一個頻道都是他專用

108
00:05:37,11 --> 00:05:38,88
代表他可以長時間的用

109
00:05:38,88 --> 00:05:42,28
那這樣的技術呢 叫做frequency division

110
00:05:42,28 --> 00:05:45,18
因為我們把frequency把它divide

111
00:05:45,18 --> 00:05:47,61
那這個叫做FDM

112
00:05:47,61 --> 00:05:50,15
也就是說這個是一個蠻常用的方法

113
00:05:50,15 --> 00:05:52,38
那這個也是一個multiplexing啊

114
00:05:52,38 --> 00:05:55,95
因為我一樣 就是我這個link上面我有四個

115
00:05:55,95 --> 00:05:57,71
把它切成四個頻道嘛

116
00:05:57,71 --> 00:06:01,8
然後各用一個頻道  每一個頻道比較窄

117
00:06:01,8 --> 00:06:03,61
速度比較慢 但是你隨時可以用

118
00:06:03,61 --> 00:06:07,25
另外一個方式就是說 我們叫做TDM

119
00:06:07,25 --> 00:06:11,41
TDM的意思就是說 我用時間來切割

120
00:06:11,41 --> 00:06:16,41
我們叫time division 用時間切割就是說

121
00:06:16,41 --> 00:06:19,35
好 那我們變成像這樣切

122
00:06:19,35 --> 00:06:22,85
我們把時間切成一個slot

123
00:06:22,85 --> 00:06:25,8
一個時段一個時段這樣子

124
00:06:25,8 --> 00:06:29,41
那我們說不同的user用不同的時段

125
00:06:29,41 --> 00:06:33,81
可是呢 每一個時段呢用所有的頻寬

126
00:06:33,81 --> 00:06:37,75
所以他有點像是我們叫做所謂的

127
00:06:37,75 --> 00:06:40,70
所謂的垂直的切割啦

128
00:06:40,71 --> 00:06:43,11
剛剛是有點像水平切割

129
00:06:43,11 --> 00:06:46,71
現在像變成說 你看我這個user1藍色的

130
00:06:46,71 --> 00:06:49,68
他只能在這些時間送

131
00:06:49,68 --> 00:06:53,65
那所以他送的時間呢

132
00:06:53,65 --> 00:06:57,91
就不是隨時都在送 因為他時間有切割了

133
00:06:57,91 --> 00:07:01,71
不同的時段 他只能在譬如說時段一

134
00:07:01,71 --> 00:07:03,88
然後跳過三個

135
00:07:03,88 --> 00:07:08,55
時段五 再跳過三個 變成時段九

136
00:07:08,55 --> 00:07:11,75
變成他在不同的時段跳 可是我們注意到

137
00:07:11,75 --> 00:07:16,31
他在用的時候呢 是用整個link的頻寬

138
00:07:16,31 --> 00:07:20,38
你看他的頻寬的值是這麼高 這麼高

139
00:07:20,38 --> 00:07:25,68
只是用的時間軸是有跳著用 可是每一次用呢

140
00:07:25,68 --> 00:07:28,5
 是用比較 全部的頻寬

141
00:07:28,5 --> 00:07:31,51
那FDM呢是說 你隨時都可以在用

142
00:07:31,51 --> 00:07:35,27
可是呢你用的頻寬 是原來的譬如說四分之一

143
00:07:35,28 --> 00:07:39,35
所以一個是長時間用窄頻寬

144
00:07:39,35 --> 00:07:43,31
一個是說跳時間可是用全頻寬

145
00:07:43,31 --> 00:07:46,55
其實最後的結果是一樣

146
00:07:46,55 --> 00:07:49,31
因為我們的頻寬就是這麼多嘛

147
00:07:49,31 --> 00:07:50,75
那四個人在用

148
00:07:50,75 --> 00:07:53,58
所以最後大概都是用掉四分之一啦

149
00:07:53,58 --> 00:07:55,78
我們講這個圖上面也很清楚

150
00:07:55,78 --> 00:07:57,44
最後都是用四分之一

151
00:07:57,45 --> 00:08:02,21
好 那不管是FDM或者TDM 都是說

152
00:08:02,21 --> 00:08:08,41
我們針對不同的user分配他不同的頻道

153
00:08:08,41 --> 00:08:12,68
或者不同的時段 那這種分配呢

154
00:08:12,68 --> 00:08:15,48
一旦分配出去呢 就分配了

155
00:08:15,48 --> 00:08:18,98
不可以互相的說 借用

156
00:08:18,98 --> 00:08:21,15
譬如說我們有四個user

157
00:08:21,15 --> 00:08:23,38
可是呢 四個user呢

158
00:08:23,38 --> 00:08:27,58
不見得他們想傳送的資料量是一樣的啊

159
00:08:27,58 --> 00:08:31,55
譬如說我四個user裡面 剛好有一個user

160
00:08:31,55 --> 00:08:33,75
 他非常忙碌 他有很多資料要送

161
00:08:33,75 --> 00:08:36,81
但是其他的user呢都沒有要送

162
00:08:36,81 --> 00:08:39,65
那結果你就會發生一個現象就是說

163
00:08:39,65 --> 00:08:42,91
那我們已經把頻道都分出去啦

164
00:08:42,91 --> 00:08:45,68
譬如說我們這個藍色user呢

165
00:08:45,68 --> 00:08:47,48
他有很多資料要送

166
00:08:47,48 --> 00:08:50,48
可是其他的三個user呢 都沒有資料要送

167
00:08:50,48 --> 00:08:54,45
如果我們用FDM的技術的話 就發現說

168
00:08:54,45 --> 00:08:58,27
那這個藍色的這個頻道呢 資料一直在送

169
00:08:58,28 --> 00:09:02,81
可是下面這三個頻道 等於說 都沒有資料要送

170
00:09:02,81 --> 00:09:07,1
也就是說這個時候其實 有點沒有效率啦

171
00:09:07,1 --> 00:09:09,1
就是說我雖然把頻道分給四個人

172
00:09:09,1 --> 00:09:14,38
可是呢 如果大家沒有同時這個load很重

173
00:09:14,38 --> 00:09:16,5
沒有同時想送的時候

174
00:09:16,5 --> 00:09:20,5
別人的頻道你也不能借 你也不能借的意思

175
00:09:20,5 --> 00:09:22,38
那這樣效率就會差一點 譬如說一樣

176
00:09:22,38 --> 00:09:27,5
對於TDM來講 我們是分時段 那像藍色的

177
00:09:27,5 --> 00:09:29,68
他就反正一定要在這個藍色的時段

178
00:09:29,68 --> 00:09:30,88
在這個時段送啊

179
00:09:30,88 --> 00:09:33,48
其他的時段他也不能送

180
00:09:33,48 --> 00:09:35,38
也就是說其他的時段

181
00:09:35,38 --> 00:09:38,15
雖然就明明就空的因為其他都沒有人要送

182
00:09:38,15 --> 00:09:39,28
你還是不能送

183
00:09:39,28 --> 00:09:43,21
也就是說他 最糟糕的情況就發生在於說

184
00:09:43,21 --> 00:09:47,17
當有一些頻道沒有在用的時候

185
00:09:47,18 --> 00:09:50,51
雖然其他人想要用 那也不可以用

186
00:09:50,51 --> 00:09:56,11
所以FDM或TDM都是很簡單的所謂的這種

187
00:09:56,11 --> 00:09:58,88
所謂的多工 或者分享的技術

188
00:09:58,88 --> 00:10:01,40
但是他最大的問題就是說

189
00:10:01,41 --> 00:10:03,75
萬一這個負載不平衡

190
00:10:03,75 --> 00:10:05,31
也就是有些享受很多

191
00:10:05,31 --> 00:10:09,7
有些送的比較少 不可以互相借用

192
00:10:09,8 --> 00:10:11,31
那因此他的整個效率上

193
00:10:11,31 --> 00:10:13,90
還是會比較差一點點

194
00:10:13,91 --> 00:10:18,18
好 那我們就是說 有沒有方式是可以說

195
00:10:18,18 --> 00:10:20,58
那如果有的用得多 有的用得少

196
00:10:20,58 --> 00:10:23,40
那用得少的那個可不可以借給用得多的

197
00:10:23,41 --> 00:10:25,85
就可不可以互相的借用呢？有

198
00:10:25,85 --> 00:10:26,95
那這樣的技術呢

199
00:10:26,95 --> 00:10:30,45
我們叫做statistical的multiplexing

200
00:10:30,45 --> 00:10:32,80
我們叫做統計多工啦

201
00:10:32,81 --> 00:10:35,18
所謂的統計多工就是說

202
00:10:35,18 --> 00:10:37,41
好 我們一樣看一樣的例子

203
00:10:37,41 --> 00:10:39,25
也就是說 我還是有一個link

204
00:10:39,25 --> 00:10:42,55
然後呢 有很多這個設備

205
00:10:42,55 --> 00:10:46,27
很多主機呢要共用我們中間這個link

206
00:10:46,28 --> 00:10:48,21
一樣 link還是只有一個

207
00:10:48,21 --> 00:10:51,84
只是說我們現在不用TDM也不用FDM

208
00:10:51,85 --> 00:10:55,28
我們用的叫做statistical的multiplexing

209
00:10:55,28 --> 00:10:57,1
那他的意思就是說

210
00:10:57,1 --> 00:10:59,18
我等下用這個link的時候呢

211
00:10:59,18 --> 00:11:01,91
我會根據每一個host

212
00:11:01,91 --> 00:11:04,78
他們送出來的流量到底有多大

213
00:11:04,78 --> 00:11:07,84
按照流量的大小我來分配

214
00:11:07,85 --> 00:11:11,85
盡量讓這個link呢不要空在那裡

215
00:11:11,85 --> 00:11:13,58
也就是如果有資料要送

216
00:11:13,58 --> 00:11:15,91
就不要讓這個link空著

217
00:11:15,91 --> 00:11:18,68
讓他盡量的來傳送我們的資料

218
00:11:18,68 --> 00:11:22,98
所以我們說 在這個link上面傳送的data

219
00:11:22,98 --> 00:11:25,27
到底是送誰的data呢

220
00:11:25,28 --> 00:11:27,28
我們講TDM就是按照時段嘛

221
00:11:27,28 --> 00:11:30,5
時段一就是送一的 時段二就是送二的

222
00:11:30,5 --> 00:11:34,8
TDM按照時段 FDM按照所謂的頻帶

223
00:11:34,8 --> 00:11:37,68
好 那statistical multiplexing呢

224
00:11:37,68 --> 00:11:40,1
到底這個Link上面送誰的資料呢

225
00:11:40,1 --> 00:11:41,60
我們說depend on

226
00:11:41,61 --> 00:11:44,28
我們講on demand of each flow

227
00:11:44,28 --> 00:11:47,91
就是每一個flow他的需求是多大

228
00:11:47,91 --> 00:11:49,65
那什麼叫一個flow呢

229
00:11:49,65 --> 00:11:52,68
一個flow就是說 好 我有兩台電腦

230
00:11:52,68 --> 00:11:56,28
這兩台電腦中間的流量 可以叫做一個flow

231
00:11:56,28 --> 00:11:59,78
就這個flow的定義其實它比較有彈性啦

232
00:11:59,78 --> 00:12:00,88
我可以定義到說

233
00:12:00,88 --> 00:12:05,68
兩個電腦之間所有的流量都是一個flow

234
00:12:05,68 --> 00:12:08,50
這是可以 那我也可以再細膩說

235
00:12:08,51 --> 00:12:09,85
什麼叫做flow呢？

236
00:12:09,85 --> 00:12:13,51
就是兩台電腦之間 他們的某一個應用

237
00:12:13,51 --> 00:12:16,35
譬如說 這兩台電腦之間

238
00:12:16,35 --> 00:12:18,81
譬如說 假設他用了譬如說skype

239
00:12:18,81 --> 00:12:21,95
那skype的這個通訊呢 叫做一個flow

240
00:12:21,95 --> 00:12:26,41
所以這個flow本身的定義並不是很嚴格

241
00:12:26,41 --> 00:12:30,8
也不是很死 他可以很有彈性 譬如說

242
00:12:30,8 --> 00:12:32,25
兩個電腦之間的流量 那就很多啊

243
00:12:32,25 --> 00:12:34,74
因為我兩個電腦之間可能跑很多應用

244
00:12:34,75 --> 00:12:38,31
譬如有的在做skype 有的在做所謂的game

245
00:12:38,31 --> 00:12:43,7
有的在做 譬如說其他的遊戲 這個等等

246
00:12:43,8 --> 00:12:46,91
那我們flow可以是兩台電腦之間所有的流量

247
00:12:46,91 --> 00:12:48,35
都叫一個flow

248
00:12:48,35 --> 00:12:50,40
也可以說 分到說

249
00:12:50,41 --> 00:12:53,21
每一個application之間的流量叫一個flow

250
00:12:53,21 --> 00:12:55,5
好 那沒有關係

251
00:12:55,5 --> 00:12:58,98
就是說我們這個封包進來的時候 像這裡

252
00:12:58,98 --> 00:13:00,15
就是說我們看看

253
00:13:00,15 --> 00:13:05,15
我們根據這個flow的這個資料量

254
00:13:05,15 --> 00:13:07,55
來做所謂的multiplexing啦

255
00:13:07,55 --> 00:13:09,94
那也就是說 我們在這個交換機這邊

256
00:13:09,95 --> 00:13:13,1
我們就特別設計了 像這個地方

257
00:13:13,1 --> 00:13:16,35
我們講所謂的機制 像這個

258
00:13:17,48 --> 00:13:21,5
這些機制呢 都是在這個交換機裡面

259
00:13:21,5 --> 00:13:24,55
 他會設計 什麼叫做譬如說FIFO

260
00:13:24,55 --> 00:13:27,58
FIFO就是說first in first out

261
00:13:27,58 --> 00:13:29,55
就是說你這個封包進來

262
00:13:29,55 --> 00:13:31,40
 誰先進來我就誰先出去

263
00:13:31,41 --> 00:13:33,21
也就是說我們沒有分

264
00:13:33,21 --> 00:13:35,88
剛剛提到什麼TDM啦FDM啦

265
00:13:35,88 --> 00:13:40,5
我們就是把它放在一個queue 那誰先進來

266
00:13:40,5 --> 00:13:42,98
 我就 先進先出的意思

267
00:13:42,98 --> 00:13:47,38
那這個queue嘛 所以如果我們講有四個station

268
00:13:47,38 --> 00:13:50,18
假設 那有一個station他的流量很大

269
00:13:50,18 --> 00:13:52,48
他就很快把封包塞進來啊

270
00:13:52,48 --> 00:13:54,61
流量很大嘛 queue上面都是他的流量

271
00:13:54,61 --> 00:13:58,28
那如果其他的沒有要送 那就全部都他的流量

272
00:13:58,28 --> 00:14:00,5
所以他就可以全部用啊

273
00:14:00,5 --> 00:14:04,28
啊如果說四個人 他們都很想送

274
00:14:04,28 --> 00:14:06,28
那就趕快把封包塞進來啊

275
00:14:06,28 --> 00:14:08,68
所以這個queue裡面可能大家就分那個四分之一嘛

276
00:14:08,68 --> 00:14:11,38
就是說 大家都想送的時候

277
00:14:11,38 --> 00:14:15,75
基本上會平均使用 因為大家都有資料要送

278
00:14:15,75 --> 00:14:19,15
都會塞到這個queue裡面來 所以平均來說

279
00:14:19,15 --> 00:14:21,11
大概就是大家分到四分之一

280
00:14:21,11 --> 00:14:23,70
但是如果不平均 就是不均等

281
00:14:23,71 --> 00:14:25,68
譬如說有三個呢不想送

282
00:14:25,68 --> 00:14:27,98
有一個呢 他想送很多資料

283
00:14:27,98 --> 00:14:31,74
那這個呢 他就可以全部把它用完

284
00:14:31,75 --> 00:14:34,48
也就是說FIFO這個機制呢

285
00:14:34,48 --> 00:14:38,35
也算是一個statistical multiplexing的一個技術

286
00:14:38,35 --> 00:14:42,11
也就是說大家共用一個所謂的FIFO queue

287
00:14:42,11 --> 00:14:47,21
那大家流量都很多的時候呢 大概會平均使用

288
00:14:47,21 --> 00:14:50,7
就類似FDM或TDM的效果

289
00:14:50,8 --> 00:14:54,38
那如果說這個想要傳送的資料量其實是不均衡

290
00:14:54,38 --> 00:14:56,75
有的大有的小

291
00:14:56,75 --> 00:14:58,88
或者有的多有的小的時候呢

292
00:14:58,88 --> 00:15:00,60
他大概會按照比例

293
00:15:00,61 --> 00:15:04,5
因為看誰先進到這個queue 誰先送嘛

294
00:15:04,5 --> 00:15:07,1
所以first in first out也是一個很好的做法

295
00:15:07,1 --> 00:15:09,68
那另外一個可能公平一點 叫做round-Robin

296
00:15:09,68 --> 00:15:12,95
round-Robin的意思就是說大家輪流

297
00:15:12,95 --> 00:15:16,21
相當於說 你看我有 假設我有這個例子

298
00:15:16,21 --> 00:15:17,98
我們有三個好了 三個station

299
00:15:17,98 --> 00:15:20,17
他的資料進來的時候呢

300
00:15:20,18 --> 00:15:21,78
我們把它放在三個queue

301
00:15:21,78 --> 00:15:25,48
就是說 每一個station 或者每一個flow

302
00:15:25,48 --> 00:15:27,58
每一個flow呢都有一個queue

303
00:15:27,58 --> 00:15:30,11
然後呢我有一個叫做scheduler

304
00:15:30,11 --> 00:15:34,50
我就看這個queue 怎麼去所謂服務這個queue

305
00:15:34,51 --> 00:15:36,21
round-Robin就是說輪流

306
00:15:36,21 --> 00:15:38,35
譬如說這個queue我送一個封包

307
00:15:38,35 --> 00:15:40,11
下一個queue送一個封包

308
00:15:40,11 --> 00:15:42,45
再下一個queue送一個封包

309
00:15:42,45 --> 00:15:44,55
就是三個queue呢 假設都有資料

310
00:15:44,55 --> 00:15:46,80
那我就輪流 很公平嘛

311
00:15:46,81 --> 00:15:49,31
一個一個一個  一個一個一個  一個一個一個

312
00:15:49,31 --> 00:15:52,5
就按照順序呢 大家輪流送

313
00:15:52,5 --> 00:15:54,25
就大家都有封包要送的時候

314
00:15:54,25 --> 00:15:56,31
那個queue都是很多內容

315
00:15:56,31 --> 00:15:58,35
就queue裡面很多封包的時候

316
00:15:58,35 --> 00:16:00,40
我就round-Robin 一個一個送

317
00:16:00,41 --> 00:16:03,25
這個很公平 因為大家用到的個頻寬也是

318
00:16:03,25 --> 00:16:06,15
幾乎是這個大家平均 一樣

319
00:16:06,15 --> 00:16:11,11
一樣 如果有這個某些這個flow資料量比較大

320
00:16:11,11 --> 00:16:12,28
就他的queue比較多

321
00:16:12,28 --> 00:16:14,25
那另外兩個queue假設已經空了

322
00:16:14,25 --> 00:16:17,40
沒有了 一樣啊 那我就只有這個queue

323
00:16:17,41 --> 00:16:19,25
我就趕快多送他的queue啊

324
00:16:19,25 --> 00:16:22,45
我也不會浪費這個所謂的link的頻寬

325
00:16:22,45 --> 00:16:25,27
所以round-Robin本身 他又兼顧了

326
00:16:25,28 --> 00:16:28,25
所謂的公平的這個原則

327
00:16:28,25 --> 00:16:29,95
然後又兼顧了說

328
00:16:29,95 --> 00:16:33,41
那如果說有些flow 他沒有流量

329
00:16:33,41 --> 00:16:35,8
那我就把這個頻寬呢

330
00:16:35,8 --> 00:16:38,21
給那個有流量的這個flow來使用

331
00:16:38,21 --> 00:16:41,60
所以他也兼顧了這個所謂的effective

332
00:16:41,61 --> 00:16:43,85
這個 所謂的有效地使用

333
00:16:43,85 --> 00:16:46,95
那最後 我們所謂的priority

334
00:16:46,95 --> 00:16:50,35
就是說 那我們如果把他分成不同的queue

335
00:16:50,35 --> 00:16:53,74
我還可以做到所謂的priority

336
00:16:53,75 --> 00:16:56,61
就是說那我還可以說哪些flow比較重要

337
00:16:56,61 --> 00:17:00,25
那我先送 譬如說什麼叫做比較重要

338
00:17:00,25 --> 00:17:03,60
我們通常都是譬如說audio video比較多媒體

339
00:17:03,61 --> 00:17:06,40
我需要即時性的 譬如說影音聲音

340
00:17:06,40 --> 00:17:09,21
那我們如果說在網路上面做對話

341
00:17:09,21 --> 00:17:11,21
 做這個視訊通訊

342
00:17:11,21 --> 00:17:12,75
這個即時性很重要

343
00:17:12,75 --> 00:17:16,35
那這種flow呢我就先送 這叫priority

344
00:17:16,35 --> 00:17:19,8
如果你有優先次序的概念的話

345
00:17:19,8 --> 00:17:23,35
那我們就可以做到一般所謂的quality of service

346
00:17:23,35 --> 00:17:25,81
因為不同的服務要不同的品質

347
00:17:25,80 --> 00:17:29,91
我們看到TDM跟FDM 那是不管

348
00:17:29,91 --> 00:17:31,91
反正按照時間按照頻道

349
00:17:31,91 --> 00:17:33,58
我不管你的資料重不重要

350
00:17:33,58 --> 00:17:34,88
不管你有沒有要送

351
00:17:34,88 --> 00:17:36,75
你沒有送 別人也不可以用

352
00:17:36,75 --> 00:17:38,35
你想送重要的東西

353
00:17:38,35 --> 00:17:41,88
你也搶不到 因為你的頻寬都是分配死的

354
00:17:41,88 --> 00:17:46,38
那我們說 這個statistical multiplexing呢

355
00:17:46,38 --> 00:17:48,11
他就非常有彈性

356
00:17:48,11 --> 00:17:52,31
就是說大家的流量都很多的時候呢

357
00:17:52,31 --> 00:17:54,41
大家會均衡的使用

358
00:17:54,41 --> 00:17:57,64
那如果大家流量不均衡的時候呢 一樣

359
00:17:57,65 --> 00:18:00,65
我們不會讓這個頻寬呢空在那裡

360
00:18:00,65 --> 00:18:02,61
這是他很重要的特色

361
00:18:02,61 --> 00:18:03,58
那最後我們說

362
00:18:03,58 --> 00:18:06,15
那萬一這個發生所謂的congested

363
00:18:06,15 --> 00:18:08,21
一樣 這個交換機啦

364
00:18:08,21 --> 00:18:10,55
萬一阻塞的時候 怎麼辦

365
00:18:10,55 --> 00:18:15,28
那阻塞的時候 通常只好把封包丟棄了

366
00:18:15,28 --> 00:18:18,18
因為一旦封包 這個所謂的太多

367
00:18:18,18 --> 00:18:19,38
消化不了的時候

368
00:18:19,38 --> 00:18:22,95
交換機或者路由器都沒有辦法

369
00:18:22,95 --> 00:18:28,35
因為他保留不住 所以他就會開始丟封包

370
00:18:28,35 --> 00:18:31,95
問題在於說 當我們要丟封包的時候

371
00:18:31,95 --> 00:18:33,95
你要丟誰的封包

372
00:18:33,95 --> 00:18:36,38
譬如說我上面有這麼多個flow

373
00:18:36,38 --> 00:18:37,78
你要丟誰的？

374
00:18:37,78 --> 00:18:39,85
是誰比較倒霉 封包被你丟掉

375
00:18:39,85 --> 00:18:43,65
這個也有學問的 我們後面會再介紹說

376
00:18:43,65 --> 00:18:49,75
我們的switch或者router 即使因為收不下來

377
00:18:49,75 --> 00:18:52,78
我必須丟封包的時候 我丟誰的

378
00:18:52,78 --> 00:18:54,75
這個還是有學問在裡面的

379
00:18:54,75 --> 00:18:56,75



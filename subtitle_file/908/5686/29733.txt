1
00:00:08,085 --> 00:00:11,041
好 那最後這邊我們來介紹

2
00:00:11,041 --> 00:00:14,045
就是IEEE802.11他相關的標準

3
00:00:14,045 --> 00:00:16,095
還有最後面做一個所謂的summary

4
00:00:16,095 --> 00:00:21,058
那我們之前 陸陸續續地介紹了就是說IEEE802.11

5
00:00:21,058 --> 00:00:23,068
他的所謂的protocol

6
00:00:23,068 --> 00:00:27,051
像是用CSMA/CA collision avoidance

7
00:00:27,051 --> 00:00:30,038
做為他整個運作的最基本的這個方法

8
00:00:30,038 --> 00:00:33,081
那IEEE802.11當時提出來的時候

9
00:00:33,081 --> 00:00:38,091
因為技術的關係 能夠support的速度呢 大概是2Mbps

10
00:00:38,091 --> 00:00:45,071
那後來有IEEE802.11b 他可以把速度呢 提升到11Mbps

11
00:00:45,071 --> 00:00:51,061
那後來有802.11a 可以把速度呢再提升到54Mbps

12
00:00:51,061 --> 00:00:55,098
然後還有802.11g 也是54Mbps

13
00:00:55,098 --> 00:00:58,028
那最後 我們講最新的呢

14
00:00:58,028 --> 00:01:04,021
就是IEEE802.11n 那可以達到108Mbps

15
00:01:04,021 --> 00:01:08,051
他用所謂的MIMO的技術 變成說多天線的技術

16
00:01:08,051 --> 00:01:11,071
然後多通道的傳輸 加上編碼的技術呢

17
00:01:11,071 --> 00:01:16,048
現在已經可以送到108Mbps 這是一個channel

18
00:01:16,048 --> 00:01:19,001
那我們真正的在市場上面買得到

19
00:01:19,001 --> 00:01:20,075
有時候他會用好幾個channel

20
00:01:20,075 --> 00:01:25,008
所以整個加起來 甚至可以達到兩三百Mbps

21
00:01:25,008 --> 00:01:29,051
然後在實驗室裡面 現在無線通訊本身

22
00:01:29,051 --> 00:01:34,018
尤其時wireless LAN這一塊 現在大概已經可以送到Gb

23
00:01:34,018 --> 00:01:37,031
所以現在已經開始在制定這方面的標準

24
00:01:37,031 --> 00:01:40,058
就所謂的Gb的wireless LAN的標準

25
00:01:40,058 --> 00:01:45,058
所以我們最後呢 針對這個IEEE802.11

26
00:01:45,058 --> 00:01:48,021
無線區域網路呢 做一個summary

27
00:01:48,021 --> 00:01:54,055
我們說 因為這種無線通訊呢有兩個非常重要的特色

28
00:01:54,055 --> 00:01:57,018
或者兩個重要的這個特徵啦

29
00:01:57,018 --> 00:01:59,028
一個叫做hidden node problem

30
00:01:59,028 --> 00:02:01,081
所謂的hidden node 就是隱藏node

31
00:02:01,081 --> 00:02:08,005
這個隱藏點就是說 我們說 雖然雙方聽不到對方的訊號

32
00:02:08,005 --> 00:02:11,045
就是因為每一個這個無線的這個node

33
00:02:11,045 --> 00:02:14,038
他傳輸呢是一個 算是範圍是有限

34
00:02:14,038 --> 00:02:17,068
就是說雙方聽不到對方的訊號

35
00:02:17,068 --> 00:02:22,075
但是如果他們同時傳送給相同的對象

36
00:02:22,075 --> 00:02:27,051
相同的對象的時候呢 是有可能會造成collision

37
00:02:27,051 --> 00:02:30,051
所以hidden node問題就是我聽不到你 你聽不到我

38
00:02:30,051 --> 00:02:34,051
但是我跟你同時送的時候呢 這個封包會撞在一起

39
00:02:34,051 --> 00:02:38,011
撞在一起是因為我們送給相同的對象

40
00:02:38,011 --> 00:02:40,055
這個問題會比較討厭一點

41
00:02:40,055 --> 00:02:43,008
就是說因為這個事情發生的時候呢

42
00:02:43,008 --> 00:02:45,055
我不知道有collision 那你也不知道

43
00:02:45,055 --> 00:02:47,035
因為我們互相聽不到對方

44
00:02:47,035 --> 00:02:52,025
但是我們同時送的封包卻在相同的對象的地方造成了collision

45
00:02:52,025 --> 00:02:54,061
這是一個很討厭的問題

46
00:02:54,061 --> 00:02:57,088
那第二個問題我們叫做exposed node的problem

47
00:02:57,088 --> 00:02:59,068
他剛好倒過來 他是說

48
00:02:59,068 --> 00:03:02,098
雙方雖然聽得到對方的訊號

49
00:03:02,098 --> 00:03:04,045
就是我聽的到你 你聽得到我

50
00:03:04,045 --> 00:03:08,081
代表我們很靠近 我的訊號你收得到 你的訊號我也收得到

51
00:03:08,081 --> 00:03:15,055
但是我們如果同時送給不同的對象 這樣不會有collision

52
00:03:15,055 --> 00:03:17,055
就是我聽得到你 你聽得到我

53
00:03:17,055 --> 00:03:19,055
一般是說 那我們兩個如果同時送

54
00:03:19,055 --> 00:03:21,045
是不是一定會干擾在一起

55
00:03:21,045 --> 00:03:26,038
事實上不會 就是說 我們雖然彼此聽得到對方

56
00:03:26,038 --> 00:03:29,035
我們很靠近 但是我如果是送給另外一個

57
00:03:29,035 --> 00:03:32,025
你送給另外一個 就是我們送給不同的對象

58
00:03:32,025 --> 00:03:35,018
那這兩個封包呢 有可能都會成功

59
00:03:35,018 --> 00:03:39,041
所以說這個是無線通訊裡面 很重要的特性啦

60
00:03:39,041 --> 00:03:43,075
那就因為他是無線通訊 所以IEEE802.11呢

61
00:03:43,075 --> 00:03:45,078
有一個很重要的特色 我們說

62
00:03:45,078 --> 00:03:49,011
他沒有support collision detection

63
00:03:49,011 --> 00:03:53,071
就是說他沒有支持所謂的 封包這個偵測

64
00:03:53,071 --> 00:03:55,031
所謂的衝撞的偵測

65
00:03:55,031 --> 00:03:58,055
就萬一有發生collision 我們也不知道

66
00:03:58,055 --> 00:04:01,095
那如果說 發生collision我們不知道

67
00:04:01,095 --> 00:04:05,081
那對我們來講 我們這個傳送的這個

68
00:04:05,081 --> 00:04:10,001
這個所謂的風險就很高 就是說我們一般

69
00:04:10,001 --> 00:04:13,005
我們也知道 802.11他的封包呢

70
00:04:13,005 --> 00:04:17,031
長度大概2300個byte 就是其實算滿長的

71
00:04:17,031 --> 00:04:21,021
我們ethernet最長也才1518嘛

72
00:04:21,021 --> 00:04:24,058
我們這個wireless LAN可以到2300多個bytes

73
00:04:24,058 --> 00:04:28,075
2300多個bytes一送出去 如果發生了collision

74
00:04:28,075 --> 00:04:31,081
這個全部就浪費了 而且你還不知道

75
00:04:31,081 --> 00:04:36,055
就是你送了那麼長的封包出去 發生collision你還不知道

76
00:04:36,055 --> 00:04:39,095
那我們在ethernet的時候 就是說如果我們封包很長

77
00:04:39,095 --> 00:04:42,071
那我一送出去 一collision我馬上就知道啊

78
00:04:42,071 --> 00:04:46,041
那我如果知道有collision 我就把它停掉啊

79
00:04:46,041 --> 00:04:48,085
因為衝撞的封包就沒有用了

80
00:04:48,085 --> 00:04:51,061
如果我們能夠早一點知道發生collision

81
00:04:51,061 --> 00:04:54,081
這個長封包我就馬上把它停掉 我根本不浪費了

82
00:04:54,081 --> 00:04:58,028
但是802.11呢 他因為

83
00:04:58,028 --> 00:05:01,075
沒有辦法支持這個所謂的collision detection

84
00:05:01,075 --> 00:05:03,055
就是說 封包衝撞呢你也不知道

85
00:05:03,055 --> 00:05:06,018
所以你必須把封包全部送完

86
00:05:06,018 --> 00:05:09,018
那全部送完之後 其實他是衝撞的

87
00:05:09,018 --> 00:05:13,005
然後我們怎麼知道衝撞呢 因為說我們必須靠ACK

88
00:05:13,005 --> 00:05:16,058
我們說必須靠ACK 就是說我送一個長封包給你

89
00:05:16,058 --> 00:05:19,028
我也不知道有沒有衝撞 你有沒有收到

90
00:05:19,028 --> 00:05:20,068
你必須回我一個ACK

91
00:05:20,068 --> 00:05:23,035
那萬一這個封包 一開始我們說

92
00:05:23,035 --> 00:05:25,001
因為有hidden terminal的問題嘛

93
00:05:25,001 --> 00:05:27,018
有可能說 我們都送到一個地方去

94
00:05:27,018 --> 00:05:29,068
其實呢 一開始送就衝撞了

95
00:05:29,068 --> 00:05:33,068
可是因為我們不知道 所以我們必須把整個長封包

96
00:05:33,068 --> 00:05:36,085
花很長的時間全部把他送完

97
00:05:36,085 --> 00:05:40,098
然後呢 因為沒有收到ACK 然後我說這個衝撞

98
00:05:40,098 --> 00:05:44,015
阿這個其實是非常浪費這個頻寬的啦

99
00:05:44,015 --> 00:05:48,098
所以我們說 為了讓長封包在送的時候

100
00:05:48,098 --> 00:05:52,015
能夠盡量減少這個衝撞的機率

101
00:05:52,015 --> 00:05:54,021
所以呢 他設計了一個叫做

102
00:05:54,021 --> 00:05:56,015
request to send跟clear to send

103
00:05:56,015 --> 00:05:57,081
的這樣的一個交握的過程

104
00:05:57,081 --> 00:06:01,021
就是說我們在送比較長的封包之前

105
00:06:01,021 --> 00:06:04,045
我們先送一個request to send跟clear to send

106
00:06:04,045 --> 00:06:07,068
那這兩個封包裡面 因為帶了一個duration

107
00:06:07,068 --> 00:06:11,075
代表說他也有點在宣告 有點在預約

108
00:06:11,075 --> 00:06:13,075
說我等下要送一個這麼長的封包

109
00:06:13,075 --> 00:06:16,071
那送clear to send呢

110
00:06:16,071 --> 00:06:19,078
他就說我等下要收一個這麼長的封包

111
00:06:19,078 --> 00:06:24,081
我需要這麼長的時間 所以聽到RTS 聽到CTS呢

112
00:06:24,081 --> 00:06:30,041
他其實就告訴說 等下會有一個封包傳送 總共需要多少時間

113
00:06:30,041 --> 00:06:34,065
那在這個時間之內 你就不要來鬧 不要來干擾

114
00:06:34,065 --> 00:06:38,058
讓這個封包呢 可以比較成功的把它送完

115
00:06:38,058 --> 00:06:42,088
所以也就是說 因為沒有辦法偵測collision

116
00:06:42,088 --> 00:06:46,065
所以設計了request to send跟clear to send這種方式

117
00:06:46,065 --> 00:06:50,001
來做一個所謂的channel的這種reservation

118
00:06:50,001 --> 00:06:53,091
預約下來 然後其他人就盡量不要來干擾

119
00:06:53,091 --> 00:06:59,051
那我們說 因為他做了所謂的RTS CTS的這種預約方式

120
00:06:59,051 --> 00:07:05,041
我們來知道說 這個carrier本身 到底是不是忙碌呢

121
00:07:05,041 --> 00:07:08,085
是不是idle還是busy呢 就有兩種方法啦

122
00:07:08,085 --> 00:07:10,041
一個就是說你實際去聽嘛

123
00:07:10,041 --> 00:07:13,051
因為我們有天線啊 我用天線去聽

124
00:07:13,051 --> 00:07:15,095
這個訊號到底有沒有在送

125
00:07:15,095 --> 00:07:21,018
是idle還是busy 這是用physical 就是你用天線去聽

126
00:07:21,018 --> 00:07:24,071
另外一個方法就是說 這個人家剛剛已經預約了嘛

127
00:07:24,071 --> 00:07:28,005
我們講 RTS跟CTS裡面已經有預約啦

128
00:07:28,005 --> 00:07:32,071
所以在這個預約的時間之內 我們就把它當成通通都是busy

129
00:07:32,071 --> 00:07:35,028
你不用聽 因為剛剛已經預約了

130
00:07:37,051 --> 00:07:40,041
所以你也不用去聽 就把它當成他就是busy啦

131
00:07:40,041 --> 00:07:42,071
這個就是所謂的virtual的概念

132
00:07:42,071 --> 00:07:46,038
那這個virtual我們說 就是靠duration這個欄位

133
00:07:46,038 --> 00:07:50,031
來告訴我們說 這個預約的時間到底是多長

134
00:07:50,031 --> 00:07:53,035
好 那我們說最重要最重要的

135
00:07:53,035 --> 00:07:57,078
因為有前面這些特色呢 所以IEEE802.11呢

136
00:07:57,078 --> 00:08:02,098
他就用了所謂的CSMA/CA 的這個protocol

137
00:08:02,098 --> 00:08:06,055
那其中我們叫做collision avoidance

138
00:08:06,055 --> 00:08:10,021
就是我們沒有辦法偵測有沒有發生collision

139
00:08:10,021 --> 00:08:13,011
那我們就用剛剛那個機制

140
00:08:13,011 --> 00:08:16,081
還有等下介紹這個機制來避免發生collision

141
00:08:16,081 --> 00:08:19,031
那我們要特別強調 就是說

142
00:08:19,031 --> 00:08:22,008
雖然我們叫做collision avoidance

143
00:08:22,008 --> 00:08:27,071
我們叫盡量避免衝撞 但是還是有可能發生衝撞

144
00:08:27,071 --> 00:08:31,098
在802.11裡面呢 還是有可能發生衝撞

145
00:08:31,098 --> 00:08:33,098
譬如剛剛講的hidden terminal

146
00:08:33,098 --> 00:08:37,035
就是沒有辦法避免 就是說我們是盡量避免collision

147
00:08:37,035 --> 00:08:40,031
但是呢是沒有辦法百分之百避免的

148
00:08:40,031 --> 00:08:44,035
他的作法呢 就是說 一樣CSMA前面這一段

149
00:08:44,035 --> 00:08:47,061
就是carrier sense 所以我在送封包之前

150
00:08:47,061 --> 00:08:50,045
我還是會去 我們叫做sense carrier

151
00:08:50,045 --> 00:08:55,071
去聽聽看 現在這個carrier本身是idle還是busy

152
00:08:55,071 --> 00:08:58,021
就這兩個 首先 如果是idle

153
00:08:58,021 --> 00:09:01,048
代表說現在我聽到的呢是沒有人在送

154
00:09:01,048 --> 00:09:04,001
沒有人在送 我們就等

155
00:09:04,001 --> 00:09:09,075
我們叫等一個DIFS 如果你可以等這麼長的時間

156
00:09:09,075 --> 00:09:13,065
都沒有人送 代表說你就可以送

157
00:09:13,065 --> 00:09:15,061
這是第一個 第二個case就是說

158
00:09:15,061 --> 00:09:18,088
那我們如果聽 sense這個channel呢

159
00:09:18,088 --> 00:09:23,055
發現他是busy的 代表說 現在有封包正在送

160
00:09:23,055 --> 00:09:26,075
好 那我們就很簡單 我們等這個呢

161
00:09:26,075 --> 00:09:30,008
channel變成idle 讓他變成idle

162
00:09:30,008 --> 00:09:33,095
就送完了 然後呢 再等一個DIFS

163
00:09:33,095 --> 00:09:37,031
所以這個看起來就有點像 就是說

164
00:09:37,031 --> 00:09:40,021
如果剛剛提到 你如果是idle

165
00:09:40,021 --> 00:09:46,008
你就等一個DIFS 如果你是busy 就等他送完

166
00:09:46,008 --> 00:09:49,025
然後呢一樣 送完之後變成idle了嘛

167
00:09:49,025 --> 00:09:51,078
然後等一個DIFS 不過

168
00:09:51,078 --> 00:09:55,095
後面還要再加上一個叫做random back-off time

169
00:09:55,095 --> 00:09:59,085
就是因為你如果現在去聽 發現是busy

170
00:09:59,085 --> 00:10:02,088
就代表說 這個現在可能

171
00:10:02,088 --> 00:10:05,045
等下可能 現在有人正在送

172
00:10:05,045 --> 00:10:09,048
等下可能也會有人送 那這個時候我為了避免

173
00:10:09,048 --> 00:10:11,028
我們剛剛提到 為了避免collision嘛

174
00:10:11,028 --> 00:10:15,051
所以我就會稍微把自己傳送的時間 把他放慢一點

175
00:10:15,051 --> 00:10:18,075
把它錯開一下 他的方法就是說

176
00:10:18,075 --> 00:10:22,005
他會產生一個所謂的 random back-off time

177
00:10:22,005 --> 00:10:25,025
代表說 我到底要延多久呢

178
00:10:25,025 --> 00:10:29,028
那這是一個亂數時間 他的單位就是一個slow time

179
00:10:29,028 --> 00:10:31,018
就是幾個slow 幾個slow time

180
00:10:31,018 --> 00:10:36,005
那這個亂數時間跟 你自己傳輸的經驗是有關的

181
00:10:36,005 --> 00:10:38,005
譬如說你這個封包是第一次傳輸

182
00:10:38,005 --> 00:10:40,028
那我這個等待時間比較短

183
00:10:40,028 --> 00:10:43,075
那你這個封包本身 譬如說之前傳輸呢

184
00:10:43,075 --> 00:10:48,085
可能collision 因為你沒有接到ACK 就代表這個封包壞掉

185
00:10:48,085 --> 00:10:52,028
就這個封包本身 現在是第一次傳送

186
00:10:52,028 --> 00:10:56,055
跟你第一次重送 或者第二次重送

187
00:10:56,055 --> 00:10:59,091
或第三次重送 就是你重送同樣一個封包

188
00:10:59,091 --> 00:11:05,031
重送的次數越多 就代表說這個網路呢可能更擁擠

189
00:11:05,031 --> 00:11:09,018
那我們這個back-off 就是退後的時間

190
00:11:09,018 --> 00:11:12,005
或者延後的時間 就要更長

191
00:11:12,005 --> 00:11:14,068
就是說我們說 這個random back-off的時間呢

192
00:11:14,068 --> 00:11:21,025
是跟你這個封包現在傳送所經歷的經驗是有關的

193
00:11:21,025 --> 00:11:23,015
第一次送 我們delay比較短

194
00:11:23,015 --> 00:11:26,021
第一次重送或第二次重送第三次重送

195
00:11:26,021 --> 00:11:28,071
我們delay時間比較長 這是他的做法

196
00:11:28,071 --> 00:11:36,058
那我們也說 這個802.11 它提供了所謂的priority的機制

197
00:11:36,058 --> 00:11:39,051
所謂的優先權啦 那我們知道說

198
00:11:39,051 --> 00:11:44,008
最優先的就是short的IFS 這是給誰用的呢

199
00:11:44,008 --> 00:11:46,078
給送封包要回ACK 因為這個是

200
00:11:46,078 --> 00:11:52,095
因為我們用ACK來確認說這個封包傳送的正確性嘛

201
00:11:52,095 --> 00:11:54,078
因為我們沒有辦法知道collision

202
00:11:54,078 --> 00:11:58,021
所以一定要靠ACK 所以這個ACK他是最重要最重要的

203
00:11:58,021 --> 00:12:02,048
所以送封包回ACK 他時間一定要最短的時間要發生

204
00:12:02,048 --> 00:12:04,051
還有request to send跟clear to send

205
00:12:04,051 --> 00:12:06,035
這兩個也是非常非常關鍵

206
00:12:06,035 --> 00:12:09,045
因為他是來預約等下要送多少這個時間

207
00:12:09,045 --> 00:12:12,025
所以request to send跟clear to send

208
00:12:12,025 --> 00:12:16,021
data 然後這個所謂的ACK 還有剛提到的polling

209
00:12:16,021 --> 00:12:20,048
polling然後回這個封包 這個都是要一問一答

210
00:12:20,048 --> 00:12:23,001
然後要最快最短的時間要發生

211
00:12:23,001 --> 00:12:26,021
那我們就說 他們就是用short的IFS

212
00:12:26,021 --> 00:12:31,025
那如果是進到所謂的superframe裡面的前面那一段

213
00:12:31,025 --> 00:12:34,031
所謂的免競爭 那免競爭代表說

214
00:12:34,031 --> 00:12:37,078
這個時候我是用那個所謂的基地台

215
00:12:37,078 --> 00:12:43,088
他要去徵詢嘛 被問到的就可以趕快送

216
00:12:43,088 --> 00:12:49,048
那他們通常都是拿來送 一般所謂的需要時間性的流量

217
00:12:49,048 --> 00:12:53,068
譬如說多媒體的 不管是譬如說audio video

218
00:12:53,068 --> 00:12:58,015
聲音的 視訊的 因為他有這個時間的這個時效性

219
00:12:58,015 --> 00:13:04,005
所以他用這個PIFS呢 有所謂的第二高的優先權

220
00:13:04,005 --> 00:13:07,071
那最後就是DIFS 那這是一般的data

221
00:13:07,071 --> 00:13:10,048
一般的data因為沒有real time的這個需求

222
00:13:10,048 --> 00:13:14,011
所以他就盡量 來搶頻寬

223
00:13:14,011 --> 00:13:18,011
那搶頻寬的這個方法呢 就是用這個方式

224
00:13:18,011 --> 00:13:21,038
就是CSMA/CA 那就剛剛提到

225
00:13:21,038 --> 00:13:23,038
我搶頻寬的時候我就來聽聽看嘛

226
00:13:23,038 --> 00:13:26,058
idle我就等一個DIFS 那busy我就等

227
00:13:26,058 --> 00:13:29,065
等他結束 再等一個DIFS

228
00:13:29,065 --> 00:13:32,045
然後呢再加上一個random back-off time

229
00:13:32,045 --> 00:13:35,055
然後時間到了 count down到0的時候我就送出去

230
00:13:35,055 --> 00:13:41,031
所以DIFS呢 就是專門給 沒有即時需求的data來傳輸啦

231
00:13:41,031 --> 00:13:48,005
那我們最後原本有提到說 在802.11裡面呢

232
00:13:48,005 --> 00:13:51,038
這個所謂的PC 就point coordinator

233
00:13:51,038 --> 00:13:55,071
他會來產生所謂的superframe

234
00:13:55,071 --> 00:13:57,068
那一個superframe呢 本身

235
00:13:57,068 --> 00:14:00,051
會有一個contention free burst

236
00:14:00,051 --> 00:14:04,071
就是免競爭 然後再加上後面開放競爭

237
00:14:04,071 --> 00:14:08,015
而這個免競爭呢 就是PIFS用的

238
00:14:08,015 --> 00:14:11,015
那這個DIFS 我們剛剛提到

239
00:14:11,015 --> 00:14:14,068
他就是給這個競爭的這個週期用的

240
00:14:14,068 --> 00:14:17,048
就是我們不同的週期 用不同的這個

241
00:14:17,048 --> 00:14:20,085
所謂的封包的時間間隔

242
00:14:20,085 --> 00:14:23,098
那時間間隔比較短 就代表說

243
00:14:23,098 --> 00:14:26,068
他這個封包可以比較快送出來

244
00:14:26,068 --> 00:14:31,045
就搶到這個頻道的使用 所以我們講 他有比較高的priority

245
00:14:31,045 --> 00:14:36,048
然後最後呢我們說 這個整個PCF的這個protocol呢

246
00:14:36,048 --> 00:14:39,008
他是base on一個polling的機制

247
00:14:39,008 --> 00:14:41,078
就是由這個point coordinator

248
00:14:41,078 --> 00:14:43,075
我們說 這個point coordinator

249
00:14:43,075 --> 00:14:48,025
通常就是一個基地台 那他來徵詢

250
00:14:48,025 --> 00:14:52,055
或者來輪詢這些旗下的涵蓋的這個station

251
00:14:52,055 --> 00:14:56,031
一個一個問 那經過這樣子所謂的輪詢的方式呢

252
00:14:56,031 --> 00:14:59,055
等於說我們就達到了所謂的非競爭

253
00:14:59,055 --> 00:15:01,091
所以最後我們做一個summary

254
00:15:01,091 --> 00:15:07,081
就是IEEE802.11 他其實可以提供所謂的免競爭

255
00:15:07,081 --> 00:15:11,068
針對所謂的real time的traffic 提供更好的服務

256
00:15:11,068 --> 00:15:15,081
那另外就是競爭性的 就是大家一般的data

257
00:15:15,081 --> 00:15:20,038
就透過CSMA/CA這個protocol 大家來搶頻寬

258
00:15:20,038 --> 00:15:22,038



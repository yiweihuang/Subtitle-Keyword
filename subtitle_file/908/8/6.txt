2
00:00:09,039 --> 00:00:11,220
好那接下來我們來介紹所謂的

3
00:00:11,220 --> 00:00:14,300
TCP的retransmission的這個scenario

4
00:00:14,300 --> 00:00:17,540
就是說TCP呢他在做這個重送的時候

5
00:00:17,540 --> 00:00:21,700
它有幾個情境啦 那我們說因為TCP本身呢

6
00:00:21,700 --> 00:00:24,680
它是用所謂的bi orianted protocol

7
00:00:24,680 --> 00:00:27,059
等於說它的sequence number的單位

8
00:00:27,059 --> 00:00:29,039
都是每一個bit每一個bit來算的

9
00:00:30,039 --> 00:00:34,920
那我們就以第一個case 假設呢我們的這個ack這個

10
00:00:34,920 --> 00:00:37,220
acknowledgement lost掉的情況之下

11
00:00:37,220 --> 00:00:39,340
來看他怎麼樣做retransmission

12
00:00:39,340 --> 00:00:41,620
我們來看左邊的這個圖

13
00:00:41,620 --> 00:00:46,039
我們說 首先呢第一個這個所謂的

14
00:00:46,039 --> 00:00:48,580
client假設它送一個封包出來

15
00:00:48,580 --> 00:00:50,980
那它的sequence number是70

16
00:00:50,980 --> 00:00:53,780
然後呢這個封包帶了20個bytes

17
00:00:53,780 --> 00:00:56,600
注意到他的sequence number是70

18
00:00:56,600 --> 00:00:59,880
代表說他這個封包裡面呢 帶了20個bytes

19
00:00:59,880 --> 00:01:03,200
第一個byte的sequence number是70嘛

20
00:01:03,200 --> 00:01:07,300
那第二十個byte就是89等於說

21
00:01:07,300 --> 00:01:09,239
等於說在這個封包裡面

22
00:01:09,239 --> 00:01:12,099
因為他含20個bytes所以他會耗掉

23
00:01:13,099 --> 00:01:14,920
20個sequence number

24
00:01:14,920 --> 00:01:17,840
我們特別強調因為TCP裡面呢

25
00:01:17,840 --> 00:01:20,380
每一個bytes呢都有一個sequence number

26
00:01:20,380 --> 00:01:24,300
好 那當這個右邊這個server收到之後呢

27
00:01:24,300 --> 00:01:27,000
他就要回一個 所謂的ack嘛

28
00:01:27,000 --> 00:01:30,980
那我們特別注意到 這個ack它回的是90

29
00:01:30,980 --> 00:01:32,520
這是很重要的觀念

30
00:01:32,520 --> 00:01:34,940
就是說這個ack的number是90

31
00:01:34,940 --> 00:01:38,260
90為什麼是90呢 因為第一個封包本身

32
00:01:39,260 --> 00:01:41,420
它的sequence number是70嘛

33
00:01:41,420 --> 00:01:43,000
那而且它的量是20個bytes

34
00:01:44,000 --> 00:01:46,180
所以它等於說第一個前面

35
00:01:46,180 --> 00:01:47,420
這個封包的sequence number

36
00:01:47,420 --> 00:01:51,819
是從70到89 70到89

37
00:01:51,819 --> 00:01:54,760
所以我這個地方回ack回90代表說

38
00:01:54,760 --> 00:01:57,780
好我現在等的呢是90

39
00:01:57,780 --> 00:02:01,019
也就是90以前的代表89以前的嘛

40
00:02:01,019 --> 00:02:05,340
含89 sequence number 全部都正確的收到

41
00:02:05,340 --> 00:02:08,900
所以這個ack等於90 是非常有特別意義的

42
00:02:08,900 --> 00:02:12,960
就代表說sequence number 90以前的

43
00:02:12,960 --> 00:02:18,259
我通通正確的收到了 那我現在要等你的是

44
00:02:19,259 --> 00:02:21,220
sequence number 90

45
00:02:21,220 --> 00:02:25,740
所以90就代表說90以前的都收到

46
00:02:25,740 --> 00:02:30,000
那我們說這個ack呢 很不巧的這個ack呢

47
00:02:30,000 --> 00:02:31,840
送的時候呢他掉了

48
00:02:32,840 --> 00:02:36,680
那掉了之後呢等一下就會發生timeout啊

49
00:02:36,680 --> 00:02:39,340
所以等一下這個sender呢它就會timeout

50
00:02:39,340 --> 00:02:43,639
timeout之後呢它就再重送一次

51
00:02:43,639 --> 00:02:46,479
那receiver收到這個封包之後呢

52
00:02:46,479 --> 00:02:50,160
一樣它再回一次 這個ack還是90因為

53
00:02:51,160 --> 00:02:54,479
對這個receiver來講

54
00:02:54,479 --> 00:02:58,539
他收到這個重送的封包 它知道這是重送的封包

55
00:02:58,539 --> 00:02:59,720
為什麼他知道呢

56
00:02:59,720 --> 00:03:02,020
因為sequence number跟前面的一樣

57
00:03:02,020 --> 00:03:03,900
所以它也已經收過了

58
00:03:03,900 --> 00:03:05,319
而且這個scenario是一樣

59
00:03:05,319 --> 00:03:08,080
所以它還是回一個這個ack 90

60
00:03:08,080 --> 00:03:11,440
告訴對方說我還是在等90的意思

61
00:03:11,440 --> 00:03:14,340
所以這個ack 90它有雙重意義

62
00:03:14,340 --> 00:03:18,220
一個就是跟對方說90以前的我都收到了

63
00:03:18,220 --> 00:03:21,560
那我現在在等編號90的意思

64
00:03:21,560 --> 00:03:23,460
所以即使它 這個封包

65
00:03:24,460 --> 00:03:27,139
我們說這個封包已經是第二次收到了

66
00:03:27,139 --> 00:03:30,479
但是它還是一樣回這個ack等於90

67
00:03:30,479 --> 00:03:33,680
就是告訴對方說 我還是在等90

68
00:03:33,680 --> 00:03:36,080
等這個sequence number等於90的意思

69
00:03:36,080 --> 00:03:38,060
那我們來看一下右邊這個case

70
00:03:39,060 --> 00:03:42,840
右邊這個例子呢是說 這個ack呢被delay了

71
00:03:42,840 --> 00:03:45,360
因為ack在回給對方的時候

72
00:03:45,360 --> 00:03:48,560
在網路裡面呢被delay 我們看第一個封包呢

73
00:03:48,560 --> 00:03:50,960
一樣他的sequence number還是等於70

74
00:03:50,960 --> 00:03:52,280
然後呢長度是20個bytes

75
00:03:53,280 --> 00:03:56,360
所以它就回一個ack90

76
00:03:56,360 --> 00:03:59,840
那第二個封包呢當然就接下去了嘛

77
00:03:59,840 --> 00:04:03,259
我們剛才特別強調 因為在TCP裡面

78
00:04:03,259 --> 00:04:05,620
每一個byte都有一個sequence number

79
00:04:05,620 --> 00:04:07,460
所以第一個封包呢sequence number

80
00:04:07,460 --> 00:04:10,340
是從70開始然後長度20嘛

81
00:04:10,340 --> 00:04:13,000
所以第二個封包呢它的sequence number

82
00:04:13,000 --> 00:04:14,300
就要從90開始

83
00:04:14,300 --> 00:04:17,680
90就是因為把前面這兩個數字加起來

84
00:04:17,680 --> 00:04:21,680
所以90然後呢假設第二個封包長度呢是10個byte

85
00:04:21,680 --> 00:04:23,779
10個byte所以你注意到

86
00:04:23,779 --> 00:04:25,279
我們看這個ack的部分

87
00:04:26,279 --> 00:04:30,860
針對第一個封包進來我們這個回的是ack是90

88
00:04:30,860 --> 00:04:33,440
90代表說90以前都收到了嘛

89
00:04:33,440 --> 00:04:35,779
好那第二個封包回來的時候

90
00:04:35,779 --> 00:04:37,040
第二個封包進來的時候

91
00:04:37,040 --> 00:04:39,480
我就回ack呢就要變成100

92
00:04:39,480 --> 00:04:43,440
因為我們如果只看這個第二個封包進來的時候

93
00:04:43,440 --> 00:04:46,540
它的sequence number是90然後長度是10嘛

94
00:04:46,540 --> 00:04:49,399
所以是90到99所以我就回100

95
00:04:49,399 --> 00:04:53,199
代表是說100以前的我都收到了

96
00:04:53,199 --> 00:04:57,220
那我們說這兩個封包呢剛好呢 這個ack都delay了

97
00:04:58,220 --> 00:05:03,220
delay就是說在對方timeout之後呢才到

98
00:05:03,220 --> 00:05:06,180
才回到那邊去 所以timeout的時間點在這個地方

99
00:05:07,180 --> 00:05:08,839
就是時間到了之後呢

100
00:05:08,839 --> 00:05:11,899
因為這個sender呢送了兩個封包

101
00:05:11,899 --> 00:05:14,560
好那timeout了所以它就重送嘛

102
00:05:14,560 --> 00:05:16,579
他就重送一個封包過去

103
00:05:17,579 --> 00:05:20,519
那重送過去的時候呢 可是一重送呢

104
00:05:20,519 --> 00:05:22,420
這兩個ack呢就回來了

105
00:05:22,420 --> 00:05:25,300
就發現說這個ack呢在這個地方就回來了

106
00:05:25,300 --> 00:05:28,660
那這個對對這個sender來講的話

107
00:05:28,660 --> 00:05:32,000
只要回來就ok了 它只要收到說ack等於100

108
00:05:33,000 --> 00:05:36,259
它只要收到這個就代表說他前面這兩個封包呢

109
00:05:36,259 --> 00:05:40,560
都已經成功送到對方了 因為他就看這個ack嘛

110
00:05:40,560 --> 00:05:43,899
啊ack等於100就代表他之前送的通通已經

111
00:05:43,899 --> 00:05:48,120
正確了 可是呢對這個receiver來講的話

112
00:05:48,120 --> 00:05:51,220
因為他收到這個所謂的retransmission嘛

113
00:05:51,220 --> 00:05:55,699
因為我們的回的ack呢 被網路上面耽擱了

114
00:05:55,699 --> 00:05:59,339
所以對方就timeout timeout就重送 那重送的封包

115
00:05:59,339 --> 00:06:02,959
還是到我這裡來那我還是回他一個ack 100

116
00:06:02,959 --> 00:06:04,800
我還是回它ack 100啦

117
00:06:04,800 --> 00:06:07,959
那這個也是萬一避免說這兩個ack呢

118
00:06:07,959 --> 00:06:10,120
這兩個ack萬一在網路上面 如果真的掉了話

119
00:06:11,120 --> 00:06:14,380
那我至少最後面這個ack還是可以通知對方

120
00:06:14,380 --> 00:06:17,199
也就是說其實如果我們的ack被delay的話

121
00:06:18,199 --> 00:06:20,040
它整個動作呢還是照樣的進行

122
00:06:21,040 --> 00:06:24,339
這個delay的ack呢如果可以到對方

123
00:06:24,339 --> 00:06:25,860
那也是很好的事情

124
00:06:25,860 --> 00:06:28,980
就是雖然比較晚到 但是一旦到了之後呢

125
00:06:28,980 --> 00:06:32,399
也是告訴對方我這個接收的狀況啦

126
00:06:32,399 --> 00:06:35,980
好那另外還有一個呢 我們就叫做所謂的

127
00:06:35,980 --> 00:06:38,980
所謂的cumulative ack 也就是說TCP裡面

128
00:06:38,980 --> 00:06:42,500
它還試著引用這個所謂的cumulate這個ack的

129
00:06:42,500 --> 00:06:46,459
這個概念也就是說我們這個acknowledgement

130
00:06:46,459 --> 00:06:51,199
本身 會把 會把我過去呢

131
00:06:51,199 --> 00:06:55,100
接收的這個整個歷史 一起回給他的意思

132
00:06:55,100 --> 00:06:57,940
就是這個ack本身的number 就是我們剛剛講

133
00:06:57,940 --> 00:07:01,600
ack裡面帶的這個number 是告訴對方說

134
00:07:01,600 --> 00:07:05,420
這個number以前的我通通都正確收到

135
00:07:05,420 --> 00:07:07,060
這個number 是我接下來想要等的

136
00:07:08,060 --> 00:07:11,920
也就是這個就是所謂的我們講的 cumulate的概念嘛

137
00:07:11,920 --> 00:07:15,279
就是我 不用一個封包一個ack一個封包一個ack

138
00:07:15,279 --> 00:07:19,199
不用 我可以收到很多封包 然後一個ack回去

139
00:07:19,199 --> 00:07:21,079
就可以把這個很多的封包呢

140
00:07:21,079 --> 00:07:23,079
一起 把它做一個確認的意思

141
00:07:24,079 --> 00:07:25,120
像以這個例子來講的話 比如說

142
00:07:26,120 --> 00:07:30,720
我們送的一個封包送過來 然後我回一個ack

143
00:07:30,720 --> 00:07:33,779
那問題這個第一個ack假設他掉了

144
00:07:33,779 --> 00:07:35,279
那對方那當然還不知道

145
00:07:35,279 --> 00:07:37,620
那對方繼續送第二個封包進來

146
00:07:37,620 --> 00:07:39,060
也就是說 這個封包掉了之後呢

147
00:07:40,060 --> 00:07:43,339
對方繼續送第二個封包繼續送啦

148
00:07:43,339 --> 00:07:46,660
繼續過來那我們注意到 我還是回ack

149
00:07:47,660 --> 00:07:49,220
好啊這個ack本身的number是100

150
00:07:50,220 --> 00:07:53,720
100代表是說100以前的 我都收到了嘛

151
00:07:53,720 --> 00:07:56,360
那我們特別強調就是說這個時候

152
00:07:56,360 --> 00:07:58,120
receiver雖然它回了兩個ack

153
00:07:59,120 --> 00:08:01,259
回了兩個ack也就是說一個掉了

154
00:08:01,259 --> 00:08:04,339
但是只要最後一個ack能夠到對方

155
00:08:04,339 --> 00:08:07,000
前面一個ack即使掉了也沒有關係

156
00:08:07,000 --> 00:08:11,519
即使掉了也沒有關係 當然不希望說掉了之後引發了

157
00:08:11,519 --> 00:08:15,480
所謂的timeout啦 所以啦最好是在這個ack

158
00:08:15,480 --> 00:08:18,540
趕快能夠送給對方這樣的話至少

159
00:08:18,540 --> 00:08:21,380
這個ack趕快回去在它timeout之前

160
00:08:21,380 --> 00:08:23,420
到達的話這是最理想

161
00:08:23,420 --> 00:08:29,279
不過特別強調的就是說 我們可以收到很多封包

162
00:08:29,279 --> 00:08:32,480
這樣子那回一個ack就可以了

163
00:08:32,480 --> 00:08:35,940
就是一個ack帶的值 就可以把說

164
00:08:35,940 --> 00:08:38,539
那我前面這些資料呢 通通正確收到

165
00:08:38,539 --> 00:08:40,500
然後又一個ack回去就可以

166
00:08:40,500 --> 00:08:43,399
就是所謂的cumulated ack的這樣的概念

167
00:08:44,399 --> 00:08:46,080
那接下來我們說TCP還有

168
00:08:46,080 --> 00:08:48,320
一個很重要的特性叫做 Fast Retransmission

169
00:08:49,320 --> 00:08:51,880
所謂的Fast Retransmission就是說

170
00:08:51,880 --> 00:08:56,259
我們可不可以不要等到 這個timeout真的發生呢

171
00:08:56,259 --> 00:08:58,620
再來重送封包啦

172
00:08:58,620 --> 00:09:01,080
所以Fast Retransmission就是希望說

173
00:09:01,080 --> 00:09:03,380
能夠比較早一點重送

174
00:09:03,380 --> 00:09:07,340
或者叫作快速重送也就是說 我們說

175
00:09:08,340 --> 00:09:10,740
每一個封包到達了對方呢

176
00:09:10,740 --> 00:09:13,000
那receiver它會回一個我們說

177
00:09:13,000 --> 00:09:14,779
都會回一個acknowledgement嘛

178
00:09:14,779 --> 00:09:16,940
它的做法就是這樣就是說

179
00:09:16,940 --> 00:09:20,559
在Fast Retransmission的做法裡面就是說

180
00:09:20,559 --> 00:09:24,059
receiver每次收到一個封包 它都會回一個ack

181
00:09:25,059 --> 00:09:28,340
每次收到封包都會回一個ack

182
00:09:28,340 --> 00:09:32,720
我們說即使 即使說這個sequenct number

183
00:09:32,720 --> 00:09:34,399
收到這個封包的sequence number呢

184
00:09:34,399 --> 00:09:38,980
他之前已經回應過了 之前已經回應過了

185
00:09:38,980 --> 00:09:41,299
他也是再回一次的意思啦

186
00:09:41,299 --> 00:09:44,480
好那這個是Fast Retransmission裡面

187
00:09:44,480 --> 00:09:47,320
它的必要條件就是說receiver

188
00:09:47,320 --> 00:09:50,179
每收到一個封包他就回一個acknowledgement

189
00:09:51,179 --> 00:09:53,240
那即使說 他現在回的這個

190
00:09:53,240 --> 00:09:55,059
acknowledgement之前已經回應過了

191
00:09:55,059 --> 00:09:57,559
之前已經回覆過了

192
00:09:57,559 --> 00:10:01,940
現在呢還是再回覆一次 那這樣就會說如果說

193
00:10:01,940 --> 00:10:05,960
有一個封包呢它到達這個目的地的時候

194
00:10:05,960 --> 00:10:07,580
到達這個receiver我們說

195
00:10:07,580 --> 00:10:11,659
它假設是out of order代表說它的順序不對

196
00:10:12,659 --> 00:10:15,299
順序不對代表說中間有漏掉的意思

197
00:10:15,299 --> 00:10:19,360
那TCP呢還是回送相同的acknowledgement

198
00:10:20,360 --> 00:10:22,059
這個這個觀念就是這樣就是說

199
00:10:23,059 --> 00:10:25,120
每收到一個封包就會回應 每收到一個就會回應

200
00:10:26,120 --> 00:10:29,740
當我們的封包順序假設呢亂掉的時候呢

201
00:10:29,740 --> 00:10:32,080
我還是會回應 我還是會回應

202
00:10:32,080 --> 00:10:35,399
那這種我們講 第二次這種回應

203
00:10:36,399 --> 00:10:39,380
因為他這個回應跟前面的一樣嘛

204
00:10:39,380 --> 00:10:42,080
因為我們說 收到封包就回應收到封包就回應

205
00:10:43,080 --> 00:10:45,360
那我的封包如果順序倒過來的話

206
00:10:45,360 --> 00:10:47,320
那我會回應兩次一樣的

207
00:10:47,320 --> 00:10:49,059
我會回應兩次一樣 啊這個

208
00:10:50,059 --> 00:10:53,059
兩次一樣的這個第二個 我們就叫duplicate ACK

209
00:10:54,059 --> 00:10:56,019
這是很重要的概念就是等於說

210
00:10:56,019 --> 00:10:58,360
我這個ack呢其實是重複了

211
00:10:58,360 --> 00:11:01,519
重複的ack 那重複的ack呢可以拿來作什麼

212
00:11:02,519 --> 00:11:06,720
也就是說如果我們這個sender本身

213
00:11:06,720 --> 00:11:10,320
也就是說當它看到一個重覆的ack的時候

214
00:11:11,320 --> 00:11:13,440
其實它已經可以大概知道說

215
00:11:14,440 --> 00:11:17,259
這個網路呢封包可能造成所謂的

216
00:11:17,259 --> 00:11:20,880
out of order就是因為這個封包呢

217
00:11:20,880 --> 00:11:25,580
這個可能順序顛倒使得這個receiver呢

218
00:11:25,580 --> 00:11:27,620
送了一個重覆的ack給我

219
00:11:27,620 --> 00:11:30,639
所以看到這個重覆的ack的時候呢

220
00:11:30,639 --> 00:11:34,320
它其實有一點 可以開始猜啦說

221
00:11:34,320 --> 00:11:37,700
欸我之前的封包也有可能已經掉了啦

222
00:11:37,700 --> 00:11:41,240
但是封包也有可能掉了 才造成

223
00:11:41,240 --> 00:11:42,740
這個所謂的重覆的ack

224
00:11:42,740 --> 00:11:45,940
也有可能不是掉剛剛提到只是

225
00:11:45,940 --> 00:11:49,340
有點那個被耽擱啦 就是out of order

226
00:11:49,340 --> 00:11:51,899
out of order代表說順序反過來

227
00:11:51,899 --> 00:11:55,600
但不代表它一定掉 所以它可能是順序倒了

228
00:11:55,600 --> 00:11:59,880
啊可能是真的掉了 所以呢收到一個重複ack的時候呢

229
00:11:59,880 --> 00:12:01,340
等於說不是那麼確定

230
00:12:02,340 --> 00:12:04,539
所以我們如果但是如果說我收到

231
00:12:04,539 --> 00:12:07,639
好幾次的這個重複的ack的時候

232
00:12:07,639 --> 00:12:10,559
我們講some number好幾次

233
00:12:10,559 --> 00:12:13,500
就是重複的ack收到好幾次的話

234
00:12:13,500 --> 00:12:15,700
那我們幾乎可以確認說

235
00:12:15,700 --> 00:12:19,200
這個封包掉了 因為如果封包out of order的話

236
00:12:19,200 --> 00:12:23,220
只是順序不對的話 它應該也快到了嘛

237
00:12:23,220 --> 00:12:26,460
如果他只要一到你就不會收到重複的ack

238
00:12:26,460 --> 00:12:28,019
但是你一直收到重複的ack

239
00:12:29,019 --> 00:12:32,299
其實代表說這個封包可能是真的掉了

240
00:12:32,299 --> 00:12:34,220
那TCP本身的做法是這樣 它就是說

241
00:12:35,220 --> 00:12:39,299
好我如果收到三次的 重覆的ack

242
00:12:40,299 --> 00:12:42,159
就是重複的ack收到三次

243
00:12:43,159 --> 00:12:46,120
我就認定說這個封包是掉的意思

244
00:12:46,120 --> 00:12:49,120
我們有三 three duplicated的ack來解釋

245
00:12:50,120 --> 00:12:51,860
好我們來看一下比如說

246
00:12:51,860 --> 00:12:56,639
首先sender送一個封包 它編號假設是1啦

247
00:12:56,639 --> 00:13:00,039
編號是1 然後我們就回它一個ack 2嘛

248
00:13:00,039 --> 00:13:02,340
代表說 2以前的我都收到

249
00:13:02,340 --> 00:13:05,480
那我在等2的意思 好那我們說注意到

250
00:13:05,480 --> 00:13:08,200
這個時候呢假設這個2呢這個封包掉了

251
00:13:09,200 --> 00:13:12,580
它是真的掉了 然後那接下來我又送3

252
00:13:12,580 --> 00:13:14,820
注意到這個地方就是我們的關鍵點

253
00:13:14,820 --> 00:13:16,700
就是要為了做到這個所謂的

254
00:13:16,700 --> 00:13:18,120
Fast Retransmission我們說

255
00:13:19,120 --> 00:13:21,139
這個receiver呢 收到一個封包它都回ack

256
00:13:22,139 --> 00:13:24,820
好那這個地方就是第一個 我們說這個

257
00:13:24,820 --> 00:13:29,259
這個ack等於2 就是我雖然收到這個封包是3

258
00:13:29,259 --> 00:13:33,539
編號是3的進來 但是我回這個回的是ack等於2

259
00:13:33,539 --> 00:13:37,179
就代表說我還是告訴你2之前的我收到了

260
00:13:38,179 --> 00:13:41,019
那我現在等2 ack 2代表說我在等2的意思

261
00:13:42,019 --> 00:13:46,440
那這個呢就是第一次 第一次重複了

262
00:13:46,440 --> 00:13:49,840
也就是說對這個這個sender來講

263
00:13:49,840 --> 00:13:51,639
他這邊收到一個ack 2

264
00:13:51,639 --> 00:13:53,620
這邊又收到一個ack 2

265
00:13:53,620 --> 00:13:56,700
好接下來sender繼續送封包4

266
00:13:56,700 --> 00:14:01,620
欸這個receiver收到這個4 編號4的封包

267
00:14:01,620 --> 00:14:04,620
它還是回ack 2啊因為它還是說我還在等2

268
00:14:04,620 --> 00:14:06,700
因為2還沒有到嘛還在等2

269
00:14:06,700 --> 00:14:11,200
那這個時候就相當於說 欸它收到了這個兩次了

270
00:14:12,200 --> 00:14:13,980
我們叫duplicate ack了兩次了

271
00:14:13,980 --> 00:14:16,139
假設sender繼續送它的封包

272
00:14:17,139 --> 00:14:20,679
這個5啊這個5送到對方去的時候

273
00:14:20,679 --> 00:14:22,019
對方呢因為2一直沒有到嘛

274
00:14:23,019 --> 00:14:26,080
所以它還是只能回說 ack還是等於2

275
00:14:26,080 --> 00:14:28,279
代表說我還是再等2啊

276
00:14:28,279 --> 00:14:30,399
這個意思我還是等2的意思嘛

277
00:14:30,399 --> 00:14:33,860
好那這個時候這個sender呢

278
00:14:33,860 --> 00:14:35,580
它已經收到第三次了

279
00:14:35,580 --> 00:14:38,380
所以我們這個叫做所謂的three duplicated

280
00:14:38,380 --> 00:14:42,120
這個ack 2 重複三次

281
00:14:42,120 --> 00:14:44,120
就是repeat三次就是

282
00:14:44,120 --> 00:14:48,279
從這個算第一次 這算第二次

283
00:14:48,279 --> 00:14:51,259
這算第三次 就是重複三次啦

284
00:14:51,259 --> 00:14:52,399
好那重複三次就

285
00:14:52,399 --> 00:14:55,159
它就認定說這個2呢這個封包是掉了

286
00:14:56,159 --> 00:14:59,840
所以它就呢 所以它就重送這個封包2

287
00:14:59,840 --> 00:15:02,740
2就重送過來 那特別注意到

288
00:15:02,740 --> 00:15:06,320
這個時候呢如果sender重送2的話

289
00:15:06,320 --> 00:15:07,380
對receiver來講的話

290
00:15:08,380 --> 00:15:12,259
他剛剛收到的3.4.5其實都收到

291
00:15:12,259 --> 00:15:15,399
在等這個2嘛啊這個2 如果現在進來的時候呢

292
00:15:15,399 --> 00:15:18,340
就把這個位址把它補起來

293
00:15:18,340 --> 00:15:22,720
好那一補起來的話呢就相當於2345都收到了

294
00:15:22,720 --> 00:15:26,860
2345都收到所以我們說它回的ack是6

295
00:15:26,860 --> 00:15:31,200
是這樣子的意思 啊這個6就是我們剛剛前面講的

296
00:15:31,200 --> 00:15:34,840
這個叫做所謂的cumulated 就是他累積的意思啦

297
00:15:34,840 --> 00:15:37,519
就是雖然前面的封包收了很多

298
00:15:37,519 --> 00:15:40,799
但是呢我一個ack就可以告訴對方

299
00:15:40,799 --> 00:15:42,679
我現在接收的情形

300
00:15:42,679 --> 00:15:45,259
所以在這裡面我們特別強調 這個

301
00:15:45,259 --> 00:15:47,240
Fast Retransmission本身

302
00:15:47,240 --> 00:15:50,700
只要看到三個就是這三個的意思啦

303
00:15:51,700 --> 00:15:56,380
三個重複的ack我們叫做三個duplicate ack

304
00:15:56,380 --> 00:15:59,340
就代表這個封包呢可能掉了

305
00:16:00,340 --> 00:16:02,840
好那我們就開始重送

306
00:16:02,840 --> 00:16:06,639
所以這個地方 為什麼叫Fast Retransmission

307
00:16:06,639 --> 00:16:09,320
就是說因為我只要看到三個重複的ack

308
00:16:10,320 --> 00:16:13,460
我就認定這個封包掉了我就重送

309
00:16:13,460 --> 00:16:15,380
所以我不用等可能這個本來

310
00:16:15,380 --> 00:16:18,100
timeout的時間在這個地方啦 timeout時間比較長

311
00:16:19,100 --> 00:16:20,539
就我還沒有真的timeout

312
00:16:20,539 --> 00:16:23,460
但是呢我看到了三個重複的ack

313
00:16:23,460 --> 00:16:25,779
所以我就重送的意思

314
00:16:25,779 --> 00:16:27,940
那本來timeout的時間在這裡

315
00:16:27,940 --> 00:16:30,279
那你現在在這個地方就重送了嘛

316
00:16:30,279 --> 00:16:33,299
所以我們說有點是提早重送

317
00:16:33,299 --> 00:16:34,860
或者比較快一點重送

318
00:16:34,860 --> 00:16:37,419
因為你收到三個ack就已經告訴你

319
00:16:37,419 --> 00:16:40,880
那個封包可能掉了 你就不用再等它timeout的意思

320
00:16:40,880 --> 00:16:42,360
所以就提早來重送

321
00:16:42,360 --> 00:16:44,860
這就是非常有名的TCP

322
00:16:44,860 --> 00:16:47,240
所謂的Fast Retransmission的機制

323
00:16:47,240 --> 00:16:49,000
 Subtitles End: mo.dbxdb.com


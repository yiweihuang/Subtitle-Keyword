2
00:00:09,020 --> 00:00:11,700
好我們說這個AIMD的這個做法

3
00:00:11,700 --> 00:00:15,060
就是說每經過一個RTT呢 我們就把

4
00:00:15,060 --> 00:00:16,900
這個congestion window的size

5
00:00:16,900 --> 00:00:19,900
把它增加一個MSS就是一個封包

6
00:00:19,900 --> 00:00:21,440
最大封包的這個量

7
00:00:21,440 --> 00:00:23,760
我們用一個一個動畫來看一下

8
00:00:23,760 --> 00:00:27,000
我們說好首先我們經過一個RTT之後

9
00:00:28,000 --> 00:00:31,400
阿這個時候我就等於說把封包加一個嘛

10
00:00:31,400 --> 00:00:33,780
那我就一開始假設等於1啦

11
00:00:33,780 --> 00:00:36,700
所以一開始呢它只能送一個封包給對方

12
00:00:36,700 --> 00:00:40,340
然後等對方的ack好那經過一個這樣來回之後

13
00:00:40,340 --> 00:00:43,480
我們就把這個congestion window變成

14
00:00:43,480 --> 00:00:46,540
再加一個封包可以變成可以送兩個封包

15
00:00:46,540 --> 00:00:49,300
所以你看 接下來我們就可以送兩個封包

16
00:00:50,300 --> 00:00:53,360
那在經過這兩個封包的的送到對方

17
00:00:53,360 --> 00:00:58,340
然後再回來ack 等於說又經過一個RTT的時間了嘛

18
00:00:58,340 --> 00:01:02,700
那我們說這個時候我 再加一個封包的量進去

19
00:01:02,700 --> 00:01:04,560
變成說我可以送三個封包

20
00:01:05,560 --> 00:01:08,920
等到這個三個封包 再回來之後呢

21
00:01:08,920 --> 00:01:10,640
我就再加一個封包

22
00:01:10,640 --> 00:01:12,160
接下來我們看一下它就變成

23
00:01:13,160 --> 00:01:17,700
我可以送四個封包 所以從前面這個動畫裡面

24
00:01:17,700 --> 00:01:22,840
我們就特別強調是說 每經過一個RTT的時間

25
00:01:22,840 --> 00:01:25,660
我就會說每經過一個RTT的時間呢

26
00:01:25,660 --> 00:01:27,019
我們就會加一個封包的量

27
00:01:28,019 --> 00:01:29,739
給這個congestion window

28
00:01:29,739 --> 00:01:33,079
所以從一開始呢congestion window的量呢

29
00:01:33,079 --> 00:01:34,019
是等於一個MSS

30
00:01:35,019 --> 00:01:37,780
那經過一個RTT呢 就變成兩個

31
00:01:37,780 --> 00:01:40,959
再經過RTT變成三個 然後再RTT變成四個

32
00:01:40,959 --> 00:01:42,800
所以這個congestion window呢

33
00:01:42,800 --> 00:01:45,220
就隨著這個RTTㄧ直增加

34
00:01:45,220 --> 00:01:46,819
我們叫做線性增加

35
00:01:46,819 --> 00:01:49,180
1、2、3、4、5、6、7 也就是說

36
00:01:50,180 --> 00:01:53,440
因為TCP他一開始他也不知道這個網路呢

37
00:01:53,440 --> 00:01:57,300
到底呢可以可以有多快送進去嘛

38
00:01:57,300 --> 00:01:59,540
所以它就加速的意思

39
00:01:59,540 --> 00:02:02,819
就是每一個RTT呢就加大congestion window

40
00:02:02,819 --> 00:02:06,239
那我們說 你的translation rate傳輸的速率呢

41
00:02:07,239 --> 00:02:09,259
就是你的windoe除以RTT嘛

42
00:02:10,259 --> 00:02:14,240
所以congestion window變大就是你的加速

43
00:02:14,240 --> 00:02:16,080
就速度越大的意思

44
00:02:16,080 --> 00:02:17,800
所以一開始congestion window等於1

45
00:02:17,800 --> 00:02:21,720
就是一個MSS 然後呢經過RTT就變2

46
00:02:21,720 --> 00:02:24,479
再來就變3 再來就變4 再來就變5

47
00:02:24,479 --> 00:02:27,340
我就一直這樣一直線性的把它加速加速加速

48
00:02:28,340 --> 00:02:32,599
好那如果網路真的很快而且完全沒有阻塞

49
00:02:32,599 --> 00:02:34,360
那我們就一路衝上去了阿

50
00:02:34,360 --> 00:02:36,039
ㄧ直到甚麼時候剛剛提到

51
00:02:36,039 --> 00:02:40,020
第一個封包掉了 那我們說那你怎麼知道封包掉了

52
00:02:41,020 --> 00:02:45,360
就剛剛講過收到了第一個three duplicated ack

53
00:02:45,360 --> 00:02:48,740
就是我收到了這個ack呢重複的收到三次

54
00:02:48,740 --> 00:02:50,900
代表說我已經衝到了一個

55
00:02:50,900 --> 00:02:52,639
一個速度的上限了嘛

56
00:02:52,639 --> 00:02:55,319
然後現在開始發生了掉封包

57
00:02:55,319 --> 00:02:58,039
我就馬上降一半 我的congestion window

58
00:02:58,039 --> 00:02:59,620
馬上降一半的意思啦

59
00:02:59,620 --> 00:03:01,199
所以這個是AIMD的做法

60
00:03:02,199 --> 00:03:05,280
那這樣的做法當然第一個好處就是說

61
00:03:05,280 --> 00:03:10,419
每經過一個RTT我就增加一個封包大小

62
00:03:10,419 --> 00:03:13,800
每經過一個RTT我就增加一個

63
00:03:13,800 --> 00:03:17,960
可是這樣的做法還是有一點不夠積極啦

64
00:03:17,960 --> 00:03:20,340
也就是說我們這個congestion window呢

65
00:03:20,340 --> 00:03:21,000
是甚麼時候可以增加

66
00:03:22,000 --> 00:03:24,840
就是一個RTT之後再增加

67
00:03:24,840 --> 00:03:28,440
就是每經過一個RTT才增加嘛

68
00:03:28,440 --> 00:03:32,860
那我們可不可以有一個更細膩的方法

69
00:03:32,860 --> 00:03:36,560
就是說那我RT 這個congestion window增加

70
00:03:36,560 --> 00:03:40,039
可不可以不要等一個RTT之後才加

71
00:03:41,039 --> 00:03:43,800
我可不可以每一個ack進來我就加

72
00:03:43,800 --> 00:03:45,380
因為事實上我們剛剛提到

73
00:03:45,380 --> 00:03:47,419
就是說 這個是一個RTT的時間

74
00:03:47,419 --> 00:03:50,800
我送封包可能會有ack 可能會有ack 可能會有ack嘛

75
00:03:50,800 --> 00:03:54,400
阿最後一個RTT我才加congestion window嘛

76
00:03:54,400 --> 00:03:56,660
加一個這個pocket size

77
00:03:56,660 --> 00:03:59,599
那我們就說我們 這個機制是變成說

78
00:03:59,599 --> 00:04:06,259
我不要等所有的ack都收到 才加一個pocket的size

79
00:04:06,259 --> 00:04:07,319
比如說我們這句話

80
00:04:07,319 --> 00:04:10,240
不等所有的ack都收到才加

81
00:04:11,240 --> 00:04:14,400
而是說每收到一個ack呢我就先加ㄧ部分

82
00:04:15,400 --> 00:04:17,779
因為這個封包呢進來

83
00:04:17,779 --> 00:04:19,399
ack會陸陸續續的進來嘛

84
00:04:20,399 --> 00:04:23,440
那我們如果等所有ack都收到才加

85
00:04:23,440 --> 00:04:26,720
阿等於說這個加的動作就有點比較慢了

86
00:04:26,720 --> 00:04:28,220
那這個影響甚麼

87
00:04:28,220 --> 00:04:32,180
影響到sender傳送的這個資料的時間點嘛

88
00:04:32,180 --> 00:04:35,839
也就congestion window越早 如果可以加

89
00:04:35,839 --> 00:04:38,839
越早加那我們就可以提早送的意思

90
00:04:38,839 --> 00:04:41,759
提早送就可以增加這個整個傳輸的速度阿

91
00:04:41,759 --> 00:04:46,660
也不用在那邊等 也就是說例如說假設這個時候

92
00:04:46,660 --> 00:04:51,540
congestion window它等於五倍的MSS的大小

93
00:04:51,540 --> 00:04:54,319
因為我們知道congestion window本身是一個量

94
00:04:54,319 --> 00:04:57,819
假設等於5個MSS 好那也就是說

95
00:04:57,819 --> 00:05:02,459
我們每收到一個ack呢 我就會加五分之ㄧ的意思

96
00:05:03,459 --> 00:05:05,600
因為我們通常剛剛提到

97
00:05:05,600 --> 00:05:08,660
ㄧ個MSS呢就是一個封包的最大了

98
00:05:08,660 --> 00:05:13,600
五個MSS就代表說 那你至少要送 五個封包

99
00:05:14,600 --> 00:05:16,800
我們注意到TCP本身

100
00:05:16,800 --> 00:05:20,339
一個封包的大小 它有限制的啦

101
00:05:20,339 --> 00:05:23,899
最大是MSS也就是說如果我們的

102
00:05:23,899 --> 00:05:26,660
congestion window是五倍的MSS

103
00:05:26,660 --> 00:05:29,819
就代表說 至少要送五個封包

104
00:05:29,819 --> 00:05:32,300
你可以送十個封包嘛 一個封包不要這麼大

105
00:05:33,300 --> 00:05:36,160
但是呢一個封包最大就是MSS

106
00:05:36,160 --> 00:05:37,920
所以當我的congestion window等於

107
00:05:37,920 --> 00:05:42,480
五倍的MSS的時候 我們至少要送五個封包

108
00:05:42,480 --> 00:05:45,779
那你送了五個封包過去 按照我們剛剛講的

109
00:05:45,779 --> 00:05:48,880
你送五個封包 你應該要收到五個ack

110
00:05:48,880 --> 00:05:51,620
五個ack嘛 也就是說我們就說

111
00:05:51,620 --> 00:05:53,720
每收到一個ack我就先加五分之ㄧ

112
00:05:54,720 --> 00:05:57,339
那你收了五個ack呢就加一個MSS

113
00:05:57,339 --> 00:05:58,220
就是五分之一乘上五

114
00:05:59,220 --> 00:06:00,959
這個就是符合我們剛剛講的

115
00:06:00,959 --> 00:06:04,579
就是一個RTT呢就加一個MSS嘛

116
00:06:04,579 --> 00:06:08,519
所以我們如果說我們的congestion window

117
00:06:08,519 --> 00:06:10,380
等於五倍的MSS的話

118
00:06:11,380 --> 00:06:16,459
我們應該 要收到比如說五個ack的意思啦

119
00:06:16,459 --> 00:06:17,800
那你收到五個ack

120
00:06:17,800 --> 00:06:21,800
我們說每收到一個ack呢就先加五分之ㄧ的意思

121
00:06:21,800 --> 00:06:23,660
阿再舉個例子比如說

122
00:06:24,660 --> 00:06:27,319
同樣的 如果我們的congestion window呢

123
00:06:27,319 --> 00:06:29,899
這個時候呢已經是八個MSS

124
00:06:29,899 --> 00:06:31,199
代表說我會送八個封包去

125
00:06:32,199 --> 00:06:33,699
那我會收八個ack

126
00:06:33,699 --> 00:06:36,220
那我就呢每一個ack收到的時候

127
00:06:36,220 --> 00:06:38,459
我就先加八分之ㄧ啦

128
00:06:38,459 --> 00:06:41,480
那這樣我就可以讓這個congestion window呢

129
00:06:41,480 --> 00:06:45,600
就有點提早增加 阿因為你一提早增加

130
00:06:45,600 --> 00:06:47,759
sender就可以多送資料出去

131
00:06:47,759 --> 00:06:50,819
所以提早增加就可以提早傳送

132
00:06:50,819 --> 00:06:54,440
那提早傳送就可以加速這個整個

133
00:06:54,440 --> 00:06:56,600
這個傳速的這個整個過程嘛

134
00:06:56,600 --> 00:06:57,199
其實對比較有利

135
00:06:58,199 --> 00:07:01,740
好所以我們說 這個每收到ㄧ個

136
00:07:01,740 --> 00:07:04,180
ㄧ個ack呢就加幾分之幾

137
00:07:04,180 --> 00:07:07,560
這樣的一個動作我們就把這個幾分之幾

138
00:07:07,560 --> 00:07:09,740
把它變成叫做increment

139
00:07:09,740 --> 00:07:12,680
這個increment就相當於你要加的這個量

140
00:07:12,680 --> 00:07:14,540
這個量的算法就是這樣嘛

141
00:07:14,540 --> 00:07:18,779
就是這個congestion window分之這個MSS

142
00:07:18,779 --> 00:07:21,779
乘上MSS 這個很容易理解

143
00:07:21,779 --> 00:07:22,160
像這個例子就是說

144
00:07:23,160 --> 00:07:25,459
如果你的congestion window是等於五的話

145
00:07:25,459 --> 00:07:26,360
把這個五代進來

146
00:07:27,360 --> 00:07:29,699
這就是五分之ㄧ的意思啦

147
00:07:29,699 --> 00:07:32,480
那如果你的congestion window是八的話

148
00:07:32,480 --> 00:07:35,899
我們把這個八 把它代進來這裡

149
00:07:35,899 --> 00:07:37,120
阿這個ㄧ除就是八分之一

150
00:07:38,120 --> 00:07:41,860
就是說假設呢你這個congestion window本身

151
00:07:41,860 --> 00:07:46,040
現在是八 那你每收到一個ack就加八分之一啦

152
00:07:46,040 --> 00:07:47,300
有這樣的一個概念

153
00:07:47,300 --> 00:07:50,199
所以我們就把這個congestion window呢就等於

154
00:07:50,199 --> 00:07:53,380
每收到一個ack 就是加上這個increament

155
00:07:53,380 --> 00:07:55,259
就是加上這個幾分之ㄧ

156
00:07:55,259 --> 00:07:59,100
這樣的話就可以讓這個 我們的congestion window

157
00:07:59,100 --> 00:08:01,519
比較提早來增加

158
00:08:01,519 --> 00:08:04,279
那提早增加就是提早slide window

159
00:08:04,279 --> 00:08:05,920
這個window就提早滑動

160
00:08:05,920 --> 00:08:07,899
提早滑動就可以提早傳送

161
00:08:07,899 --> 00:08:10,279
對增加整個網路的效能是有幫助的

162
00:08:11,279 --> 00:08:16,300
好所以我們就一個圖 來解釋說這個AIMD

163
00:08:16,300 --> 00:08:18,019
它怎麼做 好那我們說這個圖呢

164
00:08:19,019 --> 00:08:22,279
橫軸是隨著時間 那縱軸呢

165
00:08:22,279 --> 00:08:23,920
是它的congestion window

166
00:08:23,920 --> 00:08:26,819
那congestion window呢ㄧ開始比如說是1啦

167
00:08:26,819 --> 00:08:29,120
好那接下來他就會隨著時間呢

168
00:08:29,120 --> 00:08:34,600
就一直往上加嘛 然後碰到封包lost它就下降一半

169
00:08:34,600 --> 00:08:38,220
然後再呢再往上加 如果再lost再降一半

170
00:08:38,220 --> 00:08:41,120
再往上長 再降一半這樣子

171
00:08:41,120 --> 00:08:44,659
所以在這個圖裡面 我們這個動畫裡面呢

172
00:08:44,659 --> 00:08:45,399
跟各位介紹是說

173
00:08:46,399 --> 00:08:49,019
這個ㄧ開始呢 我的window呢就往上長

174
00:08:50,019 --> 00:08:52,120
那這個地方所謂的pocket lost

175
00:08:53,120 --> 00:08:54,639
pocket lost就是我們講的

176
00:08:54,639 --> 00:08:57,320
我收到了 三個duplicated的ack

177
00:08:58,320 --> 00:09:00,019
好我如果收到三個duplicated的ack

178
00:09:00,019 --> 00:09:02,019
我就降一半 這個降一半

179
00:09:02,019 --> 00:09:05,679
然後再長再降一半 再長再降一半就這樣子

180
00:09:05,679 --> 00:09:08,120
所以整個來看它就是ㄧ個 我們叫好像

181
00:09:09,120 --> 00:09:12,139
鋸齒狀的 像那個鋸齒ㄧ樣

182
00:09:12,139 --> 00:09:14,519
這樣這樣這樣這樣這樣這樣這樣長上去

183
00:09:14,519 --> 00:09:19,240
就是說linear的增加 可是呢每次降都降一半

184
00:09:19,240 --> 00:09:21,519
linear的增加 然後降一半這樣子

185
00:09:21,519 --> 00:09:24,340
阿至於說這個降下來的這個點

186
00:09:24,340 --> 00:09:26,940
我們有這個點不ㄧ定

187
00:09:26,940 --> 00:09:29,500
要看網路的網路的這個壅擠的程度

188
00:09:29,500 --> 00:09:31,820
如果網路呢 ㄧ開始很流暢

189
00:09:31,820 --> 00:09:34,519
它可以衝到很高 然後再掉下來

190
00:09:34,519 --> 00:09:36,740
阿也有可能這個TCP建連線的時候呢

191
00:09:36,740 --> 00:09:38,080
網路已經很阻 已經很壅塞了

192
00:09:39,080 --> 00:09:41,559
那可能衝一下下它就掉下來了

193
00:09:41,559 --> 00:09:43,700
就不ㄧ定 每一個connection呢

194
00:09:43,700 --> 00:09:46,139
它的這個實際的這個結果呢

195
00:09:46,139 --> 00:09:49,240
是根據這個網路的壅擠的狀態

196
00:09:49,240 --> 00:09:53,460
來反映的 所以不ㄧ定每一個人的曲線

197
00:09:53,460 --> 00:09:56,299
這個都一樣 事實上不一定會一樣

198
00:09:56,299 --> 00:09:58,000
 Subtitles End: mo.dbxdb.com


1
00:00:09,1 --> 00:00:13,78
好 那接下來我們來介紹所謂的OSI的網路的結構

2
00:00:13,78 --> 00:00:16,61
那所謂的OSI我們說就是所謂的

3
00:00:16,61 --> 00:00:19,21
open system interconnection

4
00:00:19,21 --> 00:00:22,55
等於說一個開放系統的連接的標準啦

5
00:00:22,55 --> 00:00:25,8
那這個標準的組織叫做ISO

6
00:00:25,8 --> 00:00:27,88
倒過來 叫international standard organization

7
00:00:27,88 --> 00:00:30,91
那ISO的OSI model

8
00:00:30,91 --> 00:00:33,61
他把這個整個網路的功能

9
00:00:33,61 --> 00:00:35,81
把他分成所謂的七層

10
00:00:35,81 --> 00:00:38,45
叫做所謂的seven layer的這個model

11
00:00:38,45 --> 00:00:41,5
所以我們看一下這個例子裡面

12
00:00:41,5 --> 00:00:43,71
我們在最左邊跟最右邊呢

13
00:00:43,71 --> 00:00:46,77
他們都是兩台 我們所謂的主機

14
00:00:46,78 --> 00:00:48,1
或者所謂的電腦

15
00:00:48,1 --> 00:00:50,74
可能是桌上型的電腦 可能是我們的筆電

16
00:00:50,75 --> 00:00:53,18
或者是我們的手機 都算

17
00:00:53,18 --> 00:00:56,71
就是最末端的使用的這個設備

18
00:00:56,71 --> 00:01:00,10
那他們都要有這個所謂的seven layer

19
00:01:00,11 --> 00:01:02,65
我們所謂的七層 那這個七層裡面

20
00:01:02,65 --> 00:01:06,85
最底層最底層 我們叫做所謂的physical layer

21
00:01:06,85 --> 00:01:09,20
我們看一下 physical layer在最下面

22
00:01:09,21 --> 00:01:11,98
那physical layer我們叫做實體層

23
00:01:11,98 --> 00:01:13,18
那他意思就是說

24
00:01:13,18 --> 00:01:17,28
我兩台電腦之間 或者兩個設備之間

25
00:01:17,28 --> 00:01:20,68
我要怎麼樣把資料送到對方去

26
00:01:20,68 --> 00:01:22,95
那我們是透過有線的

27
00:01:22,95 --> 00:01:26,11
像我們 有線的東西包含是說

28
00:01:26,11 --> 00:01:29,71
譬如說同軸電纜啦或者光纖啦

29
00:01:29,71 --> 00:01:32,88
或者一般銅線 甚至無線

30
00:01:32,88 --> 00:01:35,18
透過 像現在的這個無線網路

31
00:01:35,18 --> 00:01:39,18
這些實體的媒介 都是所謂的physical layer

32
00:01:39,18 --> 00:01:41,31
這個比較詳細的部分

33
00:01:41,31 --> 00:01:43,58
我們後面會來介紹 就是說

34
00:01:43,58 --> 00:01:45,98
我們把整個網路的功能呢

35
00:01:45,98 --> 00:01:49,75
分成最底層的叫做physical layer

36
00:01:49,75 --> 00:01:51,38
所以physical layer談的是說

37
00:01:51,38 --> 00:01:54,88
那我怎麼樣把訊號送到對方去

38
00:01:54,88 --> 00:01:57,38
這個訊號可能就是一般我們這種

39
00:01:57,38 --> 00:01:59,15
所謂的binary的訊號啦

40
00:01:59,15 --> 00:02:02,31
怎麼送給對方 那這是第一層

41
00:02:02,31 --> 00:02:04,31
那第二層呢 一般我們叫做所謂的

42
00:02:04,31 --> 00:02:06,68
data link layer 在這個地方

43
00:02:06,68 --> 00:02:08,48
data link layer談的是說

44
00:02:08,48 --> 00:02:12,35
那我怎麼把資料丟給下一個

45
00:02:12,35 --> 00:02:13,91
我們講直接連接的

46
00:02:13,91 --> 00:02:16,75
不管是設備 還是一個主機

47
00:02:16,75 --> 00:02:19,7
所以data link layer談的是說

48
00:02:19,8 --> 00:02:22,8
那我怎麼把資料丟到下一台 連接的電腦

49
00:02:22,8 --> 00:02:25,21
那再上來就是所謂的network layer

50
00:02:25,21 --> 00:02:27,35
那network layer談的是說

51
00:02:27,35 --> 00:02:30,28
好 剛剛講 對不起 剛剛data link layer

52
00:02:30,28 --> 00:02:32,97
談的是說我怎麼把這個資料

53
00:02:32,98 --> 00:02:34,45
我們一般叫做所謂的frame

54
00:02:34,45 --> 00:02:38,67
丟給下一個 就因為我們的網路可能很遠嘛

55
00:02:38,68 --> 00:02:42,21
譬如說我們從東邊送到西邊

56
00:02:42,21 --> 00:02:46,5
這個可能跨了整個地球 非常遠

57
00:02:46,5 --> 00:02:48,58
可是我中間會經過很多很多網路

58
00:02:48,58 --> 00:02:50,97
那data link layer談的就是說

59
00:02:50,98 --> 00:02:54,55
那你怎麼往前送一步 往前送一步

60
00:02:54,55 --> 00:02:57,15
譬如說我們講 中間假設有很多router

61
00:02:57,15 --> 00:02:59,67
我們這個路線上 我們假設

62
00:02:59,68 --> 00:03:01,38
中間要經過十個router

63
00:03:01,38 --> 00:03:03,95
那你每送給一個router

64
00:03:03,95 --> 00:03:06,85
這個就是一個所謂的data link layer

65
00:03:06,85 --> 00:03:08,71
你往前送一步的意思

66
00:03:08,71 --> 00:03:11,11
那network layer談的是說

67
00:03:11,11 --> 00:03:14,81
那我怎麼樣把一個所謂的packet 一個封包

68
00:03:14,81 --> 00:03:17,35
怎麼把他送到對方去

69
00:03:17,35 --> 00:03:21,38
所以他談的是更遠的 就是說

70
00:03:21,38 --> 00:03:24,98
data link layer談的是你怎麼送給

71
00:03:24,98 --> 00:03:28,18
直接連接的下一個 送給下一個

72
00:03:28,18 --> 00:03:29,85
這個叫data link layer

73
00:03:29,85 --> 00:03:31,48
那network layer談的是說

74
00:03:31,48 --> 00:03:33,18
那我怎麼送到最遠的那個目的地

75
00:03:33,18 --> 00:03:35,45
怎麼送到最遠的目的地

76
00:03:35,45 --> 00:03:37,60
所以一個是直接一段

77
00:03:37,61 --> 00:03:39,81
data link 談的是送一段

78
00:03:39,81 --> 00:03:45,15
network layer談的是送整條路線 啊怎麼送

79
00:03:45,15 --> 00:03:47,58
譬如說我要選什麼路線

80
00:03:47,58 --> 00:03:49,21
這個也牽涉到所謂的routing

81
00:03:49,21 --> 00:03:52,77
我到底要怎麼送 那經過哪些router

82
00:03:52,78 --> 00:03:54,61
因為Internet 他這個連結

83
00:03:54,61 --> 00:03:57,18
非常的大 那路線也非常的多

84
00:03:57,18 --> 00:03:59,68
那我們到底要走哪一條路線比較快啊

85
00:03:59,68 --> 00:04:02,65
或者哪一條路線呢 至少或是比較便宜啊

86
00:04:02,65 --> 00:04:04,48
這個有很多不同的考量

87
00:04:04,48 --> 00:04:06,61
所以network layer談的是說

88
00:04:06,61 --> 00:04:09,35
我怎麼樣選擇路線

89
00:04:09,35 --> 00:04:12,35
然後把這個所謂的packet 一個封包

90
00:04:12,35 --> 00:04:14,88
能夠送到我真正的

91
00:04:14,88 --> 00:04:17,48
我們叫做目的地的這個host

92
00:04:17,48 --> 00:04:18,67
或者叫目的地的主機

93
00:04:18,67 --> 00:04:20,67
就送到最遠的對方

94
00:04:20,67 --> 00:04:22,48
阿這個是所謂的network layer

95
00:04:22,48 --> 00:04:26,5
那transport layer在上一層 那談的是說

96
00:04:26,5 --> 00:04:28,45
因為每一個主機本身

97
00:04:28,45 --> 00:04:30,51
上面可能會跑很多不同的應用

98
00:04:30,51 --> 00:04:32,91
像我們一台電腦 可能我們會上瀏覽器

99
00:04:32,91 --> 00:04:35,31
browser 我可能會上其他的

100
00:04:35,31 --> 00:04:37,5
譬如說玩online game

101
00:04:37,5 --> 00:04:40,21
或者我在用其他的檔案的傳輸

102
00:04:40,21 --> 00:04:41,55
我有各式各樣的應用

103
00:04:41,55 --> 00:04:44,5
那每一種應用本身

104
00:04:44,5 --> 00:04:45,55
在用這個網路的時候呢

105
00:04:45,55 --> 00:04:46,95
我可能有不同的需求

106
00:04:46,95 --> 00:04:49,65
譬如說 如果我做檔案傳輸

107
00:04:49,65 --> 00:04:51,70
那我這個一定要非常的可靠

108
00:04:51,71 --> 00:04:54,11
因為檔案的內容不可以有錯誤嘛

109
00:04:54,11 --> 00:04:56,41
那如果我是在看一個video

110
00:04:56,41 --> 00:04:58,94
譬如說我在看一個 譬如說看一個youtube

111
00:04:58,95 --> 00:05:01,8
那youtube的這個封包在送的時候呢

112
00:05:01,8 --> 00:05:03,80
因為他是所謂的video

113
00:05:03,81 --> 00:05:05,88
或者audio就聲音或影像

114
00:05:05,88 --> 00:05:09,41
或者視訊  那稍微如果封包內容

115
00:05:09,41 --> 00:05:10,38
如果稍微掉了一點

116
00:05:10,38 --> 00:05:12,95
或者說錯掉一點 他還可以忍受

117
00:05:12,95 --> 00:05:16,81
因為我們的這個耳朵 有時候沒有靈敏到

118
00:05:16,81 --> 00:05:18,28
差一點點也是聽不出來的

119
00:05:18,28 --> 00:05:19,71
啊或者如果是這個video

120
00:05:19,71 --> 00:05:22,15
如果稍微 封包內容掉了

121
00:05:22,15 --> 00:05:26,27
那我可能會 譬如說 畫面稍微不清晰

122
00:05:26,28 --> 00:05:27,75
但是畫面這麼大

123
00:05:27,75 --> 00:05:30,38
一小塊不清晰 眨眼就過去了

124
00:05:30,38 --> 00:05:31,85
所以你也不會那麼在意

125
00:05:31,85 --> 00:05:33,27
或者你也根本看不出來

126
00:05:33,28 --> 00:05:35,68
所以有些資料呢

127
00:05:35,68 --> 00:05:38,80
他在傳輸的時候呢 是一點都不能錯

128
00:05:38,81 --> 00:05:41,51
譬如說檔案內容是絕對不能錯的

129
00:05:41,51 --> 00:05:42,80
一個bit都不能錯

130
00:05:42,81 --> 00:05:45,61
那視訊的東西 聲音的東西

131
00:05:45,61 --> 00:05:48,10
他可以容忍一些錯誤啦

132
00:05:48,11 --> 00:05:51,41
那這個不管你在傳輸的時候

133
00:05:51,41 --> 00:05:53,85
是一點都不能錯

134
00:05:53,85 --> 00:05:56,1
或者說可以部分錯誤呢

135
00:05:56,1 --> 00:05:59,48
那這個東西呢我們都是透過所謂的transport layer

136
00:05:59,48 --> 00:06:01,75
所以transport layer本身

137
00:06:01,75 --> 00:06:06,18
就是負責幫我們把資料 送給對方

138
00:06:06,18 --> 00:06:10,37
而對方 到底要可靠的傳輸

139
00:06:10,38 --> 00:06:11,65
或者不可靠的傳輸

140
00:06:11,65 --> 00:06:14,1
這是兩種不同的服務

141
00:06:14,1 --> 00:06:15,80
如果你要可靠的傳輸

142
00:06:15,81 --> 00:06:17,81
我們說這個transport layer呢

143
00:06:17,81 --> 00:06:20,81
他有類似像TCP的這樣的一個protocol

144
00:06:20,81 --> 00:06:24,41
提供非常可靠的傳輸 一個bit都不會錯

145
00:06:24,41 --> 00:06:26,75
那如果你這個應用呢

146
00:06:26,75 --> 00:06:28,98
不太需要非常可靠的傳輸

147
00:06:28,98 --> 00:06:30,85
我們說你可以用UDP

148
00:06:30,85 --> 00:06:35,10
他就會盡量幫你送 那我們叫做盡力試啦

149
00:06:35,11 --> 00:06:37,5
一般叫做所謂best effort

150
00:06:37,5 --> 00:06:39,15
他會盡可能地幫你送到對方

151
00:06:39,15 --> 00:06:42,8
但是在傳送的過程當中

152
00:06:42,8 --> 00:06:43,97
因為要經過整個Internet嘛

153
00:06:43,98 --> 00:06:47,98
經過這麼大的網路 中間可能有各種干擾

154
00:06:47,98 --> 00:06:51,1
不管是阻塞或者訊號的干擾

155
00:06:51,1 --> 00:06:55,78
這個封包可能就會掉了 或者會錯誤掉被丟棄

156
00:06:55,78 --> 00:06:58,27
那如果是不可靠的傳輸

157
00:06:58,28 --> 00:07:00,31
所謂的盡力試就是說 那他就盡量幫你送

158
00:07:00,31 --> 00:07:03,58
送的到就送的到 送不到也就沒辦法

159
00:07:03,58 --> 00:07:07,65
就盡力嘛 那你就可以用UDP

160
00:07:07,65 --> 00:07:10,15
所以TCP本身跟UDP本身

161
00:07:10,15 --> 00:07:12,91
我們說他都是transport layer的服務

162
00:07:12,91 --> 00:07:15,85
所以這個就是所謂的transport layer的服務

163
00:07:15,85 --> 00:07:19,48
那他是只有在兩端的host

164
00:07:19,48 --> 00:07:21,21
才有這個transport layer

165
00:07:21,21 --> 00:07:24,41
那中間的 這個網路的設備呢

166
00:07:24,41 --> 00:07:26,61
我們說會有很多的router

167
00:07:26,61 --> 00:07:31,70
剛剛提到 譬如說我們從一個東岸送到西岸

168
00:07:31,71 --> 00:07:33,98
可能我要經過六七個router

169
00:07:33,98 --> 00:07:37,18
從地球的一端送到地球另外一端

170
00:07:37,18 --> 00:07:38,85
我可能要經過更多的router

171
00:07:38,85 --> 00:07:40,94
也許十來個 也許二十個router

172
00:07:40,95 --> 00:07:44,55
所以根據我們送的這個距離的遠近

173
00:07:44,55 --> 00:07:48,35
遠近本身經過的router的數量是不一樣

174
00:07:48,35 --> 00:07:51,15
那最主要 我們這個分成七層

175
00:07:51,15 --> 00:07:55,55
就是每一層每一層 負責自己的事情

176
00:07:55,55 --> 00:07:58,91
所以我們特別強調說這種layer的觀念就是說

177
00:07:58,91 --> 00:08:06,48
每一個layer都是利用下一層layer所提供的服務

178
00:08:06,48 --> 00:08:10,45
然後呢 提供給上一層服務 就是說

179
00:08:10,45 --> 00:08:13,61
再講一遍就是說 每一個layer做什麼事呢

180
00:08:13,61 --> 00:08:18,44
他就是利用它下面這一層所提供給他的服務

181
00:08:18,45 --> 00:08:22,31
然後來提供上一層的服務

182
00:08:22,31 --> 00:08:25,41
我們再簡單講一下 譬如說

183
00:08:25,41 --> 00:08:27,91
我們講IP layer做什麼事

184
00:08:27,91 --> 00:08:30,11
IP layer 就是所謂的network layer

185
00:08:30,11 --> 00:08:34,5
這個layer就是說 他收到一個資料

186
00:08:34,5 --> 00:08:37,30
那他要把這個資料呢 經過這個routing

187
00:08:37,30 --> 00:08:42,5
然後送到對方去 然後network layer本身

188
00:08:42,5 --> 00:08:44,5
他在做這件事情的時候

189
00:08:44,5 --> 00:08:47,38
我們說 他會經過很多router 幫我們轉送

190
00:08:47,38 --> 00:08:50,8
那router本身就是幫我選擇路徑

191
00:08:50,8 --> 00:08:54,45
因為選擇 因為我們網路的狀況是動態的

192
00:08:54,45 --> 00:08:56,58
可能這條路現在很快

193
00:08:56,58 --> 00:08:59,40
可能下一秒鐘他就變很慢

194
00:08:59,41 --> 00:09:01,75
因為大家都往這邊擠進來

195
00:09:01,75 --> 00:09:04,85
那我可能就要換另外一條路 也就是說

196
00:09:04,85 --> 00:09:07,51
這個路徑的選擇 他是動態的

197
00:09:07,51 --> 00:09:11,78
但是呢 他又是不可靠的 就是說

198
00:09:11,78 --> 00:09:14,91
我們進到這個router之後 可能因為

199
00:09:14,91 --> 00:09:18,78
譬如說阻塞 然後我這個封包被router丟棄了

200
00:09:18,78 --> 00:09:20,18
那也有可能在

201
00:09:20,18 --> 00:09:23,8
中間這個link的時候 說我們這個封包

202
00:09:23,8 --> 00:09:24,11
譬如說在這個地方

203
00:09:24,11 --> 00:09:26,28
這個在送的時候這個地方被干擾

204
00:09:26,28 --> 00:09:27,78
譬如說有雜訊

205
00:09:27,78 --> 00:09:29,25
那你的封包就錯掉了

206
00:09:29,25 --> 00:09:33,28
那他也就等於說沒有辦法送到目的地啦

207
00:09:33,28 --> 00:09:36,35
也就是說 我們如果這樣子切下來

208
00:09:36,35 --> 00:09:38,74
那這一層 我們叫做IP層

209
00:09:38,75 --> 00:09:41,48
把他切一條線 畫一條線 說

210
00:09:41,48 --> 00:09:44,95
你的transport layer丟給network layer

211
00:09:44,95 --> 00:09:46,55
那我的network layer想辦法

212
00:09:46,55 --> 00:09:49,80
就是你這邊進來 我想辦法從這邊出來嘛

213
00:09:49,81 --> 00:09:51,58
就是這個進出

214
00:09:51,58 --> 00:09:54,31
我們希望你丟給network layer的

215
00:09:54,31 --> 00:09:56,35
等下從network能夠出得來

216
00:09:56,35 --> 00:09:57,88
但是我們就是說

217
00:09:57,88 --> 00:09:59,60
好 這個network layer的服務呢

218
00:09:59,61 --> 00:10:03,8
他是你進得來不見得出的來

219
00:10:03,8 --> 00:10:05,45
也就是說他是一個不可靠的服務

220
00:10:05,45 --> 00:10:07,55
因為他進到這裡面來的時候呢

221
00:10:07,55 --> 00:10:10,68
可能會中間就不見了

222
00:10:10,68 --> 00:10:13,31
就是說你丟給network layer的資料

223
00:10:13,31 --> 00:10:15,25
不見得對方

224
00:10:15,25 --> 00:10:17,95
對方這個network layer這邊

225
00:10:17,95 --> 00:10:19,95
他不見得能夠出得來

226
00:10:19,95 --> 00:10:20,75
可能會不見

227
00:10:20,75 --> 00:10:22,71
就是說他是一個不可靠的服務

228
00:10:22,71 --> 00:10:24,55
那我們再來看

229
00:10:24,55 --> 00:10:26,50
如果我們再畫另外一條線

230
00:10:26,51 --> 00:10:29,18
這條線我們往上話 我們畫到這裡來

231
00:10:29,18 --> 00:10:32,58
TCP 假設他是TCP

232
00:10:32,58 --> 00:10:34,91
那TCP是什麼意思呢 就是說 好

233
00:10:34,91 --> 00:10:38,15
TCP呢 你交給我 交給這個TCP啦

234
00:10:38,15 --> 00:10:41,15
那我等下從這個TCP送上來的時候

235
00:10:41,15 --> 00:10:44,11
TCP他是一個非常可靠的服務喔

236
00:10:44,11 --> 00:10:46,45
所以你交給他什麼東西

237
00:10:46,45 --> 00:10:50,27
等下從另外一邊的TCP他就要上來什麼東西喔

238
00:10:50,28 --> 00:10:51,81
就是你交給他的內容

239
00:10:51,81 --> 00:10:56,1
包括你的封包的內容 封包的大小

240
00:10:56,1 --> 00:10:58,15
怎麼進來要怎麼出去

241
00:10:58,15 --> 00:11:00,68
所以他是一個非常非常可靠的

242
00:11:00,68 --> 00:11:03,78
但是我們剛剛這樣講 我們畫兩條線

243
00:11:03,78 --> 00:11:06,88
TCP是要提供很可靠的服務

244
00:11:06,88 --> 00:11:10,68
可是TCP他往下看的時候呢

245
00:11:10,68 --> 00:11:13,64
這個IP呢是不可靠的服務

246
00:11:13,65 --> 00:11:16,68
所以你看TCP他該怎麼辦

247
00:11:16,68 --> 00:11:17,58
也就是說

248
00:11:17,58 --> 00:11:22,28
TCP他必須提供他的上層可靠的傳輸

249
00:11:22,28 --> 00:11:24,85
可是他的下層 是不可靠的

250
00:11:24,85 --> 00:11:28,8
那他必須想辦法 就是說

251
00:11:28,8 --> 00:11:30,1
他如果依賴下層不可靠

252
00:11:30,1 --> 00:11:32,15
他能提供的服務就是不可靠

253
00:11:32,15 --> 00:11:34,58
那可是他又要提供可靠啊

254
00:11:34,58 --> 00:11:37,58
所以變成說他自己TCP就

255
00:11:37,58 --> 00:11:39,18
非常非常的關鍵就是說

256
00:11:39,18 --> 00:11:42,88
他怎麼樣在不可靠的這個環境之下

257
00:11:42,88 --> 00:11:45,35
或者說不可靠的服務之下

258
00:11:45,35 --> 00:11:48,81
他怎麼提供可靠的服務給他的上一層

259
00:11:48,81 --> 00:11:51,85
給他的上面所謂的應用層等等

260
00:11:51,85 --> 00:11:54,68
好我們就是說 那TCP該怎麼做呢

261
00:11:54,68 --> 00:11:56,48
那既然是不可靠啊

262
00:11:56,48 --> 00:11:59,55
不可靠的環境我們怎麼讓他變可靠呢

263
00:11:59,55 --> 00:12:00,70
那我就要求說

264
00:12:00,71 --> 00:12:02,71
當我把資料 譬如說

265
00:12:02,71 --> 00:12:04,98
我們就這樣講 TCP呢

266
00:12:04,98 --> 00:12:08,48
當他把資料送給對方的時候

267
00:12:08,48 --> 00:12:11,68
當然我們所謂的送給對方是透過網路啦

268
00:12:11,68 --> 00:12:12,74
事實上是這樣啦

269
00:12:12,75 --> 00:12:16,55
這樣送上來  就是說我們把封包

270
00:12:16,55 --> 00:12:18,78
TCP的資料丟給對方的時候

271
00:12:18,78 --> 00:12:20,91
譬如說 我們就把它編號

272
00:12:20,91 --> 00:12:23,71
我們有編號1234567

273
00:12:23,71 --> 00:12:26,21
所以等下對方收到的時候呢

274
00:12:26,21 --> 00:12:29,58
他必須告訴我他收的情況

275
00:12:29,58 --> 00:12:32,11
就是說 我把資料丟給對方

276
00:12:32,11 --> 00:12:34,84
對方他要告訴我他收的情況

277
00:12:34,85 --> 00:12:36,35
阿我們有編號啊12345

278
00:12:36,35 --> 00:12:39,28
你告訴我等下說你收到的是不是12345

279
00:12:39,28 --> 00:12:42,48
啊如果你告訴我說你收到123跟5

280
00:12:42,48 --> 00:12:43,48
4沒有收到

281
00:12:43,48 --> 00:12:47,21
好 你4沒收到 我就再把4再送一次啦

282
00:12:47,21 --> 00:12:50,31
所以他就有一種所謂的重送的機制

283
00:12:50,31 --> 00:12:52,35
因為下層不可靠

284
00:12:52,35 --> 00:12:55,68
所以上面這一層他就必須自己想辦法說

285
00:12:55,68 --> 00:12:57,55
那所謂的不可靠就是說

286
00:12:57,55 --> 00:12:58,60
我丟給他可能會掉

287
00:12:58,61 --> 00:13:02,5
那也有可能會 我們所謂的遲到

288
00:13:02,5 --> 00:13:05,25
因為我們說這個網路這一層

289
00:13:05,25 --> 00:13:06,35
他的封包本身

290
00:13:06,35 --> 00:13:10,55
因為這個走的路徑可以不一樣

291
00:13:10,55 --> 00:13:11,98
我們說每一個封包

292
00:13:11,98 --> 00:13:15,7
都可能是獨立的被傳輸嘛

293
00:13:15,8 --> 00:13:16,15
所以我們假設

294
00:13:16,15 --> 00:13:19,31
我們丟了第一個封包 編號一啦

295
00:13:19,31 --> 00:13:23,48
那他可能走這條路 譬如說走這樣這樣

296
00:13:23,48 --> 00:13:26,15
因為網路比較阻塞嘛

297
00:13:26,15 --> 00:13:27,48
阿你丟了第二個封包

298
00:13:27,48 --> 00:13:29,31
因為我們往下送的這個資料

299
00:13:29,31 --> 00:13:30,64
可能不是只有一個啦

300
00:13:30,65 --> 00:13:33,58
可能會幾百個幾千個上萬個都有可能

301
00:13:33,58 --> 00:13:34,71
那我第二個封包呢

302
00:13:34,71 --> 00:13:36,25
說不定就很快就到了

303
00:13:36,25 --> 00:13:39,40
也就是說 因為網路的特性

304
00:13:39,41 --> 00:13:42,18
每一個封包可能走的路線呢

305
00:13:42,18 --> 00:13:43,85
可能隨時都不一樣

306
00:13:43,85 --> 00:13:48,81
那有的呢先送的有可能在裡面就被阻塞了

307
00:13:48,81 --> 00:13:51,48
那後送的就先到

308
00:13:51,48 --> 00:13:54,21
就先送的可能就在上面繞

309
00:13:54,21 --> 00:13:59,58
所以呢他們到達對方的順序就不一定會一樣

310
00:13:59,58 --> 00:14:02,8
也就是說我們再畫一條線來看

311
00:14:02,8 --> 00:14:03,58
就是說我今天如果把

312
00:14:03,58 --> 00:14:07,31
把這個IP這一層 再把它畫一條線

313
00:14:07,31 --> 00:14:09,84
那我們這邊說 我往下送封包

314
00:14:09,85 --> 00:14:11,48
我送第一個封包

315
00:14:11,48 --> 00:14:13,55
跟送第二個封包 一跟二

316
00:14:13,55 --> 00:14:17,27
那等一下這邊上來的

317
00:14:17,28 --> 00:14:19,15
可能就不是一跟二了

318
00:14:19,15 --> 00:14:22,48
順序也可能不對 資料也可能會錯誤

319
00:14:22,48 --> 00:14:24,81
也就是說 這個TCP他要

320
00:14:24,81 --> 00:14:27,98
面對的這個網路層的服務就是說

321
00:14:27,98 --> 00:14:32,1
他可能呢是不一定按照原來的順序

322
00:14:32,1 --> 00:14:35,31
那順序可能會所謂的out of order

323
00:14:35,31 --> 00:14:38,15
順序不對 內容可能會不見

324
00:14:38,15 --> 00:14:41,40
所以其實是非常不可靠的一個環境啦

325
00:14:41,41 --> 00:14:44,38
那TCP呢 他就要想辦法剛提到

326
00:14:44,38 --> 00:14:45,25
他可能把它編號

327
00:14:45,25 --> 00:14:47,11
然後送給對方

328
00:14:47,11 --> 00:14:51,64
對方收到之後還要回應他收到的狀況

329
00:14:51,65 --> 00:14:53,31
然後我們再看看說

330
00:14:53,31 --> 00:14:56,27
那如果有些部分的內容對方沒有收到

331
00:14:56,28 --> 00:14:58,31
我們就用所謂的重送

332
00:14:58,31 --> 00:14:59,58
叫做retransmission

333
00:14:59,58 --> 00:15:03,85
我們再送一次 一直要確認對方都收到了

334
00:15:03,85 --> 00:15:07,78
然後我才把這個動作呢 把它送完

335
00:15:07,78 --> 00:15:10,91
也就是說在不可靠的條件之下

336
00:15:10,91 --> 00:15:15,68
我們有方法來讓這個傳輸呢是盡量的可靠

337
00:15:15,68 --> 00:15:18,58
就是說 譬如說剛提到

338
00:15:18,58 --> 00:15:21,98
我把資料把它編號 然後我要對方確認

339
00:15:21,98 --> 00:15:25,7
如果對方沒有收到我就重送

340
00:15:25,8 --> 00:15:29,1
那甚至說 對方如果一直都沒有收到

341
00:15:29,1 --> 00:15:31,7
譬如說我們的資料丟下去

342
00:15:31,8 --> 00:15:34,65
到這邊也不見了 再送一次 也不見了

343
00:15:34,65 --> 00:15:36,55
那再一次 也不見了

344
00:15:36,55 --> 00:15:38,64
對方老是沒收到 他就不會回應啊

345
00:15:38,65 --> 00:15:40,95
因為網路阻塞嘛

346
00:15:40,95 --> 00:15:43,55
沒有關係 我們還有一個方法

347
00:15:43,55 --> 00:15:45,35
就是我設一個叫做timer

348
00:15:45,35 --> 00:15:47,1
我們講一個時間

349
00:15:47,1 --> 00:15:49,98
這個時間就是我封包一往下丟呢

350
00:15:49,98 --> 00:15:54,98
我就啟動一個時間 隨便講譬如說十秒好了

351
00:15:54,98 --> 00:16:01,17
十秒鐘之內我要收到對方的回應 假設十秒

352
00:16:01,18 --> 00:16:04,48
那我十秒鐘都還沒有收到對方回應

353
00:16:04,48 --> 00:16:08,15
那我就重送 所以我們有很多方法

354
00:16:08,15 --> 00:16:09,98
 這個詳細的技術呢

355
00:16:09,98 --> 00:16:14,50
我們等到介紹TCP的時候再來做更完整的介紹

356
00:16:14,51 --> 00:16:15,55
那我們說

357
00:16:15,55 --> 00:16:19,31
這個在OSI的這個architecture裡面

358
00:16:19,31 --> 00:16:21,5
我們所謂的分成七層

359
00:16:21,5 --> 00:16:23,95
就是說 我們資料往下送的時候

360
00:16:23,95 --> 00:16:26,25
特別剛剛提到 往下送呢

361
00:16:26,25 --> 00:16:29,7
我們這個叫做encapsulation

362
00:16:29,8 --> 00:16:35,18
就是他會每一層都會加上自己的header

363
00:16:35,18 --> 00:16:37,61
所以這個封包往下送的時候

364
00:16:37,61 --> 00:16:40,25
資料往下送的時候 他會越來越大

365
00:16:40,25 --> 00:16:42,81
一直到physical layer然後送到這邊

366
00:16:42,81 --> 00:16:46,11
然後往上送 他又變小一點

367
00:16:46,11 --> 00:16:47,50
因為往上送的時候

368
00:16:47,51 --> 00:16:51,15
把自己的header把它拿掉 再交給上面

369
00:16:51,15 --> 00:16:55,45
所以他會這樣子跑 我們看齁 這樣子

370
00:16:55,45 --> 00:16:59,98
所以事實上 一個封包 往下送的時候呢

371
00:16:59,98 --> 00:17:02,48
一直在做所謂的encapsulation

372
00:17:02,48 --> 00:17:03,98
然後往上送的時候呢

373
00:17:03,98 --> 00:17:05,48
就在做decapsulation

374
00:17:05,48 --> 00:17:07,31
然後再往下送呢

375
00:17:07,31 --> 00:17:08,90
又再做encapsulation

376
00:17:08,90 --> 00:17:12,7
所以我們可以說 一個資料本來是這麼小

377
00:17:12,8 --> 00:17:15,11
往下送的時候呢就越來越大

378
00:17:15,11 --> 00:17:17,45
然後再往上送又變越來越小

379
00:17:17,45 --> 00:17:19,58
然後再往下送呢又變越來越大

380
00:17:19,58 --> 00:17:21,35
所以在這個例子裡面

381
00:17:21,35 --> 00:17:22,85
譬如說我們這邊往下送

382
00:17:22,85 --> 00:17:23,88
這個都是越來越大

383
00:17:23,88 --> 00:17:25,68
這個叫encapsulation到這邊

384
00:17:25,68 --> 00:17:27,14
好 往上注意喔

385
00:17:27,15 --> 00:17:30,5
往上這個地方就開始做decapsulation

386
00:17:30,5 --> 00:17:34,25
就變短了 然後再來往下送

387
00:17:34,25 --> 00:17:37,98
這個地方 再做一次encapsulation

388
00:17:37,98 --> 00:17:39,75
然後再來 再往上送

389
00:17:39,75 --> 00:17:42,21
又變成decapsulation

390
00:17:42,21 --> 00:17:43,78
然後再來encapsulation

391
00:17:43,78 --> 00:17:45,28
再來decapsulation

392
00:17:45,28 --> 00:17:48,51
就是 上上下下上上下下的意思

393
00:17:48,51 --> 00:17:49,64
每經過一個router

394
00:17:49,65 --> 00:17:51,61
他就往上送一點點

395
00:17:51,61 --> 00:17:54,51
那router因為它只有到network layer

396
00:17:54,51 --> 00:17:56,71
因為router本身只做routing

397
00:17:56,71 --> 00:17:58,51
所以他只到network layer這一層

398
00:17:58,51 --> 00:18:00,58
所以我們從這邊這個圖

399
00:18:00,58 --> 00:18:02,98
我們就可以比較清楚的了解說

400
00:18:02,98 --> 00:18:05,85
整個網路的功能

401
00:18:05,85 --> 00:18:09,51
我們把他分成 所謂的七層的概念啦

402
00:18:09,51 --> 00:18:11,28
那往下送的時候呢

403
00:18:11,28 --> 00:18:15,28
封包會越長越大 往上送的時候呢

404
00:18:15,28 --> 00:18:18,35
封包就會慢慢的還原 他原來的樣子

405
00:18:18,35 --> 00:18:22,41
這個是我們談的是 所謂的 兩端

406
00:18:22,41 --> 00:18:26,51
就是這兩端呢 我們所謂都是host

407
00:18:26,51 --> 00:18:29,14
那他們要傳輸 就是這樣子送

408
00:18:29,15 --> 00:18:31,88
封包就是這樣子送到目的地這樣子

409
00:18:31,88 --> 00:18:34,85
那我們等一下呢 再來介紹說

410
00:18:34,85 --> 00:18:41,28
如果看這一層 就是我們怎麼跟router溝通

411
00:18:41,28 --> 00:18:45,28
因為我們真正的設備接到router之間

412
00:18:45,28 --> 00:18:49,35
在跟router銜接這個中間 就這段

413
00:18:49,35 --> 00:18:52,85
這邊還有一段是可以再仔細看一下

414
00:18:52,85 --> 00:18:55,48
因為裡面可能有一些 譬如說交換機

415
00:18:55,48 --> 00:18:56,85
或者一般我們常講

416
00:18:56,85 --> 00:18:59,58
譬如說無線網路的access point

417
00:18:59,58 --> 00:19:01,85
AP 可能會放在這個中間

418
00:19:01,85 --> 00:19:03,98
這個我們等下再來介紹

419
00:19:03,98 --> 00:19:05,98



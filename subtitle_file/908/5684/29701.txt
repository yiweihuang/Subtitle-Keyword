1
00:00:09,21 --> 00:00:11,58
那接下來我們來跟各位介紹

2
00:00:11,58 --> 00:00:13,71
所謂的encapsulation的觀念

3
00:00:13,71 --> 00:00:17,18
那所謂的encapsulation就是所謂的包裝啦

4
00:00:17,18 --> 00:00:21,8
就是說我們在這個所謂的layer的protocol的概念

5
00:00:21,8 --> 00:00:23,70
我們有所謂的下層上層的關係

6
00:00:23,71 --> 00:00:26,5
那所謂的encapsulation就是說

7
00:00:26,5 --> 00:00:30,35
我們上層的資料 交給下層的時候

8
00:00:30,35 --> 00:00:32,61
那因為下一層這個protocol

9
00:00:32,61 --> 00:00:34,15
他們為了要互相溝通

10
00:00:34,15 --> 00:00:37,31
他們會自己加上自己的溝通的資料

11
00:00:37,31 --> 00:00:38,95
我們所謂的header

12
00:00:38,95 --> 00:00:40,55
所以每一層的protocol呢

13
00:00:40,55 --> 00:00:43,35
都會加上他們自己的header

14
00:00:43,35 --> 00:00:46,7
所以每一層都加上header

15
00:00:46,8 --> 00:00:48,45
所以再往給下一層 他又加上header

16
00:00:48,45 --> 00:00:51,65
那再交給下一層 每一層又加上header

17
00:00:51,65 --> 00:00:53,71
所以我們就可以知道說

18
00:00:53,71 --> 00:00:55,95
我們這個資料從最上面那一層

19
00:00:55,95 --> 00:00:57,58
一路往下送的時候呢

20
00:00:57,58 --> 00:01:00,45
因為每一層都會加上自己的header

21
00:01:00,45 --> 00:01:02,65
所以他就會好像越來越長

22
00:01:02,65 --> 00:01:04,57
這個是所謂的encapsulation

23
00:01:04,58 --> 00:01:08,51
因為他有點在包裝 把它包裝得越來越完整

24
00:01:08,51 --> 00:01:11,81
那相對的到了目的地的時候

25
00:01:11,81 --> 00:01:15,55
他就要開始把他 我們講 把它拆裝

26
00:01:15,55 --> 00:01:19,45
意思是說 每一層他會去看

27
00:01:19,45 --> 00:01:21,78
對方所放的header的內容

28
00:01:21,78 --> 00:01:24,95
那處理完之後 他就把他的header

29
00:01:24,95 --> 00:01:27,31
把它取消 然後再送給上一層

30
00:01:27,31 --> 00:01:28,65
那上一層的protocol呢

31
00:01:28,65 --> 00:01:31,88
又去看他們對方給的這個內容

32
00:01:31,88 --> 00:01:35,15
就是header 那看這個header處理完之後

33
00:01:35,15 --> 00:01:37,48
再把header拿掉 然後再往上送

34
00:01:37,48 --> 00:01:40,61
也就是說 資料往下送的時候呢

35
00:01:40,61 --> 00:01:43,61
他會越來越大 這個叫做encapsulation

36
00:01:43,61 --> 00:01:46,81
那資料到了目的地 往上送的時候呢

37
00:01:46,81 --> 00:01:48,41
他會就越來越小

38
00:01:48,41 --> 00:01:50,68
最後還原成最原始的資料

39
00:01:50,68 --> 00:01:53,65
那越來越小 往上送的這個過程呢

40
00:01:53,65 --> 00:01:55,98
剛好倒過來 我們叫做decapsulation

41
00:01:55,98 --> 00:01:59,61
往下送會越來越大 就封包越來越長

42
00:01:59,61 --> 00:02:02,5
那往上送的時候呢 封包會越來越短

43
00:02:02,5 --> 00:02:04,24
越來越變成原始的資料

44
00:02:04,25 --> 00:02:06,5
那我們來看一個例子

45
00:02:06,5 --> 00:02:08,85
譬如說我們在這個圖裡面呢

46
00:02:08,85 --> 00:02:12,88
我們假設兩端最上面都有所謂的application

47
00:02:12,88 --> 00:02:17,7
我們有這個應用的程式 那應用的程式本身

48
00:02:17,8 --> 00:02:19,61
我們假設有兩邊 都有一個application

49
00:02:19,61 --> 00:02:22,11
那這個application往下送的資料

50
00:02:22,11 --> 00:02:24,75
在這邊我們就把它當成就是一個data

51
00:02:24,75 --> 00:02:27,90
在這個地方 他送下去呢就是data

52
00:02:27,91 --> 00:02:31,21
那他在這個例子裡面我們把它交給了TCP

53
00:02:31,21 --> 00:02:33,28
這是一個protocol

54
00:02:33,28 --> 00:02:36,35
這個protocol呢我們後面會再介紹

55
00:02:36,35 --> 00:02:39,15
這個protocol是用來做可靠的傳輸

56
00:02:39,15 --> 00:02:42,21
那他會跟TCP的另外一端

57
00:02:42,21 --> 00:02:43,24
我們說他會建連線

58
00:02:43,25 --> 00:02:46,15
那他的另外一端就在右邊這個地方

59
00:02:46,15 --> 00:02:50,24
這兩個TCP呢 他們為了要互相的溝通

60
00:02:50,25 --> 00:02:53,21
我們說 這兩個protocol我們也介紹過

61
00:02:53,21 --> 00:02:57,17
protocol本身除了上下層關係一種服務嘛

62
00:02:57,18 --> 00:03:00,45
那對等就是跟對方這個peer之間

63
00:03:00,45 --> 00:03:01,75
他們要互相的溝通

64
00:03:01,75 --> 00:03:04,48
包含說第一個封包要送什麼封包

65
00:03:04,48 --> 00:03:08,55
內容是什麼 欄位是什麼意思要放什麼內容

66
00:03:08,55 --> 00:03:11,1
也就是說他們之間會互相溝通的

67
00:03:11,1 --> 00:03:14,8
那互相溝通就一定要有一個資料啊

68
00:03:14,8 --> 00:03:17,41
那資料要放在哪裡 讓對方可以看得到

69
00:03:17,41 --> 00:03:21,1
我們說剛提到 這個互相溝通的資料呢

70
00:03:21,1 --> 00:03:22,88
就是放在所謂的header

71
00:03:22,88 --> 00:03:26,18
所以TCP呢他就放在這個地方

72
00:03:26,18 --> 00:03:28,38
這個地方就叫做TCP的header 也就是說

73
00:03:28,38 --> 00:03:30,25
這個TCP的protocol

74
00:03:30,25 --> 00:03:34,11
他把他想跟對方溝通的資料

75
00:03:34,11 --> 00:03:36,41
把它放到這個地方來

76
00:03:36,41 --> 00:03:39,61
所以我們說 TCP每一個protocol

77
00:03:39,61 --> 00:03:42,65
他會把它想跟對方溝通的資料呢

78
00:03:42,65 --> 00:03:45,28
放在所謂的header上面

79
00:03:45,28 --> 00:03:47,18
他就把它放在這個header上面

80
00:03:47,18 --> 00:03:50,15
然後就希望等下交給對方的TCP

81
00:03:50,15 --> 00:03:53,28
給他來做參考 因為我們要互相溝通

82
00:03:53,28 --> 00:03:57,88
可是呢 我要TCP要把這個資料丟給對方

83
00:03:57,88 --> 00:04:02,91
過程他必須先往下再丟給下一層 那我們看

84
00:04:02,91 --> 00:04:06,48
在這個例子裡面 我們的下一層是一個IP

85
00:04:06,48 --> 00:04:08,41
他也是一個protocol

86
00:04:08,41 --> 00:04:11,38
那這個IP呢 也想跟對方的IP

87
00:04:11,38 --> 00:04:14,65
對方的IP在這個地方 他跟他做溝通

88
00:04:14,65 --> 00:04:17,55
那一樣的 這個IP這個protocol

89
00:04:17,55 --> 00:04:20,1
為了跟對方的protocol溝通

90
00:04:20,000 --> 00:04:24,10
所以他也必須把它想要給對方的資料

91
00:04:24,11 --> 00:04:25,61
放在一個地方

92
00:04:25,61 --> 00:04:28,87
這個地方就是 我們叫做IP的header

93
00:04:28,88 --> 00:04:31,1
所以一樣 所以這個IP呢

94
00:04:31,1 --> 00:04:32,90
就把他想給對方的資料呢

95
00:04:32,91 --> 00:04:35,88
我們說放在這個地方 這叫IP的header

96
00:04:35,88 --> 00:04:37,1
所以你看

97
00:04:37,1 --> 00:04:41,15
從application這個藍色的 他交給TCP

98
00:04:41,15 --> 00:04:43,80
TCP就會加上TCP的header

99
00:04:43,81 --> 00:04:45,25
所以他也已經長大了

100
00:04:45,25 --> 00:04:46,85
因為他加了TCP的header

101
00:04:46,85 --> 00:04:50,97
當TCP把他的資料丟給IP的時候

102
00:04:50,98 --> 00:04:53,21
IP為了跟對方的IP溝通

103
00:04:53,21 --> 00:04:55,75
IP也會加上自己的header

104
00:04:55,75 --> 00:04:56,98
我們叫做IP的header

105
00:04:56,98 --> 00:05:00,95
所以這個資料又變長了 又變大了

106
00:05:00,95 --> 00:05:06,38
所以我們說 這個一路往下面送的時候

107
00:05:06,38 --> 00:05:07,95
我們說 這個方向啦

108
00:05:07,95 --> 00:05:11,25
往下面送的時候 往下送的時候

109
00:05:11,25 --> 00:05:14,5
我們這個封包 內容本來這樣

110
00:05:14,5 --> 00:05:16,5
變這樣 再變這樣

111
00:05:16,5 --> 00:05:19,94
這個就叫做encapsulation 因為他越來越大

112
00:05:19,95 --> 00:05:21,95
我們講所謂的包裝啦

113
00:05:21,95 --> 00:05:24,85
或者叫做封裝 把它變成一個更完整的資料

114
00:05:24,85 --> 00:05:28,61
那如果他進到Internet裡面去 進到網路裡面去

115
00:05:28,61 --> 00:05:30,87
那不管他怎麼送嘛

116
00:05:30,88 --> 00:05:34,95
我們說因為Internet本身他的路徑的選擇

117
00:05:34,95 --> 00:05:35,95
他的routing呢

118
00:05:35,95 --> 00:05:38,75
通常是比較獨立的

119
00:05:38,75 --> 00:05:40,91
就每一個封包 他在裡面繞 可能會

120
00:05:40,91 --> 00:05:42,88
不管怎麼繞 最後繞到

121
00:05:42,88 --> 00:05:44,78
真的繞到這個目的地來了

122
00:05:44,78 --> 00:05:50,65
假設他繞到目的地來 然後給這個IP收到了

123
00:05:50,65 --> 00:05:55,31
那IP收到之後 他就會去看他的header

124
00:05:55,31 --> 00:05:57,88
所以這個IP呢 他就來看這個header

125
00:05:57,88 --> 00:06:01,55
我們再整理一下 就是這個IP本身呢

126
00:06:01,55 --> 00:06:05,11
他收到這個封包之後 他就來看這個header

127
00:06:05,11 --> 00:06:08,15
header上面記錄著對方的IP

128
00:06:08,15 --> 00:06:11,1
告訴我這個封包到底是怎麼一回事

129
00:06:11,1 --> 00:06:14,51
那通常這個ip的header裡面會記錄說

130
00:06:14,51 --> 00:06:17,21
譬如說這個對方的source ip address

131
00:06:17,21 --> 00:06:18,55
就是這個封包是誰送的

132
00:06:18,55 --> 00:06:22,51
那destination當然以現在的例子已經送到目的地了嘛

133
00:06:22,51 --> 00:06:25,94
所以destination的ip應該就是這台電腦的ip

134
00:06:25,95 --> 00:06:28,58
那就看看裡面該處理的資料

135
00:06:28,58 --> 00:06:30,41
欄位 資料 該處理完

136
00:06:30,41 --> 00:06:31,88
處理完之後 我們特別注意到

137
00:06:31,88 --> 00:06:34,61
當他往上送的時候

138
00:06:34,61 --> 00:06:37,20
就是這個ip他要往上送的時候呢

139
00:06:37,21 --> 00:06:38,81
他必須把它處理過了嘛

140
00:06:38,81 --> 00:06:40,1
他就把它拿掉

141
00:06:40,1 --> 00:06:43,18
所以你看他往上送的時候是送這個

142
00:06:43,18 --> 00:06:47,37
所以ip或者任何一個protocol

143
00:06:47,38 --> 00:06:50,65
他把自己的資料處理完之後

144
00:06:50,65 --> 00:06:53,65
他會把它對應的那個header把它拿掉

145
00:06:53,65 --> 00:06:57,65
因為對上一層來講的話 他不用看下一層的資料

146
00:06:57,65 --> 00:07:00,51
他要看的是他那一層 他自己的資料

147
00:07:00,51 --> 00:07:03,78
譬如說依這個IP來講 他的上一層是TCP嘛

148
00:07:03,78 --> 00:07:06,54
那TCP要看的是TCP的header

149
00:07:06,55 --> 00:07:10,15
所以TCP他也不會去看IP的header

150
00:07:10,15 --> 00:07:12,94
所以TCP看TCP的header

151
00:07:12,95 --> 00:07:15,75
IP看IP的header 每一層看自己的header

152
00:07:15,75 --> 00:07:19,5
所以當我的封包資料往上送的時候呢

153
00:07:19,5 --> 00:07:20,88
就會把header拿掉

154
00:07:20,88 --> 00:07:24,11
所以我們就看到說 依這個例子來講

155
00:07:24,11 --> 00:07:26,5
 TCP 往上送的時候呢

156
00:07:26,5 --> 00:07:29,15
誒 對不起 IP往上送的時候呢

157
00:07:29,15 --> 00:07:30,65
他就把IP的header

158
00:07:30,65 --> 00:07:32,48
我們說這個地方是把它拿掉的

159
00:07:32,48 --> 00:07:35,45
就丟給了TCP 好那就交給TCP

160
00:07:35,45 --> 00:07:38,15
一樣 那TCP收到這個資料之後呢

161
00:07:38,15 --> 00:07:41,34
它要怎麼處理這個資料呢 他一樣

162
00:07:41,35 --> 00:07:43,75
TCP就要去TCP的header

163
00:07:43,75 --> 00:07:47,41
所以這個TCP這個軟體呢 他就去看

164
00:07:47,41 --> 00:07:51,85
這個header 就是TCP這個軟體呢

165
00:07:51,85 --> 00:07:53,70
就去看TCP的header

166
00:07:53,71 --> 00:07:55,68
那header裡面記錄了什麼

167
00:07:55,68 --> 00:07:56,75
譬如我們剛剛提到說

168
00:07:56,75 --> 00:07:59,61
因為TCP本身他是需要建

169
00:07:59,61 --> 00:08:01,75
我們叫做連線啦 他要建連線

170
00:08:01,75 --> 00:08:03,55
那TCP連結方式是說

171
00:08:03,55 --> 00:08:06,85
我要送一個封包給他 你要回一個封包

172
00:08:06,85 --> 00:08:10,18
我再回一個封包 TCP建連線的過程呢

173
00:08:10,18 --> 00:08:12,80
我們說他叫做three way handshaking

174
00:08:12,81 --> 00:08:16,75
他必須交握三次啦 譬如說 這是第一個封包

175
00:08:16,75 --> 00:08:17,85
那第一個封包

176
00:08:17,85 --> 00:08:19,61
在這個header裡面就會記錄著說

177
00:08:19,61 --> 00:08:21,1
header 這個裡面

178
00:08:21,1 --> 00:08:24,87
就會說 這個封包是建連線的封包

179
00:08:24,88 --> 00:08:27,88
或者說 這個封包呢 是回來的封包

180
00:08:27,88 --> 00:08:30,5
或者說這個封包是第三個封包

181
00:08:30,5 --> 00:08:31,75
就是說 我們整個

182
00:08:31,75 --> 00:08:35,40
兩個protocol互相溝通的這些訊息

183
00:08:35,41 --> 00:08:37,15
都放在這個header裡面

184
00:08:37,15 --> 00:08:40,38
至於這個header裡面詳細的這個格式呢

185
00:08:40,38 --> 00:08:41,87
我們等到介紹

186
00:08:41,87 --> 00:08:46,55
後面介紹這個TCP的時候可能再來說明就可以

187
00:08:46,55 --> 00:08:49,27
那接下來我們再來看一下就是說

188
00:08:49,28 --> 00:08:51,78
那TCP再往上送的時候呢

189
00:08:51,78 --> 00:08:55,7
一樣 他又來了 TCP往上送的時候

190
00:08:55,8 --> 00:08:58,51
他就會把TCP的header再拿掉

191
00:08:58,51 --> 00:09:01,35
所以他在往上送的時候呢 就會越來越

192
00:09:01,35 --> 00:09:05,68
等於說是越來越乾淨啦 然後越來越少

193
00:09:05,68 --> 00:09:07,1
那我們再看

194
00:09:07,1 --> 00:09:09,21
譬如說我們這個TCP往上送的時候呢

195
00:09:09,21 --> 00:09:12,84
他就會剩下這個所謂的藍色的

196
00:09:12,85 --> 00:09:17,11
TCP往上送的時候呢 就把TCP的header拿掉

197
00:09:17,11 --> 00:09:19,40
就是說往上送的時候呢

198
00:09:19,41 --> 00:09:22,51
就把自己的header把他去掉

199
00:09:22,51 --> 00:09:25,41
然後剩下的就交給上一層

200
00:09:25,41 --> 00:09:28,18
那上一層他又去看他自己的header

201
00:09:28,18 --> 00:09:30,18
那他header處理完之後

202
00:09:30,18 --> 00:09:33,11
他又再把header拿掉 然後再把資料往上送

203
00:09:33,11 --> 00:09:36,70
所以最後整個這個效果 我們就可以看得到說

204
00:09:36,71 --> 00:09:38,85
我們資料往上送的時候

205
00:09:38,85 --> 00:09:42,11
他其實是越來越小

206
00:09:42,11 --> 00:09:45,11
所以說我們這個資料在往上送的時候

207
00:09:45,11 --> 00:09:46,91
往上面送的時候

208
00:09:46,91 --> 00:09:49,65
他就資料你看這個資料本來是這樣子

209
00:09:49,65 --> 00:09:52,21
然後再變成這樣子 然後再變成這樣子

210
00:09:52,21 --> 00:09:55,25
所以往上送的時候 剛好就所謂的倒過來

211
00:09:55,25 --> 00:09:57,21
我們一般叫做decapsulation

212
00:09:57,21 --> 00:10:01,40
就是叫做拆裝啦 所以我們可以想像的到

213
00:10:01,41 --> 00:10:03,71
這個封包在傳遞的過程當中

214
00:10:03,71 --> 00:10:08,11
他其實是不斷的在往下送的時候呢

215
00:10:08,11 --> 00:10:09,35
就是封包變大

216
00:10:09,35 --> 00:10:12,28
然後往上送的時候呢 就封包就變小

217
00:10:12,28 --> 00:10:14,65
那往下送的時候

218
00:10:14,65 --> 00:10:16,45
我們就叫做所謂的encapsulation

219
00:10:16,45 --> 00:10:19,35
那往上送的時候呢 就叫做decapsulation

220
00:10:19,35 --> 00:10:21,64
那這是因為說 每一層

221
00:10:21,65 --> 00:10:25,51
我們講這個每一層的protocol 他們要互相的溝通

222
00:10:25,51 --> 00:10:29,45
他們溝通的方式就是去創造header

223
00:10:29,45 --> 00:10:32,1
把資料放進去 然後送給對方

224
00:10:32,1 --> 00:10:34,25
那對方呢 再去header裡面看

225
00:10:34,25 --> 00:10:36,71
對方填的資料 然後去解讀它

226
00:10:36,71 --> 00:10:39,21
然後採取這個適當的回應

227
00:10:39,21 --> 00:10:44,55
那如果說 這個封包該處理的事情都處理完之後

228
00:10:44,55 --> 00:10:46,15
他就把header拿掉

229
00:10:46,15 --> 00:10:49,18
然後再往上送 所以整個這個傳輸的過程

230
00:10:49,18 --> 00:10:53,45
我們也可以用一條 比較簡單的概念來看就是說

231
00:10:53,45 --> 00:10:56,60
他們之間 是我們叫做所謂的對等

232
00:10:56,61 --> 00:10:58,38
對等的概念就是說

233
00:10:58,38 --> 00:11:01,78
我們假設畫一條線 譬如說我們這裡

234
00:11:01,78 --> 00:11:03,95
這樣講我們這邊把他畫一條

235
00:11:03,95 --> 00:11:06,71
從TCP這邊把它畫一條線 我們可以看得到

236
00:11:06,71 --> 00:11:09,11
特別注意一下 這邊 這一條線

237
00:11:09,11 --> 00:11:12,31
如果我們畫了這一條線 我們就會發現說

238
00:11:12,31 --> 00:11:16,98
application 交給TCP的是這個藍色的

239
00:11:16,98 --> 00:11:21,15
那TCP呢 交還給另外一端

240
00:11:21,15 --> 00:11:23,88
等於說我們把TCP這邊畫一條線嘛

241
00:11:23,88 --> 00:11:29,17
從左邊交給TCP的 跟右邊的TCP交給上面的

242
00:11:29,18 --> 00:11:32,61
這個都是一樣的 就是藍色進來藍色出去

243
00:11:32,61 --> 00:11:35,68
所以對 我們把它畫一條線

244
00:11:35,68 --> 00:11:37,28
就等於說把下面蓋住了

245
00:11:37,28 --> 00:11:39,48
我不管你TCP下面怎麼做

246
00:11:39,48 --> 00:11:42,55
你這個交下來的跟我送上去的就要一樣

247
00:11:42,55 --> 00:11:44,70
那我們一樣我們看IP

248
00:11:44,71 --> 00:11:49,58
我們如果把IP一樣畫一條線的話 他一樣

249
00:11:49,58 --> 00:11:53,45
那TCP交給IP的是長這個樣子 一樣

250
00:11:53,45 --> 00:11:57,17
那IP交還給TCP的呢 也是長一樣

251
00:11:57,18 --> 00:11:59,18
也就是我們如果用這種所謂的層的

252
00:11:59,18 --> 00:12:02,41
一層一層的概念 就是上層交下來的

253
00:12:02,41 --> 00:12:06,51
那到了對方的時候呢 你再還給上一層的

254
00:12:06,51 --> 00:12:09,98
這個資料的內容基本上是一樣的

255
00:12:09,98 --> 00:12:13,88
那只是說 我們上層交給下層

256
00:12:13,88 --> 00:12:16,84
那下層他們為了溝通 自己加header

257
00:12:16,85 --> 00:12:20,91
那是對上層來講 那是下面的事情

258
00:12:20,91 --> 00:12:24,8
所以每一層每一層 他們都是對等的關係

259
00:12:24,8 --> 00:12:26,48
就是我只是想把資料交給對方嘛

260
00:12:26,48 --> 00:12:30,51
那至於交給對方 我通常都是交給下一層

261
00:12:30,51 --> 00:12:35,28
因為我們 最下面才是真正的網路的連線嘛

262
00:12:35,28 --> 00:12:38,38
包括說有線的無線的 都是一路往下送

263
00:12:38,38 --> 00:12:41,5
那這個等下我們就會來介紹

264
00:12:41,5 --> 00:12:42,91
所謂的 在網路裡面

265
00:12:42,91 --> 00:12:45,85
非常有名的叫做所謂的OSI

266
00:12:45,85 --> 00:12:50,31
就是open system interconnection的ISO的model

267
00:12:50,31 --> 00:12:53,60
就是所謂的七個layer seven layer model

268
00:12:53,61 --> 00:12:54,95
這個我們等下就來介紹

269
00:12:54,95 --> 00:12:57,75
什麼叫做seven layer的這種網路的model

270
00:12:57,75 --> 00:12:59,75



1
00:00:09,110 --> 00:00:12,580
好，那接下來我們來介紹這個sliding window protocol

2
00:00:12,580 --> 00:00:16,350
可能還有哪些議題我們是特別需要來關注的

3
00:00:16,350 --> 00:00:18,710
我們先來看一下我們說

4
00:00:18,710 --> 00:00:23,950
如果這個timeout發生的時候會有什麼樣的影響

5
00:00:23,950 --> 00:00:26,680
我們說因為發生timeout的時候

6
00:00:26,680 --> 00:00:29,710
就要所謂的retransmission、要重送

7
00:00:29,710 --> 00:00:34,950
那你重送呢  等於說這個重送呢它其實也占掉了這個整個網路的頻寬

8
00:00:34,950 --> 00:00:40,980
我們說如果timeout發生的話  那在傳輸、在路上

9
00:00:40,980 --> 00:00:44,680
或在網路上面傳輸的這個資料量就會減少

10
00:00:44,680 --> 00:00:49,280
因為你在重送  所以這個重送它其實占掉這個頻寬

11
00:00:49,280 --> 00:00:54,850
那這樣的話  同時呢這個window呢可能沒辦法滑動

12
00:00:54,850 --> 00:00:57,510
因為你在重送、發生timeout重送

13
00:00:57,510 --> 00:01:00,480
代表說對方那個ACK也還沒有回來

14
00:01:00,480 --> 00:01:02,379
那ACK沒有回來之前

15
00:01:02,380 --> 00:01:04,80
我們window不能夠滑動

16
00:01:04,80 --> 00:01:06,410
那你沒有滑動就不能傳送新的

17
00:01:06,410 --> 00:01:08,679
變成說只要發生這個timeout

18
00:01:08,680 --> 00:01:13,50
我們在外面傳送的這個封包數量基本上就會減少

19
00:01:13,50 --> 00:01:16,850
那第二個就是說那如果封包發生了lost

20
00:01:16,850 --> 00:01:19,250
我們說叫做packet loss

21
00:01:19,250 --> 00:01:22,350
封包如果掉了話怎麼辦呢

22
00:01:22,350 --> 00:01:27,350
因為我們說最好最好的這個滑動視窗

23
00:01:27,350 --> 00:01:32,210
最好的這個情境就是說一邊送封包

24
00:01:32,210 --> 00:01:33,410
一個、一個送封包

25
00:01:33,410 --> 00:01:37,9
然後再還沒有把這個window size

26
00:01:37,10 --> 00:01:42,510
沒有把這個上限、這個上限用完之前我就有ACK回來了

27
00:01:42,510 --> 00:01:45,580
那變成說我一邊送封包一邊收到ACK

28
00:01:45,580 --> 00:01:49,480
然後我視窗就可以慢慢地比較流暢地滑動

29
00:01:49,480 --> 00:01:51,10
所以這是最完美的時候

30
00:01:51,10 --> 00:01:55,680
就是傳送的過程當中沒有停下來等ACK

31
00:01:55,680 --> 00:01:58,610
讓這個window呢sliding的非常smooth

32
00:01:58,610 --> 00:02:01,850
這是最完美的時候  但是我們說

33
00:02:01,850 --> 00:02:05,449
你只要封包掉了、封包一旦掉了

34
00:02:05,450 --> 00:02:07,450
ACK就不會馬上跑回來

35
00:02:07,450 --> 00:02:12,210
而且封包掉了之後你只有一個辦法就是等到timeout了

36
00:02:12,210 --> 00:02:16,510
因為封包掉了對方不會收到  對方沒有收到就沒有ACK

37
00:02:16,510 --> 00:02:17,910
沒有ACK你就等timeout

38
00:02:17,910 --> 00:02:19,650
也就是說一旦封包掉了時候呢

39
00:02:19,650 --> 00:02:21,910
我們一定會讓這個sliding window

40
00:02:21,910 --> 00:02:27,180
這個視窗在滑動一定會停下來  那視窗一停下來我們就是說

41
00:02:27,180 --> 00:02:33,550
我們這個sender呢就沒有充分利用  這個所謂的link的頻寬

42
00:02:33,550 --> 00:02:36,380
因為我們讓視窗停下來了

43
00:02:36,380 --> 00:02:38,350
只是說視窗一旦停下來呢

44
00:02:38,350 --> 00:02:41,980
我們就沒有辦法讓所謂的pipe

45
00:02:41,980 --> 00:02:46,149
就是我們講中間這個水管沒有辦法讓它塞滿

46
00:02:46,150 --> 00:02:49,310
因為一停下來就代表說你不能送新的了

47
00:02:49,310 --> 00:02:53,250
視窗一旦停下來你就不能再送封包了

48
00:02:53,250 --> 00:02:58,110
你可以把視窗裡面的用完  可是用完之後就不能再用了

49
00:02:58,110 --> 00:03:02,510
因為視窗不滑動就沒有新的sequence number可以用

50
00:03:02,510 --> 00:03:05,709
那沒有新的sequence number可以用

51
00:03:05,710 --> 00:03:07,980
你的傳送就必須暫停

52
00:03:07,980 --> 00:03:12,549
那一暫停就代表說你這個水管呢就沒有把它塞滿

53
00:03:12,550 --> 00:03:16,50
那沒有塞滿就代表這個整個throughput就開始下降

54
00:03:16,50 --> 00:03:20,480
所以我們說阿  一個封包如果掉了之後

55
00:03:20,480 --> 00:03:24,250
如果你可以盡早發現你就盡早重送嘛

56
00:03:24,250 --> 00:03:27,850
那盡早重送至少比較有快的機會

57
00:03:27,850 --> 00:03:30,980
讓這個視窗重新再開始滑動

58
00:03:30,980 --> 00:03:35,250
那可是我們如果按照原來講的話  那我是要等timeout

59
00:03:35,250 --> 00:03:38,180
一個封包如果在路上掉了

60
00:03:38,180 --> 00:03:43,250
那我們必須等到timeout那這個等的時間算是非常的長

61
00:03:43,250 --> 00:03:50,710
我們說我們等待的時間越長  那我們這個問題呢就會越嚴重

62
00:03:50,710 --> 00:03:55,650
就變成說你等待的時間越長也就是說這個視窗呢

63
00:03:55,650 --> 00:03:58,510
它停止滑動的時間就越長

64
00:03:58,510 --> 00:04:02,579
那停止的越長代表整個throughput就越差

65
00:04:02,580 --> 00:04:05,480
所以我們接下來要介紹幾個機制

66
00:04:05,480 --> 00:04:08,750
就是說我們怎麼可以有辦法說

67
00:04:08,750 --> 00:04:13,80
當封包掉的時候  給這個receiver

68
00:04:13,80 --> 00:04:16,80
這個sender呢可以早一點知道

69
00:04:16,79 --> 00:04:19,810
早一點知道這樣的事情  我們來看幾個作法

70
00:04:19,810 --> 00:04:22,50
第一個叫做negative acknowledgement

71
00:04:22,50 --> 00:04:24,880
Negative就是代表是說我告訴

72
00:04:24,880 --> 00:04:27,580
就是receiver回都是回這個acknowledgement

73
00:04:27,580 --> 00:04:29,210
都是這個acknowledgement

74
00:04:29,210 --> 00:04:30,479
我們講都是要回應

75
00:04:30,480 --> 00:04:34,310
只是這個回應的方式呢有不同的做法

76
00:04:34,310 --> 00:04:37,210
我們說第一個叫做negative acknowledgement

77
00:04:37,210 --> 00:04:40,80
第二個叫做所謂的additional acknowledgement

78
00:04:40,80 --> 00:04:42,880
第三個叫做selective acknowledgement

79
00:04:42,880 --> 00:04:45,810
這三種方式的目的呢都是要改善

80
00:04:45,810 --> 00:04:49,510
改善什麼呢  改善不要等太久

81
00:04:49,510 --> 00:04:55,310
不要等太久sender才知道說它的封包已經掉了

82
00:04:55,310 --> 00:05:00,280
那我們說傳統的做法就是等timeout  那timeout可能會花比較長的時間

83
00:05:00,280 --> 00:05:02,909
好，我們就來看這三種方法是什麼

84
00:05:02,910 --> 00:05:05,450
第一個我們叫做negative acknowledgement

85
00:05:05,450 --> 00:05:10,510
就是說我回、我們一般的acknowledgement叫做所謂的positive

86
00:05:10,510 --> 00:05:14,680
就是我收到一個封包  正確的時候我才回ACK

87
00:05:14,680 --> 00:05:18,750
那我如果收到一個封包是錯的我就把它丟掉

88
00:05:18,750 --> 00:05:23,310
就是錯的是不回ACK的  那這個就是所謂的傳統的ACK

89
00:05:23,310 --> 00:05:27,750
好，那negative的acknowledgement就是說

90
00:05:27,750 --> 00:05:31,410
我收到一個封包  如果這個封包是錯的那我也回一個ACK

91
00:05:31,410 --> 00:05:34,350
直接跟sender說這個封包是錯的

92
00:05:34,350 --> 00:05:37,910
那這樣至少這個sender不用等timeout

93
00:05:37,910 --> 00:05:41,710
如果正常就是封包來那發現這個封包錯

94
00:05:41,710 --> 00:05:42,979
正常就把它丟掉

95
00:05:42,980 --> 00:05:47,680
丟掉以後就沒有ACK、沒有ACK Sender就只好等timeout

96
00:05:47,680 --> 00:05:49,610
那我現在是說  好，我收到一個封包

97
00:05:49,610 --> 00:05:52,210
如果這個封包是錯的我也回一個ACK

98
00:05:52,210 --> 00:05:55,609
但是這個ACK叫做negative  代表跟它說這個封包

99
00:05:55,610 --> 00:05:58,580
我剛剛收到一個封包編號是多少它是錯的

100
00:05:58,580 --> 00:06:01,510
那這樣至少一個round-trip time

101
00:06:01,510 --> 00:06:03,880
Sender就知道  不用等timeout

102
00:06:03,880 --> 00:06:05,510
等於說不用等到timeout

103
00:06:05,510 --> 00:06:08,980
Sender就知道說這個封包可能掉了、可能錯了

104
00:06:08,980 --> 00:06:11,650
它就可以重送  所以這個是第一個方法

105
00:06:11,650 --> 00:06:18,10
我們可以加快sender知道它的封包掉的這樣的事實

106
00:06:18,10 --> 00:06:20,380
就是用所謂的negative acknowledgement

107
00:06:20,380 --> 00:06:24,210
好，那第二個我們叫做additional acknowledgement

108
00:06:24,210 --> 00:06:28,109
也就是說如果呢我們收到這個

109
00:06:28,110 --> 00:06:31,650
譬如說當frame 3收到的時候

110
00:06:31,650 --> 00:06:35,710
我們講receiver拉收到frame 3收到的時候

111
00:06:35,710 --> 00:06:41,210
它就另外多送一個這個for frame 2這個ACK

112
00:06:41,210 --> 00:06:43,909
再多送一個ACK給這個frame 2

113
00:06:43,910 --> 00:06:49,910
就是說我們可能會送duplicate ACK

114
00:06:49,910 --> 00:06:52,110
就frame loss本身

115
00:06:52,110 --> 00:06:56,150
譬如說這麼講就假設呢這個frame 2它是掉了

116
00:06:56,150 --> 00:06:59,710
就Frame 2掉了那可是frame 3一到的時候

117
00:06:59,710 --> 00:07:01,810
因為沒有按照順序來嘛

118
00:07:01,810 --> 00:07:05,480
就是編號2的假設它掉了  那編號3的到了

119
00:07:05,480 --> 00:07:08,180
那我們馬上就回一個ACK

120
00:07:08,180 --> 00:07:12,250
跟對方講說這個我收到了一個封包編號

121
00:07:12,250 --> 00:07:16,410
我現在缺的是哪一個、缺的是哪一個

122
00:07:16,410 --> 00:07:23,510
就變成說我們用所謂的duplicate ACK來把這個狀況呢告訴sender

123
00:07:23,510 --> 00:07:27,680
那為什麼叫做additional  就是說我是多送ACK的意思多送

124
00:07:27,680 --> 00:07:30,950
本來的做法是說  好，我一個封包進來

125
00:07:30,950 --> 00:07:32,580
正確我就回一個ACK

126
00:07:32,580 --> 00:07:37,450
那如果它沒有收到的話

127
00:07:37,450 --> 00:07:39,450
我就沒有回ACK

128
00:07:39,450 --> 00:07:40,880
那我如果收到一個封包我發現

129
00:07:40,880 --> 00:07:44,750
我中間有漏掉  中間有空隙

130
00:07:44,750 --> 00:07:46,750
譬如說我收到1、收到3

131
00:07:46,750 --> 00:07:49,410
那我也針對這個2我也回一個ACK給它

132
00:07:49,410 --> 00:07:52,150
就是說我會多回一個ACK出去

133
00:07:52,150 --> 00:07:56,150
那即使沒有按照順序收到的封包我也回ACK

134
00:07:56,150 --> 00:07:59,750
那這就是所謂的additional ACK、additional acknowledgement

135
00:07:59,750 --> 00:08:02,10
也可以讓這個sender發現說

136
00:08:02,10 --> 00:08:06,409
如果你收到連續的相同的ACK

137
00:08:06,410 --> 00:08:10,410
就剛剛我們有介紹  譬如說我收到ACK 2、ACK 2、ACK 2

138
00:08:10,410 --> 00:08:13,350
我們收到相同的ACK

139
00:08:13,350 --> 00:08:17,80
那我們就可以判斷說可能有封包掉了的意思

140
00:08:17,80 --> 00:08:20,580
所以additional acknowledgement它的最大的好處在於說

141
00:08:20,580 --> 00:08:23,510
我們這種額外丟出去的這種ACK

142
00:08:23,510 --> 00:08:28,680
會讓sender呢它有機會來判斷說封包是不是掉了

143
00:08:28,680 --> 00:08:33,909
因為你封包掉了所以receiver才會送重複的ACK的意思

144
00:08:33,909 --> 00:08:37,780
那重複的ACK其實它是代表說封包可能掉了

145
00:08:37,780 --> 00:08:41,949
好，最後一個我們叫selective acknowledgement

146
00:08:41,950 --> 00:08:44,810
我們看一下什麼叫做selective acknowledgement

147
00:08:44,810 --> 00:08:50,780
就是receiver呢它會收到什麼封包  就回什麼ACK

148
00:08:50,780 --> 00:08:53,280
我們叫做selective  它選擇性的就是說

149
00:08:53,280 --> 00:08:59,650
剛剛提到譬如說我們送了所謂的2、3、4、5、6

150
00:08:59,650 --> 00:09:05,280
我們假設有5個封包嘛  那3、4、5、6先進來2沒有進來

151
00:09:05,280 --> 00:09:10,110
3、4、5、6先進來  好，然後我們就回3、4、5、6

152
00:09:10,110 --> 00:09:18,250
等於說selective就是說收到那些封包是正確的  我們就回哪些ACK

153
00:09:18,250 --> 00:09:22,850
剛剛提到本來是我想收的是2、3、4、5、6嘛

154
00:09:22,850 --> 00:09:25,10
然後3、4、5、6進來

155
00:09:25,10 --> 00:09:28,450
那我就回3、4、5、6  選擇性的回

156
00:09:28,450 --> 00:09:32,950
那這樣server就知道說這個frame 2呢它lost掉

157
00:09:32,950 --> 00:09:38,110
因為沒有回frame 2  2沒有回那回了3、4、5、6

158
00:09:38,110 --> 00:09:42,350
所以我們選擇性的回應  也可以讓sender知道說

159
00:09:42,350 --> 00:09:47,610
沒有收到回覆的就代表它是lost掉  所以這個也是一個做法

160
00:09:47,610 --> 00:09:51,950
那這三種做法呢在這個protocol裡面呢

161
00:09:51,950 --> 00:09:54,680
也都有不同的設計、不同的使用

162
00:09:54,680 --> 00:09:57,979
像negative、additional、selective acknowledgement

163
00:09:57,980 --> 00:10:01,80
在不同的protocol呢都有被使用到

164
00:10:01,80 --> 00:10:05,680
好，那接下來我們來談一個也是非常重要的問題

165
00:10:05,680 --> 00:10:08,79
就是說 好，那我們說

166
00:10:08,80 --> 00:10:12,410
在sliding window裡面  Sender有一個window

167
00:10:12,410 --> 00:10:16,480
那receiver也有一個window  就是sender跟receiver都有一個window

168
00:10:16,480 --> 00:10:19,850
那這個window呢很重要就叫window size

169
00:10:19,850 --> 00:10:23,450
window size代表說  像sender來講

170
00:10:23,450 --> 00:10:28,910
它的window代表說它同時可以送多少個封包出去

171
00:10:28,910 --> 00:10:31,209
而不用等ACK  這是sender

172
00:10:31,210 --> 00:10:39,750
Receiver的window代表是說  它同時可以收多少個沒有按照順序到達的封包

173
00:10:39,750 --> 00:10:42,310
我們講out-of-frame、out-of-order

174
00:10:42,310 --> 00:10:45,349
對不起，out-of-order的frame同時有多少個

175
00:10:45,350 --> 00:10:46,550
叫做window size

176
00:10:46,550 --> 00:10:51,510
那window size到底要設多大才是最恰當的呢

177
00:10:51,510 --> 00:10:54,180
就是我們講window size到底怎麼來決定呢

178
00:10:54,180 --> 00:10:57,50
我們說我們為了讓這個系統的

179
00:10:57,50 --> 00:11:01,579
剛剛提到為了讓這個window本身在滑動的時候呢

180
00:11:01,580 --> 00:11:04,310
能夠最流暢嘛、最流暢

181
00:11:04,310 --> 00:11:07,680
那我們希望說能夠把這個pipe能夠把它塞滿

182
00:11:07,680 --> 00:11:10,209
Pipe就是sender跟receiver之間

183
00:11:10,210 --> 00:11:12,410
然後把它當成一個管線

184
00:11:12,410 --> 00:11:16,250
這個管線的資料量我們講就delay乘上bandwidth

185
00:11:16,250 --> 00:11:20,50
所以我們很簡單如果可以的話

186
00:11:20,50 --> 00:11:24,550
這個sending的window size就把它設定成這個相乘

187
00:11:24,550 --> 00:11:27,910
就希望說、我希望把這個

188
00:11:27,910 --> 00:11:31,280
Pipe呢能夠把它塞滿的意思

189
00:11:31,280 --> 00:11:34,610
所以我希望這個window size就是那麼大

190
00:11:34,610 --> 00:11:37,710
然後我就把它這樣一直塞一直把它可以這樣子送

191
00:11:37,710 --> 00:11:39,780
最好是這樣、最好是這樣

192
00:11:39,780 --> 00:11:44,610
但是有時候條件沒有那麼好  我們再看一下它的receiver呢

193
00:11:44,610 --> 00:11:47,880
Receiver的window size我們說比較有彈性

194
00:11:47,880 --> 00:11:51,810
它通常有兩個做法

195
00:11:51,810 --> 00:11:54,349
第一個呢就是讓它的值等於1

196
00:11:54,350 --> 00:11:57,950
等於1是什麼意思呢

197
00:11:57,950 --> 00:12:01,110
就是receiver的這個window size只有1

198
00:12:01,110 --> 00:12:04,810
1代表是說等於說你只能有一個buffer

199
00:12:04,810 --> 00:12:07,310
那我們說這個buffer只有一個

200
00:12:07,310 --> 00:12:11,79
我們說你落在這個window外面的

201
00:12:11,80 --> 00:12:13,250
左邊、右邊通通都不能要

202
00:12:13,250 --> 00:12:17,50
那當我的buffer只有1的時候是什麼意思呢

203
00:12:17,50 --> 00:12:19,550
只有1的時候代表說

204
00:12:19,550 --> 00:12:25,680
只能按順序到的那個封包你才收  因為buffer只有一個

205
00:12:25,680 --> 00:12:29,880
這個一個是為了按照順序來的那一個

206
00:12:29,880 --> 00:12:34,310
你只要沒有按照順序來的、我們講out-of-order、提早到了

207
00:12:34,310 --> 00:12:38,650
都沒有buffer拉  因為buffer只有1嘛

208
00:12:38,650 --> 00:12:39,750
也就是說這個時候

209
00:12:39,750 --> 00:12:44,980
所有我們講out-of-order的就通通沒有buffer

210
00:12:44,980 --> 00:12:48,750
都不收的意思  就是這個時候receiver條件就比較嚴格

211
00:12:48,750 --> 00:12:53,480
就我只有一個buffer  我只收按照順序到達的封包

212
00:12:53,480 --> 00:12:59,610
沒有按照順序到達的封包  我沒有空間暫存所以通通就把它丟掉

213
00:12:59,610 --> 00:13:03,780
那我說那我的receiver的window如果只有一個

214
00:13:03,780 --> 00:13:09,510
那沒有按照順序來的通通把它丟掉會怎樣

215
00:13:10,450 --> 00:13:13,710
就是我是receiver呀  那我把這個我的window size設為1呀

216
00:13:13,710 --> 00:13:17,750
sender你可以訂很大那是你的事呀

217
00:13:17,750 --> 00:13:19,610
我是receiver我就訂1嘛

218
00:13:19,610 --> 00:13:20,850
好，那我就看

219
00:13:20,850 --> 00:13:22,550
你按照順序來的我就收阿

220
00:13:22,550 --> 00:13:25,750
你收了我就滑一個等下一個對不對

221
00:13:25,750 --> 00:13:28,180
你按照順序來我就走阿、我就走沒關係

222
00:13:28,180 --> 00:13:31,150
但是如果你沒有按照順序來就都把你丟掉

223
00:13:31,150 --> 00:13:34,680
丟掉我們就說  那你把它丟掉會怎麼樣

224
00:13:34,680 --> 00:13:37,250
你覺得會發生什麼事情

225
00:13:37,250 --> 00:13:41,450
你把沒有按照順序進來的封包通通把它丟掉

226
00:13:41,450 --> 00:13:45,480
會發生什麼事情  第一個你沒有ACK回去

227
00:13:45,480 --> 00:13:49,350
第二個sender它終究會timeout

228
00:13:49,350 --> 00:13:51,280
Timeout就會重送

229
00:13:51,280 --> 00:13:55,780
也就是說雖然我們receiver把buffer訂為一個

230
00:13:55,780 --> 00:13:59,150
把沒有按照順序進來的通通把它丟掉

231
00:13:59,150 --> 00:14:04,810
我們說這個protocol它還是回正常的運作

232
00:14:04,810 --> 00:14:07,849
就是它還是會、還是可以跑

233
00:14:07,850 --> 00:14:12,510
通訊還是可以跑  只是呢只是效能會變得差一點

234
00:14:12,510 --> 00:14:15,350
因為沒有按照順序來的被丟掉

235
00:14:15,350 --> 00:14:17,980
等一下就會timeout就會重送

236
00:14:17,980 --> 00:14:21,80
那我們剛剛提到的一旦發生重送

237
00:14:21,80 --> 00:14:23,410
整個這個throughput會降低

238
00:14:23,410 --> 00:14:26,79
就是說throughput雖然沒有這麼好

239
00:14:26,80 --> 00:14:28,710
但是呢它還是可以運作的

240
00:14:28,710 --> 00:14:33,510
也就是說這個傳輸可能會比較不流暢可能會比較慢

241
00:14:33,510 --> 00:14:36,410
但是呢還是會持續地進行

242
00:14:36,410 --> 00:14:41,510
所以這個receiver window size不管你怎麼設都可以

243
00:14:41,510 --> 00:14:45,380
那通常設你即使設為1它也是walkable

244
00:14:45,380 --> 00:14:49,210
我說設為1也不是說不能跑它還是可以跑

245
00:14:49,210 --> 00:14:52,250
當然如果要讓效能比較好

246
00:14:52,250 --> 00:14:54,910
我們當然希望說這個receiving

247
00:14:54,910 --> 00:14:57,610
receiving的window size能夠大一點

248
00:14:57,610 --> 00:15:01,180
大一點代表說  那至少說沒有按照順序來的

249
00:15:01,180 --> 00:15:07,310
我們也可以把它存下來嘛  那你存下來等一下順序 按照順序一到

250
00:15:07,310 --> 00:15:10,550
我滑的比較快  我就ACK比較多

251
00:15:10,550 --> 00:15:14,849
那我整個效能就會提高的意思拉

252
00:15:14,850 --> 00:15:18,880
也就是說我們這個receiving window size本身

253
00:15:18,880 --> 00:15:22,50
我們設為1  甚至說我們希望大一點

254
00:15:22,50 --> 00:15:26,209
我們就設為跟sending的window size也一樣

255
00:15:26,210 --> 00:15:28,680
這個都可以拉都可以

256
00:15:28,680 --> 00:15:30,479
不過我們想要說

257
00:15:30,480 --> 00:15:37,580
那如果我們把這個receiver window size把它設為大於這個sending

258
00:15:37,580 --> 00:15:43,780
就是接收端的window size比sender端的還大

259
00:15:43,780 --> 00:15:45,550
到底有沒有意義

260
00:15:45,550 --> 00:15:49,310
我們說這樣做其實是沒有意義的

261
00:15:49,310 --> 00:15:53,579
因為sender sending這邊最多就是送

262
00:15:53,580 --> 00:15:58,950
最多最多同時丟出來的就只有這個SWS這樣的量

263
00:15:58,950 --> 00:16:03,710
那你receiver設的比它還大  這個其實沒有意義

264
00:16:03,710 --> 00:16:06,710
因為你用不到  因為最多就是送出

265
00:16:06,710 --> 00:16:11,250
最多sender同時丟出來的封包

266
00:16:11,250 --> 00:16:16,610
最多就是SWS這麼多個  那你buffer比它還大

267
00:16:16,610 --> 00:16:19,550
就大部分是用不到的用不到

268
00:16:19,550 --> 00:16:22,849
所以這樣的設計是不太make sense的


1
00:00:09,150 --> 00:00:13,180
好，我們用一個例子來說明說這個sender的window

2
00:00:13,180 --> 00:00:15,180
到底什麼時候可以做sliding

3
00:00:15,180 --> 00:00:19,350
就是雖然說這個技術叫做所謂的sliding window

4
00:00:19,350 --> 00:00:23,680
就是視窗會滑動  可是視窗到底什麼時候滑動

5
00:00:23,680 --> 00:00:25,50
我們講它的時間

6
00:00:25,50 --> 00:00:31,750
就是什麼時候呢這個sender它可以允許來滑動它的視窗

7
00:00:31,750 --> 00:00:34,350
這是一個很重要的關鍵

8
00:00:34,350 --> 00:00:36,180
那因為我們剛剛提到說

9
00:00:36,180 --> 00:00:40,810
我sender本身可能會同時送多個封包在外面

10
00:00:40,810 --> 00:00:43,910
然後每一個封包可能會對應有一個ACK

11
00:00:43,910 --> 00:00:51,50
可是因為網路的狀況   這些ACK不一定按照順序回到這個sender這邊來

12
00:00:51,50 --> 00:00:54,209
就是這個ACK本身如果順序不對的話

13
00:00:54,210 --> 00:00:56,950
我們的window可以隨便滑嗎

14
00:00:56,950 --> 00:00:59,910
我們來看一下我們剛剛的例子

15
00:00:59,910 --> 00:01:02,449
在這個例子裡面我們一樣我們看一下

16
00:01:02,450 --> 00:01:06,280
我們已經用7個封包丟在外面  編號假設喔

17
00:01:06,280 --> 00:01:09,310
在這個例子裡面這個綠色的這個地方

18
00:01:09,310 --> 00:01:13,650
2、3、4、5、6、7、8

19
00:01:13,650 --> 00:01:18,750
就7個封包綠色的代表已經送出去了在等ACK

20
00:01:18,750 --> 00:01:21,750
然後這個左邊的這個藍色呢

21
00:01:21,750 --> 00:01:24,110
代表這個是已經收到ACK了

22
00:01:24,110 --> 00:01:26,380
那接下來我們就來看看說

23
00:01:26,380 --> 00:01:31,380
我們在等的ACK有2、3、4、5、6、7、8

24
00:01:31,380 --> 00:01:32,850
我們等7個ACK

25
00:01:32,850 --> 00:01:36,280
只是這個ACK本身不一定按照順序回來

26
00:01:36,280 --> 00:01:37,750
因為ACK可能會被delay

27
00:01:37,750 --> 00:01:40,50
所以我們就看這個狀況

28
00:01:40,50 --> 00:01:41,110
我們先看第一個

29
00:01:41,110 --> 00:01:46,210
好，第一個是封包4的ACK回來

30
00:01:46,210 --> 00:01:51,550
就因為我們現在希望看到的是2、3、4、5、6、7、8嘛

31
00:01:51,550 --> 00:01:54,550
7個ACK現在ACK 4先回來了

32
00:01:54,550 --> 00:01:55,980
好，我們再看一次

33
00:01:55,980 --> 00:01:59,10
我們這個地方ACK 4收到了

34
00:01:59,10 --> 00:02:02,680
這個時候我們視窗還不能動、視窗不能動

35
00:02:02,680 --> 00:02:05,480
我只能說ACK 4收到把它變成藍色

36
00:02:05,480 --> 00:02:07,10
代表說我收到了這個4

37
00:02:07,10 --> 00:02:09,150
好，再來看下一個ACK是誰呢

38
00:02:09,150 --> 00:02:11,350
假設下一個ACK是3

39
00:02:11,350 --> 00:02:14,250
這個時候我們還是不能動這個視窗

40
00:02:14,250 --> 00:02:18,710
這個視窗還是不能夠滑動  因為那個2沒有回來

41
00:02:18,710 --> 00:02:22,150
我們一定要收到2這個ACK 2

42
00:02:22,150 --> 00:02:23,780
我們這個視窗才能滑動

43
00:02:23,780 --> 00:02:27,310
在2沒有回來之前不管你回來那些ACK

44
00:02:27,310 --> 00:02:31,50
我們只能記錄不能滑動  再來看下一個

45
00:02:31,50 --> 00:02:33,610
好，現在是6還是不能動

46
00:02:33,610 --> 00:02:36,250
再來一個 譬如說現在5還是不能動

47
00:02:36,250 --> 00:02:39,380
我們收到的ACK已經有3、4、5、6

48
00:02:39,380 --> 00:02:43,980
但是這個視窗呢通通不能動  我們必須等2回來

49
00:02:43,980 --> 00:02:45,880
我們接下來看這個時候2回來了

50
00:02:45,880 --> 00:02:49,350
好，當這個2回來的時候發生什麼事呢

51
00:02:49,350 --> 00:02:51,850
這個2一回來一把它補上去

52
00:02:51,850 --> 00:02:54,180
我們就發現2、3、4、5、6

53
00:02:54,180 --> 00:02:59,810
2、3、4、5、6這5個封包它的ACK全部到齊了

54
00:02:59,810 --> 00:03:07,950
2、3、4、5、6代表說  2、3、4、5、6這個封包呢對方都已經成功收到了

55
00:03:07,950 --> 00:03:09,780
它的任務已經結束了

56
00:03:09,780 --> 00:03:11,850
2、3、4、5、6可以清掉了

57
00:03:11,850 --> 00:03:14,650
好，因為我已經確認對方收到了

58
00:03:14,650 --> 00:03:17,110
因為ACK回來了  好，接下來你注意到

59
00:03:17,110 --> 00:03:19,680
我們開始要滑動了  怎麼滑動呢

60
00:03:19,680 --> 00:03:24,110
來，我們看一下 LAR就要移到6

61
00:03:24,110 --> 00:03:29,180
因為LAR記錄著我們最後收到的ACK、連續的ACK

62
00:03:29,180 --> 00:03:32,680
最後收到的連續的這個acknowledgement是多少

63
00:03:32,680 --> 00:03:35,180
現在是6嘛所以就移到6

64
00:03:35,180 --> 00:03:39,650
然後接下來呢注意到視窗  我們看一下視窗怎麼滑動

65
00:03:39,650 --> 00:03:44,910
視窗就往後還有往右邊滑動5個位置

66
00:03:44,910 --> 00:03:50,710
因為我們這一次直接檢查了是2、3、4、5、6

67
00:03:50,710 --> 00:03:54,810
等於說是5個acknowledgement一併、一起處理

68
00:03:54,810 --> 00:03:58,250
所以我們的視窗就一次就滑了五個位置

69
00:03:58,250 --> 00:04:00,350
那滑了五個位置之後呢

70
00:04:00,350 --> 00:04:03,410
我們就發現說  那你滑了五個位置之後

71
00:04:03,410 --> 00:04:07,10
這邊就多了這個五個就跑出來了

72
00:04:07,10 --> 00:04:09,679
就是9、10、11、12、13

73
00:04:09,680 --> 00:04:15,550
就代表說如果sender  如果它手上有封包要送的話

74
00:04:15,550 --> 00:04:18,450
這個時候可以用的sequence number

75
00:04:18,450 --> 00:04:20,250
就是9、10、11、12、13

76
00:04:20,250 --> 00:04:23,250
它可以用就看它手上有沒有資料拉

77
00:04:23,250 --> 00:04:25,950
如果手上沒有資料就暫時就這樣子

78
00:04:25,950 --> 00:04:27,50
如果手上有資料

79
00:04:27,50 --> 00:04:30,510
它可以馬上用9、10、11、12、13

80
00:04:30,510 --> 00:04:32,450
把這個五個把它用完

81
00:04:32,450 --> 00:04:36,810
用完之後當然又填滿了又不能再用了

82
00:04:36,810 --> 00:04:41,710
所以它就必須再等下一波的ACK再回來

83
00:04:41,710 --> 00:04:47,549
所以我們再回到前面再看一次

84
00:04:47,550 --> 00:04:53,480
這個時候我們在等2、3、4、5、6、7、8七個ACK

85
00:04:53,480 --> 00:04:57,710
那這個ACK呢回來的時候如果它沒有按照順序回來

86
00:04:57,710 --> 00:05:01,650
只要第二個這個沒有回來

87
00:05:01,650 --> 00:05:05,80
我們說LAR加1的

88
00:05:05,80 --> 00:05:07,180
只要這個ACK沒有回來

89
00:05:07,180 --> 00:05:09,610
視窗是不能滑動的  所以我們看一下

90
00:05:09,610 --> 00:05:12,610
4回來不能動、3回來不能動

91
00:05:12,610 --> 00:05:15,610
好，6回來不能動、5回來不能動

92
00:05:15,610 --> 00:05:19,10
視窗都不能動  當這個2一回來的時候呢

93
00:05:19,10 --> 00:05:24,580
代表說可以滑動  那滑動可以滑動多少格呢

94
00:05:24,580 --> 00:05:28,650
就是滑動這個藍色的  連在一起的

95
00:05:28,650 --> 00:05:33,280
所以我們就直接連到最右邊的6、滑到最右邊的6

96
00:05:33,280 --> 00:05:34,580
然後整個滑過去

97
00:05:34,580 --> 00:05:38,409
這個時候我們這個叫做所謂的sliding window

98
00:05:38,410 --> 00:05:41,250
就是我們這個視窗就會開始滑動

99
00:05:41,250 --> 00:05:43,550
所以我們說剛剛提到的問題

100
00:05:43,550 --> 00:05:47,810
視窗、sender的視窗到底什麼時候可以滑動呢

101
00:05:47,810 --> 00:05:53,850
很簡單，就這個sender如果它收到了這個LAR

102
00:05:53,850 --> 00:05:57,150
右邊的我們叫LAR加1的意思

103
00:05:57,150 --> 00:06:02,510
當LAR加1的acknowledgement  以剛剛的例子就是2

104
00:06:02,510 --> 00:06:06,150
當這個acknowledgement收到的時候我就可以移動

105
00:06:06,150 --> 00:06:08,950
那就看看你可以移動多少格

106
00:06:08,950 --> 00:06:12,150
就看那個藍色的到底有沒有連在一起

107
00:06:12,150 --> 00:06:15,979
就是連在一起的最右邊移到最右邊那邊去

108
00:06:15,980 --> 00:06:19,550
這個就是sliding window一個非常聰明的方法

109
00:06:19,550 --> 00:06:22,510
就是雖然ACK本身會delay

110
00:06:22,510 --> 00:06:26,310
因為ACK可能先後到的這個時間不一樣

111
00:06:26,310 --> 00:06:28,750
雖然ACK回來的順序不一樣

112
00:06:28,750 --> 00:06:30,550
但是沒有關係我們把它記下來

113
00:06:30,550 --> 00:06:35,180
等到最左邊、等待ACK的最左邊的那個到了時候

114
00:06:35,180 --> 00:06:37,780
我們就開始滑動、一滑動就代表說

115
00:06:37,780 --> 00:06:41,609
又可以、sender又可以再送封包

116
00:06:41,610 --> 00:06:45,150
把這個視窗的這個size的封包用完

117
00:06:45,150 --> 00:06:48,210
就必須再等下一輪的ACK回來

118
00:06:48,210 --> 00:06:51,280
然後再滑動、再等ACK、再滑動、再等ACK

119
00:06:51,280 --> 00:06:52,950
好，那這樣的方式呢

120
00:06:52,950 --> 00:06:56,680
就可以讓這樣的sliding window比較流暢的在滑動

121
00:06:56,680 --> 00:06:58,210
那最好的機制就是說

122
00:06:58,210 --> 00:07:01,810
這個視窗如果可以設計得非常好的話

123
00:07:01,810 --> 00:07:05,450
最理想、最理想就是我們在傳輸的過程當中

124
00:07:05,450 --> 00:07:07,150
視窗不要停

125
00:07:07,150 --> 00:07:09,80
譬如說、譬如說我現在有8個

126
00:07:09,80 --> 00:07:12,409
我們講假設我們的window size是剛剛講

127
00:07:12,410 --> 00:07:13,10
好啦7個好了

128
00:07:13,10 --> 00:07:13,980
剛剛的這個例子7個

129
00:07:13,980 --> 00:07:17,950
我開始送嘛，1、2、3、4、5、6、7

130
00:07:17,950 --> 00:07:21,210
你在送的過程當中  ACK已經開始回來了

131
00:07:21,210 --> 00:07:24,580
因為我們是一個round-trip time  如果你設計得好的話

132
00:07:24,580 --> 00:07:25,950
就是這個視窗開始送

133
00:07:25,950 --> 00:07:27,979
開始用掉1、2、3、4、5、6、7

134
00:07:27,980 --> 00:07:32,210
當你送到7的時候ACK就依舊回來那你就移一個

135
00:07:32,210 --> 00:07:33,979
你送第八個的時候

136
00:07:33,980 --> 00:07:35,650
譬如說最左邊的ACK回來

137
00:07:35,650 --> 00:07:40,109
所以你這個視窗它就會一邊送一邊跑

138
00:07:40,110 --> 00:07:41,380
送的時候不要停

139
00:07:41,380 --> 00:07:45,750
就是如果你傳送的過程當中  從來就沒有停下來過

140
00:07:45,750 --> 00:07:51,650
那也就是說你這個一邊送ACK就一邊回

141
00:07:51,650 --> 00:07:55,909
你的視窗就會 我們講sliding非常的這個滑動的非常流暢

142
00:07:55,910 --> 00:08:00,210
那這是最完美的  因為我傳輸從來沒聽過

143
00:08:00,210 --> 00:08:05,380
因為你只要一停下來 我們的throughput就會下降

144
00:08:05,380 --> 00:08:08,610
那跟你講stop-and-wait就是你送一個就必須停下來

145
00:08:08,610 --> 00:08:11,250
等一個round-trip time所以最差嘛

146
00:08:11,250 --> 00:08:13,480
那sliding window就是最好

147
00:08:13,480 --> 00:08:17,450
最好就是讓這個window在sliding的過程當中不要停止

148
00:08:17,450 --> 00:08:19,680
那這個就是要設計拉

149
00:08:19,680 --> 00:08:22,950
那接下來我們來看一下  這個receiver這一端

150
00:08:22,950 --> 00:08:26,310
它的window、sliding window怎麼來設計呢

151
00:08:26,310 --> 00:08:29,880
我們剛剛提到說這個sender本身有一個sending

152
00:08:29,880 --> 00:08:32,350
這個window size嘛

153
00:08:32,350 --> 00:08:33,750
一樣相對的

154
00:08:33,750 --> 00:08:37,850
Receiver這邊它也有一個叫做receiving window size

155
00:08:37,850 --> 00:08:40,80
我們叫RWS

156
00:08:40,80 --> 00:08:43,380
就是接收這一端它一樣有一個window size

157
00:08:43,380 --> 00:08:44,850
這個window size是做什麼

158
00:08:44,850 --> 00:08:47,710
就是說在這個window size裡面

159
00:08:47,710 --> 00:08:50,810
因為它裡面都是sequence number的意思

160
00:08:50,810 --> 00:08:53,50
就是我們如果收到一個封包

161
00:08:53,50 --> 00:08:57,180
這個封包的sequence number是掉在這個window size裡面的

162
00:08:57,180 --> 00:08:59,810
Receiver才可以收的意思

163
00:08:59,810 --> 00:09:04,609
也就是說因為封包過來的、進來的過程當中

164
00:09:04,610 --> 00:09:06,550
也有可能會我們剛剛講

165
00:09:06,550 --> 00:09:08,979
剛剛提到ACK可能會被delay嘛

166
00:09:08,980 --> 00:09:11,780
一樣這個frame也會被delay

167
00:09:11,780 --> 00:09:16,980
就是這個封包本身  我們因為sender同時送多個封包

168
00:09:16,980 --> 00:09:19,410
那這個多個封包呢

169
00:09:19,410 --> 00:09:22,610
也有可能在傳輸的過程當中也有可能剛好順序倒過來

170
00:09:22,610 --> 00:09:25,510
也就是說它們到達這個receiver的時間

171
00:09:25,510 --> 00:09:30,650
可能會譬如說順序不對  當然順序不對還有另外一個可能就是

172
00:09:30,650 --> 00:09:36,79
因為我封包可能有掉  封包掉了之後我會做重送、retransmission

173
00:09:36,80 --> 00:09:38,950
那你重送就代表順序可能就跟原來不一樣

174
00:09:38,950 --> 00:09:40,950
本來是1跟2嘛、那1掉了

175
00:09:40,950 --> 00:09:45,710
人家1重送、重送就在2的後面  變成2跟1

176
00:09:45,710 --> 00:09:48,280
就是說因為封包可能會延遲

177
00:09:48,280 --> 00:09:50,50
也有可能因為封包可能會掉

178
00:09:50,50 --> 00:09:52,150
那掉了之後可能會有timeout

179
00:09:52,150 --> 00:09:54,579
Timeout會引發所謂的retransmission

180
00:09:54,580 --> 00:09:59,480
那這兩種因素都有可能造成說receiver

181
00:09:59,480 --> 00:10:03,350
它看到封包呢  它也不是按照順序進來

182
00:10:03,350 --> 00:10:06,180
那沒有按照順序進來的話

183
00:10:06,180 --> 00:10:09,650
我們為了讓這個封包還是能夠接受

184
00:10:09,650 --> 00:10:13,10
所以我們就用一個buffer那把它保留起來

185
00:10:13,10 --> 00:10:16,180
好，那這個所謂的RWS呢

186
00:10:16,180 --> 00:10:20,849
就是這個buffer的上限  譬如說我們如果是等於七

187
00:10:20,850 --> 00:10:26,180
代表說假設等於七的話  代表說在這個receiving window size

188
00:10:26,180 --> 00:10:30,510
這個裡面的七個sequence number  我們是收的

189
00:10:30,510 --> 00:10:33,50
那在這七個sequence number之外的

190
00:10:33,50 --> 00:10:38,280
不管是小於或者大於我們通通不收  通通不要

191
00:10:38,280 --> 00:10:41,980
所以這個我們講receiving window size呢

192
00:10:41,980 --> 00:10:45,850
就是來處理我們講out-of-order的frame

193
00:10:45,850 --> 00:10:49,410
那receiver呢可以接受

194
00:10:49,410 --> 00:10:55,650
就是Receiver它願意來接收這個window size裡面封包

195
00:10:55,650 --> 00:10:56,579
這是它願意收的

196
00:10:56,580 --> 00:10:59,710
這個widow size外 window外面的

197
00:10:59,710 --> 00:11:00,680
我們都不收

198
00:11:00,680 --> 00:11:03,849
那這個size當然只是一個數量嘛

199
00:11:03,850 --> 00:11:05,910
代表七或八這樣子

200
00:11:05,910 --> 00:11:08,550
好，那receiver還要記得一個就是

201
00:11:08,550 --> 00:11:11,550
我們叫做largest acceptable的frame

202
00:11:11,550 --> 00:11:16,79
相當於說我們講receiving window size

203
00:11:16,80 --> 00:11:18,250
Window size是個window它只一個量

204
00:11:18,250 --> 00:11:20,110
譬如說window size它是七還是八

205
00:11:20,110 --> 00:11:23,450
但是我們要真正把它具體變成要知道說

206
00:11:23,450 --> 00:11:25,680
那最大的sequence number

207
00:11:25,680 --> 00:11:28,10
可接受的最大的sequence number是什麼

208
00:11:28,10 --> 00:11:30,680
因為視窗會滑動

209
00:11:30,680 --> 00:11:32,280
我們一滑動的時候

210
00:11:32,280 --> 00:11:36,910
我們要知道說那現在可接受的sequence number的最大值

211
00:11:36,910 --> 00:11:40,610
所以就叫largest acceptable frame

212
00:11:40,610 --> 00:11:45,810
就是可接受的這個sequence number最大的是什麼

213
00:11:45,810 --> 00:11:48,550
另外一個叫做last frame received

214
00:11:48,550 --> 00:11:50,250
這個就是說

215
00:11:50,250 --> 00:11:54,210
那最後、我們最後最近收到的

216
00:11:54,210 --> 00:11:58,810
最近收到的這個frame它的sequence number是什麼

217
00:11:58,810 --> 00:12:03,209
就是我們最近收到、就是連續收到的最後一個

218
00:12:03,210 --> 00:12:04,650
我們看一下

219
00:12:04,650 --> 00:12:07,250
好，那在這個例子裡面呢

220
00:12:07,250 --> 00:12:09,410
我們來看一下一樣我們假設

221
00:12:09,410 --> 00:12:15,150
應該這麼看我們左邊這邊有三個代表說

222
00:12:15,150 --> 00:12:16,880
這個封包都已經收到了

223
00:12:16,880 --> 00:12:21,750
這個左邊這個三個綠色的  都是封包已經收到

224
00:12:21,750 --> 00:12:24,750
所以我們有一個叫LFR

225
00:12:24,750 --> 00:12:28,780
就last frame received最後收到的是3

226
00:12:28,780 --> 00:12:31,110
那在這個例子裡面我們假設一樣

227
00:12:31,110 --> 00:12:33,380
我們的Received window size是7

228
00:12:33,380 --> 00:12:38,710
就是說同時我可以接受7個封包進來的意思

229
00:12:38,710 --> 00:12:40,850
我們看一下那last frame

230
00:12:42,880 --> 00:12:47,680
這個最大的這個所謂的largest acceptable

231
00:12:47,680 --> 00:12:49,680
這個sequence number是10

232
00:12:49,680 --> 00:12:52,79
因為我們現在想要可以收的呢編號

233
00:12:52,80 --> 00:12:56,110
是4、5、6、7、8、9、10，我們有七個

234
00:12:56,110 --> 00:12:58,410
我們的window呢在這個地方

235
00:12:58,410 --> 00:13:00,280
我們window在這裡

236
00:13:00,280 --> 00:13:01,380
這是我們的window

237
00:13:01,380 --> 00:13:04,810
我們可以收的呢就是4、5、6、7、8、9、10

238
00:13:04,810 --> 00:13:07,780
也就是這個時候如果我收到的封包編號

239
00:13:07,780 --> 00:13:10,410
只要是在這個4、5、6、7、8、9、10的

240
00:13:10,410 --> 00:13:13,510
我們通通可以收進來的意思

241
00:13:13,510 --> 00:13:16,780
那超過這個我們通通不收的意思

242
00:13:16,780 --> 00:13:19,709
那為了維持這樣的關係嘛

243
00:13:19,710 --> 00:13:24,780
我們說一樣我們這個LAF減掉LFR

244
00:13:24,780 --> 00:13:28,910
還是要小於等於這個所謂的RWS

245
00:13:28,910 --> 00:13:30,750
就是這個關係還是要存在

246
00:13:30,750 --> 00:13:33,280
因為我們有一個window size

247
00:13:33,280 --> 00:13:37,780
這個size代表說我同時可以收多少個封包

248
00:13:37,780 --> 00:13:40,280
而它們本身這個順序

249
00:13:40,280 --> 00:13:41,280
沒有按照順序來

250
00:13:41,280 --> 00:13:43,910
好，接下來我們就來看

251
00:13:43,910 --> 00:13:47,79
好，現在封包進來了  我們會做什麼事情

252
00:13:47,80 --> 00:13:48,50
我們首先看一下

253
00:13:48,50 --> 00:13:51,709
好，如果我們收到的是編號4的封包

254
00:13:51,710 --> 00:13:54,450
這個時候編號4的封包被收進來了

255
00:13:54,450 --> 00:13:56,450
好，這個封包收進來呢

256
00:13:56,450 --> 00:13:58,680
現在就有一個特別的現象

257
00:13:58,680 --> 00:14:01,310
就是這個封包剛好在我們window

258
00:14:01,310 --> 00:14:03,109
這個window的最左邊

259
00:14:03,110 --> 00:14:07,50
那代表說這個時候因為4進來了嘛

260
00:14:07,50 --> 00:14:10,680
那因為它是按照順序進來的  特別注意到

261
00:14:10,680 --> 00:14:13,810
這個4是因為它是按照順序進來的

262
00:14:13,810 --> 00:14:17,479
所以這個4這個封包我們就可以丟給上一層的

263
00:14:17,480 --> 00:14:20,180
因為我們提供的這個傳輸說

264
00:14:20,180 --> 00:14:23,280
1、2、3前面1、2、3都收到了嘛

265
00:14:23,280 --> 00:14:27,10
那我就已經丟給上一層  那我現在4也進來了

266
00:14:27,10 --> 00:14:30,880
那它也按照順序進來了那我就把它丟給上一層

267
00:14:30,880 --> 00:14:35,250
可是我剛剛講我們有buffer  這個buffer剛剛講是7

268
00:14:35,250 --> 00:14:38,80
那我現在把4送上去之後

269
00:14:38,80 --> 00:14:43,510
其實我就可以把這個我們講LFR移到4來

270
00:14:43,510 --> 00:14:45,750
注意到我們接下來要滑動視窗了

271
00:14:45,750 --> 00:14:51,550
那我們視窗就移過來一格  移過來一格同時LAF

272
00:14:51,550 --> 00:14:55,180
就是我可以接受、可接受的sequence number

273
00:14:55,180 --> 00:14:57,349
就再往右移一格到11來

274
00:14:57,350 --> 00:15:00,410
所以這個時候狀況就是說

275
00:15:00,410 --> 00:15:04,579
好，雖然剛剛收到一個編號4的

276
00:15:04,580 --> 00:15:07,580
我就把4送給我這個上一層的protocol

277
00:15:07,580 --> 00:15:11,580
同時我把視窗往右邊移一格過去

278
00:15:11,580 --> 00:15:15,210
代表說這個時候我可以接受的封包呢

279
00:15:15,210 --> 00:15:18,350
範圍只要在這個地方我都可以接受

280
00:15:18,350 --> 00:15:23,210
變成我只要在這個地方範圍之內我都可以接受

281
00:15:23,210 --> 00:15:25,110
那這個是我們講

282
00:15:25,110 --> 00:15:29,50
如果你收到的封包它的順序是

283
00:15:29,50 --> 00:15:31,979
按照這個window的最左邊進來的話

284
00:15:31,980 --> 00:15:33,850
我們就可以移一格

285
00:15:33,850 --> 00:15:37,510
移一格代表說你可以再收這個更新的封包

286
00:15:37,510 --> 00:15:39,510
好，那我們說

287
00:15:39,510 --> 00:15:43,580
當這個一個封包進來的時候

288
00:15:43,580 --> 00:15:46,450
或我們說它上面就帶著一個sequence number

289
00:15:46,450 --> 00:15:49,450
因為每一個封包我們都給它一個sequence number

290
00:15:49,450 --> 00:15:50,650
好，我們來看一下

291
00:15:50,650 --> 00:15:53,449
這個sequence number如果落在我們講

292
00:15:53,450 --> 00:15:54,680
一個我們的一個window

293
00:15:54,680 --> 00:15:56,949
落在這個視窗的左邊或右邊

294
00:15:56,950 --> 00:15:58,880
我們講如果這個sequence number

295
00:15:58,880 --> 00:16:03,810
它是小於這個LFR，就落在左邊，小於等於

296
00:16:03,810 --> 00:16:08,10
或者大於這個LAF就largest acceptable

297
00:16:08,10 --> 00:16:13,110
在左邊或在右邊我們都把它丟掉  如果我們收到一個封包

298
00:16:13,110 --> 00:16:15,650
它的sequence number不在我的視窗內

299
00:16:15,650 --> 00:16:18,680
在視窗的左邊或在視窗的右邊

300
00:16:18,680 --> 00:16:20,109
都代表什麼呢

301
00:16:20,110 --> 00:16:22,950
代表這個封包可能是重複了

302
00:16:22,950 --> 00:16:27,10
我們後面會解釋它可能因為我之前收過了

303
00:16:27,10 --> 00:16:30,510
我收過了那可能因為timeout所以重送

304
00:16:30,510 --> 00:16:34,350
剛剛提到我們說我sender送一個封包

305
00:16:34,350 --> 00:16:39,280
我已經收到了我就移過去了嘛  那我移過去我就回一個ACK

306
00:16:39,280 --> 00:16:44,79
那這個ACK可能掉了或delay了  我們講ACK可能掉或delay

307
00:16:44,80 --> 00:16:45,280
Sender都會重送

308
00:16:45,280 --> 00:16:49,750
可是我如果receiver只要正確收到我就移走

309
00:16:49,750 --> 00:16:53,450
那你重送過來的時候  就會掉在我這個視窗外面

310
00:16:53,450 --> 00:16:56,380
那你重送的我就可以把它濾掉的意思

311
00:16:56,380 --> 00:17:00,250
那我們說如果剛好這個sequence number

312
00:17:00,250 --> 00:17:03,110
它是掉在這個window size

313
00:17:03,110 --> 00:17:06,210
我們講這是我們的window  只要這是掉在裡面

314
00:17:06,210 --> 00:17:08,780
不管在任何地方只要在這個視窗裡面

315
00:17:08,780 --> 00:17:12,450
我們通通把它收下來  這個它的概念是這樣子

316
00:17:12,450 --> 00:17:15,650
那一樣的我們用一個例子

317
00:17:15,650 --> 00:17:17,380
來跟各位說明一下

318
00:17:17,380 --> 00:17:22,650
就是說那receiver本身的這個window什麼時候可以滑動

319
00:17:22,650 --> 00:17:25,280
什麼時候這是非常非常重要的概念

320
00:17:25,280 --> 00:17:28,149
那我們來看一下  在這個例子裡面一樣

321
00:17:28,150 --> 00:17:32,180
我們剛剛有提到說  在這個例子裡面我們說假設

322
00:17:32,180 --> 00:17:40,680
最左邊這邊有一個  代表說這個1是已經收到而且已經回ACK了

323
00:17:40,680 --> 00:17:41,910
這個已經處理完了

324
00:17:41,910 --> 00:17:45,810
那我們接下來是有我們的window size一樣是7

325
00:17:45,810 --> 00:17:52,610
那我們這時候可以接收的sequence number  是2、3、4、5、6、7、8

326
00:17:52,610 --> 00:17:55,350
我們有這個七個號碼

327
00:17:55,350 --> 00:17:58,280
編號2、3、4、5、6、7、8是我們要收的

328
00:17:58,280 --> 00:18:01,180
好，那接下來就是說封包陸陸續續的到

329
00:18:01,180 --> 00:18:05,880
封包陸陸續續的到  但是呢不見得按照順序進來

330
00:18:05,880 --> 00:18:09,180
我們一樣我們假設收到一個封包  編號4的先進來

331
00:18:09,180 --> 00:18:13,710
這個就叫做out-of-order  因為它沒有按照我的順序

332
00:18:13,710 --> 00:18:15,980
我的順序是什麼  是2、3、4、5、6、7、8

333
00:18:15,980 --> 00:18:19,880
但是現在封包進來的編號是4  所以它並不是2

334
00:18:19,880 --> 00:18:24,10
如果是2就代表說它是依照順序進來的

335
00:18:24,10 --> 00:18:28,280
2才是我想要收到的最小的封包嘛

336
00:18:28,280 --> 00:18:30,980
但是呢這個時候先跑進來的是4

337
00:18:30,980 --> 00:18:35,280
這個時候我們就叫out-of-order，順序是不對的

338
00:18:35,280 --> 00:18:37,580
沒有關係只要在這個視窗裡面

339
00:18:37,580 --> 00:18:40,780
即使順序不對我們還是把它收下來

340
00:18:40,780 --> 00:18:43,379
所以4收起來  再來一個6

341
00:18:43,380 --> 00:18:46,210
順序也不對，我收起來沒關係

342
00:18:46,210 --> 00:18:48,650
再來一個3  也是不對的

343
00:18:48,650 --> 00:18:50,880
一樣先收起來、先存起來

344
00:18:50,880 --> 00:18:53,450
再來一個5，也是收起來

345
00:18:53,450 --> 00:18:57,80
注意到這個3、4、5、6進來的時候

346
00:18:57,80 --> 00:18:59,780
我們的視窗通通沒有動 因為我們在等那個2

347
00:18:59,780 --> 00:19:04,780
在這個case就是說 這個視窗的最左邊的

348
00:19:04,780 --> 00:19:08,950
最左邊的才是我們滑動視窗的這個時機

349
00:19:08,950 --> 00:19:10,710
也就是剛剛這個case就是說

350
00:19:10,710 --> 00:19:13,150
我們的視窗到底什麼時候可以移動呢

351
00:19:13,150 --> 00:19:17,410
我們說當LFR加1

352
00:19:17,410 --> 00:19:20,350
就是LFR在這裡加1就是這裡嘛

353
00:19:20,350 --> 00:19:24,909
就是視窗的最左邊  這個一定要等這個收到了

354
00:19:24,910 --> 00:19:28,450
視窗的最左邊收到了  我們才可以滑動

355
00:19:28,450 --> 00:19:31,10
那問題是我們前面已經收到了4個拉

356
00:19:31,10 --> 00:19:33,310
我們都不能動 接下來我們看

357
00:19:33,310 --> 00:19:36,280
我們不只要讓它可以滑動

358
00:19:36,280 --> 00:19:38,649
而且我們滑動一次要滑動多格

359
00:19:38,650 --> 00:19:42,50
好，這個時候2收進來了

360
00:19:42,50 --> 00:19:45,409
好，我們就發現2已經進來了

361
00:19:45,410 --> 00:19:48,950
代表最左邊的位置已經填滿了

362
00:19:48,950 --> 00:19:55,10
一樣跟sender很類似我們可以滑動到什麼時候呢

363
00:19:55,10 --> 00:19:56,879
我們可以一次滑好幾個

364
00:19:56,880 --> 00:19:58,710
譬如說我們就到這裡來

365
00:19:58,710 --> 00:20:05,350
我們注意到我們的所謂的LFR就直接從1滑到6

366
00:20:05,350 --> 00:20:09,280
因為我們這個時候已經有五個連續的

367
00:20:09,280 --> 00:20:14,810
都連在一起了有五格  我們的視窗一樣往右邊移五格

368
00:20:14,810 --> 00:20:19,480
一樣往右邊移五格 然後我們最大可以接受的sequence number

369
00:20:19,480 --> 00:20:23,50
一樣往右邊移五格  雖然這個例子就是說

370
00:20:23,50 --> 00:20:28,510
3、4、5、6收到  我們視窗呢還是不動

371
00:20:28,510 --> 00:20:34,410
等到2一進來  把這個空位一補滿我們馬上就滑動五格位置

372
00:20:34,410 --> 00:20:37,480
那代表說像我們滑到這個時候呢

373
00:20:37,480 --> 00:20:42,410
就代表說剛剛提到的  像這些通通已經收到了

374
00:20:42,410 --> 00:20:47,750
而且我們按照順序  因為2一進來就把它補齊了

375
00:20:47,750 --> 00:20:51,550
就相當於說  都已經按照順序收完了嘛

376
00:20:51,550 --> 00:20:55,649
我們就丟給我們的上一層  就是說我看上一層哪一個protocol

377
00:20:55,650 --> 00:20:57,910
把它丟上去 那這個就清掉了

378
00:20:57,910 --> 00:20:59,550
所以這個時候receiver呢

379
00:20:59,550 --> 00:21:04,10
它的視窗已經滑到這裡來了7到13

380
00:21:04,10 --> 00:21:07,450
就是這個時候它要收的封包的sequence number

381
00:21:07,450 --> 00:21:14,210
就是7到13中間的  那這個時候小於7的或者大於13的

382
00:21:14,210 --> 00:21:20,550
就是說在這一塊  左邊這一塊或者右邊這一塊的sequence number通通不收

383
00:21:20,550 --> 00:21:23,280
只收在這個window size裡面的

384
00:21:23,280 --> 00:21:25,110
好，我們再舉一個例子

385
00:21:25,110 --> 00:21:26,580
剛剛那個例子我們就假設

386
00:21:26,580 --> 00:21:33,179
假設這個我們的這個LFR等於1

387
00:21:33,180 --> 00:21:37,910
然後window size等於7  然後LAF最多最多等於8

388
00:21:37,910 --> 00:21:38,980
就剛剛那個例子

389
00:21:38,980 --> 00:21:45,410
好，我們說如果frame 4、6、3、5它們就按照順序

390
00:21:45,410 --> 00:21:46,850
4、6、3、5到達

391
00:21:46,850 --> 00:21:48,810
可是因為都是out-of-order嘛

392
00:21:48,810 --> 00:21:51,510
因為都沒有、不是原來我們想要的順序

393
00:21:51,510 --> 00:21:57,110
那我們還是把它放在就把它放在這個buffer裡面

394
00:21:57,110 --> 00:21:59,310
因為它還是落在這個window size裡面

395
00:21:59,310 --> 00:22:02,110
好，但是呢我們這時候呢

396
00:22:02,110 --> 00:22:06,550
不可以回ACK  因為frame 2還沒有到

397
00:22:06,550 --> 00:22:11,879
Frame 2並沒有收到  那最後我們假設frame 2它已經收到了

398
00:22:11,880 --> 00:22:15,980
那為什麼frame 2會比較慢才到呢

399
00:22:15,980 --> 00:22:20,180
為什麼4、6、3、5先到而frame 2比較慢到

400
00:22:20,180 --> 00:22:23,310
我們剛剛提到有可能因為它retransmit

401
00:22:23,310 --> 00:22:30,310
因為它的frame 2是重送 重送代表說它第一個封包掉了

402
00:22:30,310 --> 00:22:33,710
那現在重送過來 所以重送就會比較慢嘛

403
00:22:33,710 --> 00:22:36,780
那不管怎麼樣  不過2收到之後

404
00:22:36,780 --> 00:22:40,280
它就可以開始滑動了  那它一滑動的時候

405
00:22:40,280 --> 00:22:48,10
我們這個時候就等於說  LFR滑到6那LAF滑到13

406
00:22:48,10 --> 00:22:52,510
等於說我們就兩個這個point就直接這樣滑

407
00:22:52,510 --> 00:22:55,410
滑5個位置那到新的這個視窗

408
00:22:55,410 --> 00:22:58,910
那同時我們會回一個acknowledgement、就回應

409
00:22:58,910 --> 00:23:03,10
說6或6以前的通通收到了 我們看到這邊

410
00:23:03,10 --> 00:23:06,750
在這個例子裡面 這個6已經都收到了嘛

411
00:23:06,750 --> 00:23:10,380
所以我們就可以說  這個6一旦收到之後

412
00:23:10,380 --> 00:23:12,550
我們現在當然我們回acknowledgement

413
00:23:12,550 --> 00:23:16,550
就相當於用這個6來當成我們的一個指標

414
00:23:16,550 --> 00:23:20,680
就回給對方說這個6呢  就已經收到了

415
00:23:20,680 --> 00:23:21,980
那這樣的話

416
00:23:21,980 --> 00:23:27,810
我們這個receiver本身除了滑動之外同時告訴對方說

417
00:23:27,810 --> 00:23:30,750
我現在接收的情形是怎麼樣

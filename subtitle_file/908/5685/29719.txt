1
00:00:09,1 --> 00:00:11,65
我們介紹這個ethernet的這個protocol呢

2
00:00:11,65 --> 00:00:13,61
所謂的CSMA/CD嘛

3
00:00:13,61 --> 00:00:16,55
那接下來我們來看一下 這樣子的protocol呢

4
00:00:16,55 --> 00:00:19,67
它的效能到底好不好 因為我們說

5
00:00:19,68 --> 00:00:23,15
我們每次要送封包之前都要先去聽聽看

6
00:00:23,15 --> 00:00:28,15
如果是idle我們就送出去 如果是busy我們就等

7
00:00:28,15 --> 00:00:30,51
那送出去的時候也有可能發生collision

8
00:00:30,51 --> 00:00:32,51
collision的時候呢我們就把她

9
00:00:32,51 --> 00:00:34,48
送一個jam 把它停掉

10
00:00:34,48 --> 00:00:39,35
然後我們等待一個時間 再來重新再嘗試一次

11
00:00:39,35 --> 00:00:43,31
這樣的protocol呢 我們講他的效能到底好不好

12
00:00:43,31 --> 00:00:47,68
我們就說 事實上呢這種ethernet的這個整個運作呢

13
00:00:47,68 --> 00:00:51,25
他是在我們叫做lightly load的的時候是最好的

14
00:00:51,25 --> 00:00:53,18
就是所謂的load很輕的時候

15
00:00:53,18 --> 00:00:57,75
所謂的load很輕 就是說這個時候網路上面呢

16
00:00:57,75 --> 00:01:01,1
沒有什麼工作站要送封包

17
00:01:01,1 --> 00:01:03,15
就是比較少數啦

18
00:01:03,15 --> 00:01:06,11
那很少數的這個工作站想要送的話

19
00:01:06,11 --> 00:01:08,45
幾乎他每次一來 一送就成功

20
00:01:08,45 --> 00:01:12,18
所以我們接下來我們看一個他那個這個圖

21
00:01:12,18 --> 00:01:14,58
這個圖 這個圖本身的橫軸是所謂的loading

22
00:01:14,58 --> 00:01:17,41
loading就是說我網路到底有

23
00:01:17,41 --> 00:01:19,58
這個附載重不重

24
00:01:19,58 --> 00:01:23,98
loading很輕就代表說想要送封包的這個PC啦

25
00:01:23,98 --> 00:01:26,25
或者station呢 這個數量很少

26
00:01:26,25 --> 00:01:30,5
那loading很重的時候 代表說我可能有大家都想送

27
00:01:30,5 --> 00:01:31,88
那大家都有封包要送

28
00:01:31,88 --> 00:01:34,68
那我們縱軸呢是所謂的throughput

29
00:01:34,68 --> 00:01:36,18
throughput就是說

30
00:01:36,18 --> 00:01:41,35
到底可以成功的送出去這樣的封包的數量有多少個

31
00:01:41,35 --> 00:01:46,24
我們看一下他的曲線是這樣子

32
00:01:48,55 --> 00:01:52,15
我們發現一個很有趣的這個曲線就是說

33
00:01:52,15 --> 00:01:55,88
我們在這個左邊這個地方 像這個地方的話

34
00:01:55,88 --> 00:01:58,35
我們說

35
00:01:58,35 --> 00:02:01,68
這個地方我們叫做所謂的loading比較輕

36
00:02:01,68 --> 00:02:06,24
因為在橫軸的最左邊 loading很輕的時候呢

37
00:02:06,25 --> 00:02:10,11
他的throughput跟你的loading幾乎成正比

38
00:02:10,11 --> 00:02:12,51
也就是說這個時候不太發生衝撞

39
00:02:12,51 --> 00:02:15,90
就是你想送多少 幾乎都會成功啦

40
00:02:15,91 --> 00:02:18,21
就是說我們的loading很輕的時候

41
00:02:18,21 --> 00:02:22,47
想送的封包量 跟可以成功送出去的封包量

42
00:02:22,48 --> 00:02:24,95
幾乎是相同的

43
00:02:24,95 --> 00:02:28,11
所以他幾乎就是正比的這樣的向上的曲線

44
00:02:28,11 --> 00:02:29,15
這個時候是很好

45
00:02:29,15 --> 00:02:31,41
就是你有多少要送 就可以送多少

46
00:02:31,41 --> 00:02:34,88
但是呢 隨著這個loading越來越重的時候呢

47
00:02:34,88 --> 00:02:37,11
就會開始發生collision了

48
00:02:37,11 --> 00:02:39,61
所以他在一個最高的這個點

49
00:02:39,61 --> 00:02:42,31
我們叫所謂的optimal的這種點的時候呢

50
00:02:42,31 --> 00:02:44,31
是最好 代表是說

51
00:02:44,31 --> 00:02:46,98
你的loading呢其實到了這一點

52
00:02:46,98 --> 00:02:48,55
loading這一點

53
00:02:48,55 --> 00:02:50,81
可是你的throughput呢還是非常的好

54
00:02:50,81 --> 00:02:53,67
還是很高 那過了這一點之後呢

55
00:02:53,68 --> 00:02:58,65
我們就開始發現一個現象就是說 你loading再增加

56
00:02:58,65 --> 00:03:01,45
就是有更多的封包要送的時候呢

57
00:03:01,45 --> 00:03:03,24
我的throughput開始往下掉

58
00:03:03,25 --> 00:03:06,5
就代表說我的collision呢開始發生

59
00:03:06,5 --> 00:03:09,81
那我們這邊一往下掉 就會越來越嚴重

60
00:03:09,81 --> 00:03:14,21
那我們事實上再發現說 這個loading再加重

61
00:03:14,21 --> 00:03:18,77
這個throughput往下掉的這個速度呢就更快

62
00:03:18,78 --> 00:03:21,8
因為這種loading再增加

63
00:03:21,8 --> 00:03:23,18
就是開始發生大量的collision

64
00:03:23,18 --> 00:03:27,41
那發生大量的collision代表說 我們的throughput就開始下降

65
00:03:27,41 --> 00:03:29,88
因為大部分的封包都沒有效

66
00:03:29,88 --> 00:03:31,88
大部份的封包都會撞在一起

67
00:03:31,88 --> 00:03:34,1
所以這是很嚴重的現象

68
00:03:34,1 --> 00:03:36,81
那甚至loading再繼續加再繼續加

69
00:03:36,81 --> 00:03:42,28
我們發現說 這個throughput他甚至會接到這個地方來

70
00:03:42,28 --> 00:03:46,35
這個地方我們說 幾乎是等於0啦

71
00:03:46,35 --> 00:03:48,75
就是說他的loading如果繼續增加

72
00:03:48,75 --> 00:03:51,54
他有可能甚至說沒有一個封包可以成功

73
00:03:51,55 --> 00:03:54,38
大部份的封包幾乎所有的封包

74
00:03:54,38 --> 00:03:57,11
每次送出去呢就跟人家collision

75
00:03:57,11 --> 00:03:59,55
那我們delay 再來還是collision

76
00:03:59,55 --> 00:04:01,58
再來還是collision 再來還是collision

77
00:04:01,58 --> 00:04:03,25
所以如果發生這個現象

78
00:04:03,25 --> 00:04:06,91
這個loading就事實上已經超過這個網路可以負荷了

79
00:04:06,91 --> 00:04:08,75
那這個時候網路怎麼辦

80
00:04:08,75 --> 00:04:11,21
就是網路沒有什麼辦法 幾乎網路就是癱瘓了

81
00:04:11,21 --> 00:04:14,75
這就是因為loading太重了 那唯一的辦法就是說

82
00:04:14,75 --> 00:04:17,24
大家暫時先不要送 暫時有些先離開

83
00:04:17,24 --> 00:04:19,87
那這就是ethernet的特性就是說

84
00:04:19,88 --> 00:04:22,58
在heavy load 我們講heavy load的時候呢

85
00:04:22,58 --> 00:04:26,18
會有太多的網路的這個整個頻寬

86
00:04:26,18 --> 00:04:29,10
都浪費在collision的這種現象

87
00:04:29,11 --> 00:04:31,11
那這個也是ethernet的一個致命傷

88
00:04:31,11 --> 00:04:33,11
就是說ethernet本身

89
00:04:33,11 --> 00:04:38,11
當然我們講的這個是從最早期這個cable 這個bus

90
00:04:38,11 --> 00:04:41,8
bus結構的這個角度來看

91
00:04:41,8 --> 00:04:43,61
因為他是一個廣播的這個媒介嘛

92
00:04:43,61 --> 00:04:46,58
所以兩個封包 對不起兩個station

93
00:04:46,58 --> 00:04:50,28
或者兩個封包同時送上來的時候呢 他就發生collision

94
00:04:50,28 --> 00:04:53,81
那這是他的網路的架構

95
00:04:53,81 --> 00:04:58,11
是bus的架構 protocol呢是CSMA/CD

96
00:04:58,11 --> 00:05:01,81
在load很輕的時候呢 它的效能很好

97
00:05:01,81 --> 00:05:05,35
可是load很重的時候呢 因為發生collision

98
00:05:05,35 --> 00:05:07,78
甚至發生嚴重的collision

99
00:05:07,78 --> 00:05:10,37
那throughput就會降的非常高

100
00:05:10,38 --> 00:05:12,38
甚至呢最後變成0

101
00:05:12,38 --> 00:05:14,38
這也是為什麼在早期的時候呢

102
00:05:14,38 --> 00:05:19,78
這個ethernet呢只能用在一般我們的像辦公室的網路啦

103
00:05:19,78 --> 00:05:24,8
或者家庭網路 那我們知道在整個產業鏈裡面

104
00:05:24,8 --> 00:05:28,44
還有一塊非常重要的就是工廠自動化

105
00:05:28,45 --> 00:05:30,38
那在工廠自動化裡面

106
00:05:30,38 --> 00:05:34,25
我們這個網路要控制的可能都是一些工廠的一些設備啊

107
00:05:34,25 --> 00:05:36,90
尤其像甚至像鍋爐啊

108
00:05:36,91 --> 00:05:40,65
這種非常非常需要及時去控管

109
00:05:40,65 --> 00:05:42,68
譬如說 鍋爐本身溫度太高

110
00:05:42,68 --> 00:05:45,18
你必須去把一些什麼關掉

111
00:05:45,18 --> 00:05:47,27
那這種都是所謂的控制訊號

112
00:05:47,28 --> 00:05:49,38
控制訊號在工廠自動化裡面

113
00:05:49,38 --> 00:05:52,21
他必須立刻送到那個設備上面去

114
00:05:52,21 --> 00:05:56,25
如果他用ethernet 你可以想像會發生什麼問題

115
00:05:56,25 --> 00:05:58,5
如果loading很重又用ethernet

116
00:05:58,5 --> 00:06:01,8
那根本就封包就丟不出去啊 因為全部都collision

117
00:06:01,8 --> 00:06:05,5
所以在當時呢這個工廠自動化的部分呢

118
00:06:05,5 --> 00:06:06,31
基本上是不用ethernet

119
00:06:06,31 --> 00:06:09,38
因為用了ethernet就是他有這個風險

120
00:06:09,38 --> 00:06:11,55
就是萬一loading很重的時候呢

121
00:06:11,55 --> 00:06:13,48
他可能封包根本送不出去

122
00:06:13,48 --> 00:06:17,28
所以早期這種工廠自動化 是不用ethernet的

123
00:06:17,28 --> 00:06:20,55
但是現在我們等下會介紹就是說

124
00:06:20,55 --> 00:06:25,25
因為 因為呢我們事實上這個ethernet的結構呢

125
00:06:25,25 --> 00:06:29,51
已經從bus 現在已經進展到所謂的switch

126
00:06:29,51 --> 00:06:32,10
我們以前也介紹過 進展到switch啦

127
00:06:32,11 --> 00:06:35,95
那進展到switch呢 他的collision的問題就解決了

128
00:06:35,95 --> 00:06:38,51
基本上 等於說幾乎就沒有collision了

129
00:06:38,51 --> 00:06:40,51
這個我們等一下再補充

130
00:06:40,51 --> 00:06:42,51
好 那最後我們看一下

131
00:06:42,51 --> 00:06:48,68
這個在IEEE802.3這個ethernet呢 他還有哪些標準

132
00:06:48,68 --> 00:06:54,10
那我們說 802.3本身因為它算是一個family

133
00:06:54,11 --> 00:06:57,91
算是一系列的這種ethernet的演進 我們說從最早期

134
00:06:57,91 --> 00:07:04,11
從我們說2Mb也有到10Mb 也有到100Mb的

135
00:07:04,11 --> 00:07:06,5
也有到Gb ethernet

136
00:07:06,5 --> 00:07:11,8
甚至現在10G的Gb ethernet也都非常的成熟

137
00:07:11,8 --> 00:07:15,70
那在實驗室呢 甚至已經有100Gbps的ethernet

138
00:07:15,71 --> 00:07:21,18
也就是說他有這麼多種ethernet速度從2Mb到100G

139
00:07:22,15 --> 00:07:26,41
速度差異這麼大 但是他們的protocol呢 一樣

140
00:07:26,41 --> 00:07:29,11
大家都是跑CDMA/CD

141
00:07:29,11 --> 00:07:32,95
這個是雖然我們的算是速度上

142
00:07:32,95 --> 00:07:36,95
有不同的這個標準 不同的這個版本

143
00:07:36,95 --> 00:07:41,5
但是我們的MAC protocol都還是跑CSMA/CD

144
00:07:41,5 --> 00:07:44,10
那我們的frame format 就是封包的格式呢

145
00:07:44,11 --> 00:07:46,41
還是大家都維持一致

146
00:07:46,41 --> 00:07:49,38
這是ethernet這個系列標準裡面很重要的

147
00:07:49,38 --> 00:07:51,38
但是不一樣的地方在哪裡

148
00:07:51,38 --> 00:07:55,48
我們要跑這個速度 要快到

149
00:07:55,48 --> 00:08:00,15
我們剛剛提到像Gb ethernet 10G啦 甚至100G

150
00:08:00,15 --> 00:08:04,38
在這麼高的速度之下 我們的這個physical layer

151
00:08:04,38 --> 00:08:07,18
就是我們的線材就必須不一樣

152
00:08:07,18 --> 00:08:11,5
這個時候到了100Gb 甚至都一定都是跑光纖的

153
00:08:11,5 --> 00:08:14,58
因為光纖的速度 以光速來講 夠快嘛

154
00:08:14,58 --> 00:08:17,28
所以事實上我們等於是說在physical layer這一塊

155
00:08:17,28 --> 00:08:20,45
我們就有兩種 一個就是所謂的fiber 就是跑光纖

156
00:08:20,45 --> 00:08:25,31
一個就是跑傳統的cable 就是所謂的電纜的部分

157
00:08:25,31 --> 00:08:28,98
那我們所以看一下 最下面這個圖裡面

158
00:08:28,98 --> 00:08:32,28
我們的這個physical layer本身可以跑所謂的copper

159
00:08:32,28 --> 00:08:36,10
就是銅線的部分 也就是cable的部分啦

160
00:08:36,10 --> 00:08:41,7
那他有我們這邊上面有像100BASE-TX啦

161
00:08:41,8 --> 00:08:45,31
100BASE-T4啦 或者100BASE-T2啦

162
00:08:45,31 --> 00:08:48,48
那個T就代表twisted pair 那有的2有的4

163
00:08:48,48 --> 00:08:51,45
可能代表他的那個線材啦 距離啦

164
00:08:51,45 --> 00:08:54,50
那右邊這邊呢是所謂的fiber

165
00:08:54,51 --> 00:08:59,38
就是我們線材可以有不同的這個線材

166
00:08:59,38 --> 00:09:03,45
那以fiber來講的話 我們有所謂的100BASE-F

167
00:09:03,45 --> 00:09:09,94
F就代表fiber 那我們有100BASE-S 這個S

168
00:09:10,75 --> 00:09:12,41
這個S就是所謂的short

169
00:09:12,41 --> 00:09:15,85
就是因為我們走這個光纖的時候呢

170
00:09:15,85 --> 00:09:19,31
就是用光嘛 啊光波本身有長波短波的意思啦

171
00:09:19,31 --> 00:09:22,45
所以等於說 針對不同的網路的速度

172
00:09:22,45 --> 00:09:26,78
我們有的用光纖 有的用所謂的銅軸 或者銅線

173
00:09:26,78 --> 00:09:29,15
然後用光纖的時候呢

174
00:09:29,15 --> 00:09:31,15
我們會有長波的會有短波的

175
00:09:31,15 --> 00:09:33,15
反正有各種各樣的技術

176
00:09:33,15 --> 00:09:34,71
這是所謂的physical layer

177
00:09:34,71 --> 00:09:38,28
就是實體層的技術呢 都會被引進來

178
00:09:38,28 --> 00:09:40,61
為了讓我們傳輸的時候更快

179
00:09:40,61 --> 00:09:42,78
然後距離希望能夠送的遠一點

180
00:09:42,78 --> 00:09:46,58
然後可以速度更快一點  但是我們特別強調

181
00:09:46,58 --> 00:09:50,1
不管我們的physical layer 是所謂的銅線 是光纖

182
00:09:50,1 --> 00:09:55,11
我們最上面第二層MAC layer還是CSMA/CD

183
00:09:55,11 --> 00:09:57,70
然後用我們原來的ethernet 的這個frame

184
00:09:57,71 --> 00:09:59,45
這是非常重要的

185
00:09:59,45 --> 00:10:02,58
好 最後呢 我們來做一個summary

186
00:10:02,58 --> 00:10:05,45
就針對這個ethernet呢 做一個總結

187
00:10:05,45 --> 00:10:08,80
我們說 ethernet不管他的系列是怎麼樣

188
00:10:08,81 --> 00:10:11,21
不管他的速度有多快 速度有多慢

189
00:10:11,21 --> 00:10:15,98
不管他是用什麼樣的所謂的physical layer的材料

190
00:10:15,98 --> 00:10:17,74
不管是銅線不管是光纖

191
00:10:17,75 --> 00:10:21,88
他的MAC protocol都叫做CSMA/CD

192
00:10:21,88 --> 00:10:25,74
然後都是connectionless的service 就是說

193
00:10:25,75 --> 00:10:30,48
在傳輸的過程當中 是不需要建連線的

194
00:10:30,48 --> 00:10:32,68
就是我們只要把封包準備好

195
00:10:32,68 --> 00:10:35,98
然後依循CSMA/CD的protocol

196
00:10:35,98 --> 00:10:40,58
就是我要送之前我先聽聽看 如果是idle我就送出去

197
00:10:40,58 --> 00:10:42,45
如果是busy 我就等

198
00:10:42,45 --> 00:10:45,25
等到他變成idle的時候再把他送出去

199
00:10:45,25 --> 00:10:47,60
這個protocol呢都是一樣

200
00:10:47,61 --> 00:10:50,51
這個protocol本身我們就叫做connectionless

201
00:10:50,51 --> 00:10:51,95
因為他不用建連線

202
00:10:51,95 --> 00:10:54,75
當然我們也叫做unreliable transmission

203
00:10:54,75 --> 00:10:58,28
就是我送出去呢 不代表 不保證對方一定收到

204
00:10:58,28 --> 00:11:00,18
那我們之前也已經介紹了

205
00:11:00,18 --> 00:11:01,81
就是說我們在ethernet裡面

206
00:11:01,81 --> 00:11:06,28
我們是很努力的想要把一個封包丟出去嘛

207
00:11:06,28 --> 00:11:09,35
我們甚至努力到什麼程度呢 努力到說

208
00:11:09,35 --> 00:11:11,31
你這個封包連續衝撞

209
00:11:11,31 --> 00:11:15,35
不要超過16次 我都會再來一次

210
00:11:15,35 --> 00:11:19,15
再等待一個時間之後呢 再來把這個封包再試一次

211
00:11:19,15 --> 00:11:20,78
其實我們ethernet的protocol

212
00:11:20,78 --> 00:11:25,35
這個CSMA/CD其實是非常非常努力 非常盡力啦

213
00:11:25,35 --> 00:11:27,84
一個封包發生collision 我會再來

214
00:11:27,85 --> 00:11:30,61
再collision我會再來 再來再來 我會連續來16次

215
00:11:30,61 --> 00:11:32,95
都試著把這個封包送出去

216
00:11:32,95 --> 00:11:37,28
當然如果說 網路已經壅塞到實在是沒辦法

217
00:11:37,28 --> 00:11:40,25
那這個封包連續衝撞16次我們會放棄

218
00:11:40,25 --> 00:11:42,35
這是放棄的部份

219
00:11:42,35 --> 00:11:44,84
但是我們所謂的unreliable呢

220
00:11:44,85 --> 00:11:46,98
其實還有一層的意義就是說

221
00:11:47,65 --> 00:11:52,48
我們雖然會嘗試著把一個封包把他送出去

222
00:11:52,48 --> 00:11:56,1
包含說16次 連續嘗試16次

223
00:11:56,1 --> 00:11:57,55
好 中間可能有一次

224
00:11:57,55 --> 00:11:59,37
你送出去了 沒有collision

225
00:11:59,38 --> 00:12:02,41
就是沒有collision 這個封包對這個

226
00:12:02,41 --> 00:12:05,81
所謂的傳送的這個state來講 他的任務就結束

227
00:12:05,81 --> 00:12:07,81
他的目的就是要把一個封包

228
00:12:07,81 --> 00:12:10,28
我們講 成功的送出去

229
00:12:10,28 --> 00:12:13,48
雖然送出去的過程當中 可能發生collision

230
00:12:13,48 --> 00:12:17,25
哪我就重來嘛 但是我什麼時候會把這個封包

231
00:12:17,25 --> 00:12:19,71
等於說他的任務把它結束呢？

232
00:12:19,71 --> 00:12:21,98
就兩個 一個就是我真的送不出去了

233
00:12:21,98 --> 00:12:25,7
連續16次的衝撞 我這個封包我就放棄

234
00:12:25,8 --> 00:12:28,21
要不然的話我這個封包就會把他送出去

235
00:12:28,21 --> 00:12:31,98
那你成功的送出去 就代表對方一定成功的收到嗎

236
00:12:31,98 --> 00:12:35,45
不一定喔 我們成功的送出去

237
00:12:35,45 --> 00:12:38,31
那為什麼對方會沒有收到呢

238
00:12:38,31 --> 00:12:41,31
因為即使沒有collision

239
00:12:41,31 --> 00:12:44,84
那他也可能發生所謂的 我們叫interference

240
00:12:44,85 --> 00:12:47,95
就是所謂的干擾 譬如說電磁波的干擾

241
00:12:47,95 --> 00:12:49,95
讓你的封包的內容譬如說

242
00:12:49,95 --> 00:12:52,45
1變0 0變1 因為被干擾了

243
00:12:52,45 --> 00:12:55,98
那被干擾的這個封包呢 我們知道receiver

244
00:12:55,98 --> 00:12:58,78
他收到一個封包 注意到

245
00:12:58,78 --> 00:13:01,25
這個封包是沒有collision的

246
00:13:01,25 --> 00:13:04,78
這是沒有collision的 所以既然沒有collision

247
00:13:04,78 --> 00:13:07,88
那個sender呢就不會重送 他已經送出去了

248
00:13:07,88 --> 00:13:10,5
沒有collision 他的任務就結束了

249
00:13:10,5 --> 00:13:12,48
但是沒有collision的封包

250
00:13:12,48 --> 00:13:14,78
不代表一定正確的會收的到

251
00:13:14,78 --> 00:13:16,15
因為沒有collision

252
00:13:16,15 --> 00:13:19,15
但是呢也有可能interference被干擾

253
00:13:19,15 --> 00:13:21,88
所以他沒有collision可是內容壞掉了

254
00:13:21,88 --> 00:13:25,84
阿receiver收到之後呢 他就會做一個檢查

255
00:13:25,85 --> 00:13:27,55
說裡面的內容有沒有錯誤

256
00:13:27,55 --> 00:13:30,7
因為我們有一個叫做frame check sequence

257
00:13:30,8 --> 00:13:34,25
用CRC32做一個檢查碼 如果說萬一這個內容呢

258
00:13:34,25 --> 00:13:37,50
在傳送過程當中 被所謂的干擾 壞掉了

259
00:13:37,51 --> 00:13:41,58
那receiver雖然成功的收到一個封包

260
00:13:41,58 --> 00:13:43,40
但是經過檢查之後

261
00:13:43,41 --> 00:13:47,28
發現內容是錯誤的 他會把這個封包丟棄

262
00:13:47,28 --> 00:13:51,38
也就是說 送的呢是成功的送出去了

263
00:13:51,38 --> 00:13:53,91
可是收的呢 也成功地收到

264
00:13:53,91 --> 00:13:55,91
可是內容是錯的 他就要把它丟掉

265
00:13:55,91 --> 00:13:59,38
那這個封包呢 也結束了 就是sender已經送完

266
00:13:59,38 --> 00:14:01,65
他已經沒事了 receiver收到把它丟掉

267
00:14:01,65 --> 00:14:05,18
那這個封包 怎麼辦 就沒有啦

268
00:14:05,18 --> 00:14:09,1
所以我們叫它unreliable的transmission是指這個意思啦

269
00:14:09,1 --> 00:14:11,88
就是說 在ethernet裡面

270
00:14:11,88 --> 00:14:16,5
他每一個封包都會很努力的想要把它成功的送出去

271
00:14:16,5 --> 00:14:21,1
但是呢 成功的送出去不代表對方一定正確的收到

272
00:14:21,1 --> 00:14:24,71
那如果對方收到的是錯誤的 他會把他丟棄

273
00:14:24,71 --> 00:14:27,68
那丟棄這個封包就相當於就是沒有了

274
00:14:27,68 --> 00:14:32,15
那怎麼辦呢 如果說我們說 那我這個封包很重要啊

275
00:14:32,15 --> 00:14:33,55
對方一定要收到

276
00:14:33,55 --> 00:14:36,84
那我們就必須靠我們上面的protocol

277
00:14:36,85 --> 00:14:39,21
譬如說我們如果上面是用的TCP

278
00:14:39,21 --> 00:14:41,48
那TCP會幫我們解決這個問題

279
00:14:41,48 --> 00:14:46,15
因為TCP本身會要求對方的TCP你一定要正確的收到

280
00:14:46,15 --> 00:14:50,5
如果說像這樣 我們在第二層 這個網卡這層呢

281
00:14:50,5 --> 00:14:53,5
就把他丟棄了 那我們最後TCP是不是會發現

282
00:14:53,5 --> 00:14:56,48
這個封包根本沒有來啊 所以我們的TCP呢

283
00:14:56,48 --> 00:15:01,45
就會互相告訴對方的TCP要重送 就是重送

284
00:15:02,71 --> 00:15:07,45
那在ethernet本身就是所謂沒有重送這件事情

285
00:15:07,45 --> 00:15:11,84
ethernet本身會來重送 是因為collision

286
00:15:11,85 --> 00:15:15,18
因為衝撞 所以衝撞他會再重送

287
00:15:15,18 --> 00:15:18,18
但是如果是因為封包的錯誤 他是不會重送

288
00:15:18,18 --> 00:15:19,91
所以我們叫做unreliable的

289
00:15:19,91 --> 00:15:23,18
好那我們也說 這個ethernet的這個拓墣

290
00:15:23,18 --> 00:15:28,25
從最早期的是bus 就是10BASE5啊 10BASE2啊

291
00:15:28,25 --> 00:15:31,50
那慢慢進展到後面的所謂的switch

292
00:15:31,51 --> 00:15:36,35
那switch本身他的特色就是所謂一個類似像star的結構

293
00:15:36,35 --> 00:15:41,40
好 那最後我們提到說 在bus的結構之下

294
00:15:41,41 --> 00:15:45,15
我們所謂的bus的結構呢 我們說

295
00:15:45,15 --> 00:15:49,38
他的protocol呢叫做half-duplex transmission

296
00:15:49,38 --> 00:15:51,95
 half-duplex就是說

297
00:15:52,78 --> 00:15:58,78
兩端都可以送給對方 但是呢不可以同時送

298
00:15:58,78 --> 00:16:02,50
就是所謂half-duplex 我們通訊是雙向的

299
00:16:02,51 --> 00:16:05,51
就我A可以送給B B也可以送給A

300
00:16:05,51 --> 00:16:07,48
但是不能同時送

301
00:16:07,48 --> 00:16:10,81
這個就是我們bus的這個CSMA/CD的概念嘛

302
00:16:10,81 --> 00:16:13,58
因為你同時送就會發生collision

303
00:16:13,58 --> 00:16:17,85
就是說如果是bus 我們講bus的結構

304
00:16:17,85 --> 00:16:23,51
像10base5 10base2 甚至10baseT的那種

305
00:16:23,51 --> 00:16:27,8
如果是hub的結構的話呢 他是用所謂的half-duplex

306
00:16:27,68 --> 00:16:33,25
代表是說 同一個時間最多只能有一個可以傳輸

307
00:16:33,25 --> 00:16:36,35
同一個時間 兩個或兩個以上他就是collision

308
00:16:36,35 --> 00:16:39,81
那這種架構呢 我們說在load很輕的時候呢

309
00:16:39,81 --> 00:16:41,1
他是工作的非常好

310
00:16:41,1 --> 00:16:44,64
那load很重的時候呢他會發生collision 太多的collision

311
00:16:45,71 --> 00:16:49,21
那最後說 我們如果是在switch的話呢

312
00:16:49,21 --> 00:16:53,7
他是怎麼樣的工作呢 這個是非常重要的 就是說

313
00:16:53,8 --> 00:16:57,31
如果是在switch的結構之下 就是說

314
00:16:57,31 --> 00:16:59,94
我們有個switch的交換機 我們也介紹過

315
00:16:59,95 --> 00:17:04,81
在switch的交換機裡面 每一個接口他其實都有一個網卡

316
00:17:04,80 --> 00:17:07,40
變成說 一個一條線

317
00:17:07,40 --> 00:17:11,44
我們講一條線接到switch 一條接到這個所謂的PC的話

318
00:17:11,45 --> 00:17:14,8
PC上面有一個網卡

319
00:17:14,8 --> 00:17:16,65
這個交換機的接口呢也有一個網卡

320
00:17:16,65 --> 00:17:19,58
所以他們兩個這樣接起來的時候呢 就變成說

321
00:17:19,58 --> 00:17:22,1
這條線變成只有他們兩個專用

322
00:17:22,1 --> 00:17:26,18
注意到 這條線只有這兩端專用喔

323
00:17:26,18 --> 00:17:28,68
而且他裡面我們說 這個cable裡面

324
00:17:28,68 --> 00:17:32,41
如果是一般所謂的UDP的這種cable的話

325
00:17:32,41 --> 00:17:33,98
他裡面我們講是twisted pair

326
00:17:33,98 --> 00:17:36,68
事實上是有四對的雙絞線

327
00:17:36,68 --> 00:17:38,95
所以他有足夠的線

328
00:17:38,95 --> 00:17:43,88
讓送的呢有一條專線 收的也有一條專線

329
00:17:43,88 --> 00:17:47,14
變成兩個方向的傳輸呢 各有專線

330
00:17:47,15 --> 00:17:50,5
那各有專線的結果 我們說

331
00:17:50,5 --> 00:17:52,68
他的傳輸就叫做full-duplex

332
00:17:52,68 --> 00:17:55,8
full-duplex的意思就是說

333
00:17:55,8 --> 00:18:01,75
兩邊的通訊呢是可以雙向 而且可以同時傳送

334
00:18:01,75 --> 00:18:06,58
我們說 如果雙向通訊不能同時送 叫做half-duplex

335
00:18:06,58 --> 00:18:10,35
full-duplex就是說他是雙向傳送 而且可以同時送

336
00:18:10,35 --> 00:18:12,61
就是如果是交換機的結構的話

337
00:18:12,61 --> 00:18:14,44
我們這個PC跟交換機之間

338
00:18:14,45 --> 00:18:17,8
他可以同時送封包而且雙向喔

339
00:18:17,8 --> 00:18:19,48
阿因為他們有專屬的線路

340
00:18:19,48 --> 00:18:21,31
所以他根本就沒有collision

341
00:18:21,31 --> 00:18:24,31
但是呢他還是去跑CSMA/CD

342
00:18:24,31 --> 00:18:26,41
我們知道說不管它的結構怎麼樣

343
00:18:26,41 --> 00:18:30,11
他一定是跑這個我們講 CSMA/CD

344
00:18:30,11 --> 00:18:34,38
只是在full-duplex的時候怎麼跑 就是說你會去聽聽看

345
00:18:34,38 --> 00:18:36,8
結果一聽 一定就是idle

346
00:18:36,8 --> 00:18:38,11
因為這條線幾乎是你專用的

347
00:18:38,11 --> 00:18:40,31
你專用的線 你當然去聽啊

348
00:18:40,31 --> 00:18:42,41
可是聽了一定沒有人送 所以你就送

349
00:18:42,41 --> 00:18:45,98
那送了之後呢 一樣他還是會去聽聽看有沒有collision

350
00:18:45,98 --> 00:18:49,71
但是呢一定沒有collision 因為這條線是你專用的

351
00:18:49,71 --> 00:18:52,4
就是說即使是你專用的線路

352
00:18:52,5 --> 00:18:56,45
你還是用CSMA/CD的protocol 你還是會去聽

353
00:18:56,45 --> 00:18:59,8
但是呢一定是idle 你還是會去送

354
00:18:59,8 --> 00:19:01,88
送了之後呢你還是會繼續聽有沒有collision

355
00:19:01,88 --> 00:19:03,85
但是呢都不會有collision

356
00:19:03,85 --> 00:19:07,41
也就是說 在交換機的結構之下

357
00:19:07,41 --> 00:19:13,44
用了full-duplex的這種傳輸 事實上根本就沒有collision

358
00:19:13,45 --> 00:19:15,78
好 這就是ethernet呢

359
00:19:15,78 --> 00:19:19,55
後來演進到這個交換機最大最大的特色就是說

360
00:19:19,55 --> 00:19:23,28
他雖然還是用CSMA/CD的protocol

361
00:19:23,28 --> 00:19:26,41
但是因為它的結構呢已經變成是

362
00:19:26,41 --> 00:19:31,21
每一條線都只有兩個 一個是交換機 一個是PC

363
00:19:31,21 --> 00:19:35,68
他們之間對送 而且都是雙向同時送用專線

364
00:19:35,68 --> 00:19:38,14
變成說就沒有collision了

365
00:19:38,15 --> 00:19:40,88
那這個他的整個performance呢就非常非常的好

366
00:19:40,88 --> 00:19:45,24
我們說甚至可以達到所謂的wired speed 線速

367
00:19:45,25 --> 00:19:49,28
線速就是說 我們這個線如果是要跑10Mb

368
00:19:49,28 --> 00:19:52,78
他就可以10Mb 你跑100Mb 我就跑100Mb

369
00:19:52,78 --> 00:19:55,75
因為我都沒有collision 都沒有collision

370
00:19:55,75 --> 00:19:57,81
那交換機本身 我們也提到說

371
00:19:57,81 --> 00:19:59,81
交換機裡面有一個交換機的晶片

372
00:19:59,81 --> 00:20:02,34
這個晶片本身 封包進來

373
00:20:02,35 --> 00:20:05,91
從這個封包的處理查表再轉送

374
00:20:05,91 --> 00:20:09,11
通通都是晶片 用硬體就處理掉了

375
00:20:09,11 --> 00:20:11,11
所以我們可以做到所謂的線速

376
00:20:11,11 --> 00:20:12,28
所謂的wired speed

377
00:20:12,28 --> 00:20:16,31
就是你封包進來 就立刻出去 封包進來就立刻出去

378
00:20:16,31 --> 00:20:18,4
等於是說這個交換的速度

379
00:20:18,5 --> 00:20:20,1
等於跟我們線的速度呢

380
00:20:20,1 --> 00:20:23,65
加起來是一樣 所以變成說這個速度非常的快

381
00:20:23,65 --> 00:20:27,48
以上就是我們針對ethernet這個單元

382
00:20:27,48 --> 00:20:29,1
所做的這個介紹


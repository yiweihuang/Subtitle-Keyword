2
00:00:08,940 --> 00:00:11,680
好那接下來我們就來跟各位介紹

3
00:00:11,680 --> 00:00:13,860
TCP的congestion control

4
00:00:13,860 --> 00:00:16,340
那什麼是congestion control呢 就是說

5
00:00:16,340 --> 00:00:20,820
整個TCP 因為他要製造說這個網路的 所謂的

6
00:00:20,820 --> 00:00:22,020
未納量有多少 代表說

7
00:00:23,020 --> 00:00:25,160
當他把連線建完之後

8
00:00:25,160 --> 00:00:28,440
它到底可以用多快的這個速度

9
00:00:28,440 --> 00:00:31,059
或者多大的量呢把這個封包

10
00:00:31,059 --> 00:00:32,640
丟到這個網路裡面去

11
00:00:32,640 --> 00:00:34,780
那不會造成這個網路的阻塞

12
00:00:34,780 --> 00:00:37,620
所以整個TCP conjection control的idea就是說

13
00:00:37,620 --> 00:00:40,980
它必須決定說網路呢 在這個時候

14
00:00:40,980 --> 00:00:43,440
到底它的capacity是多大

15
00:00:43,440 --> 00:00:45,660
這樣他才知道說它可以

16
00:00:45,660 --> 00:00:47,880
同時送多少封包進去的意思

17
00:00:47,880 --> 00:00:51,960
就不希望送太多 把網路撐到所謂的壅塞

18
00:00:51,960 --> 00:00:54,560
那如果真的發生了壅擠的話

19
00:00:54,560 --> 00:00:57,320
它要有辦法知道說這個時候網路發生了擁擠

20
00:00:58,320 --> 00:01:00,300
那如果知道網路發生壅擠的話

21
00:01:00,300 --> 00:01:03,640
它會自己調適比如說把自己的速度放慢

22
00:01:03,640 --> 00:01:06,580
所謂的conjection control就是指這個機制

23
00:01:06,580 --> 00:01:08,540
就是說第一個怎麼知道網路呢

24
00:01:08,540 --> 00:01:09,180
現在發生了擁擠

25
00:01:10,180 --> 00:01:13,959
然後發生了擁擠之後 它的反應是什麼

26
00:01:13,959 --> 00:01:15,720
如果沒有發生壅擠

27
00:01:15,720 --> 00:01:18,620
它就一直再送 一直再送

28
00:01:18,620 --> 00:01:20,180
多送一點多送一點的意思啦

29
00:01:21,180 --> 00:01:25,420
那我們說因為TCP的這個整個通訊的機制

30
00:01:25,420 --> 00:01:29,060
都是靠那個ack 來決定所謂的節奏

31
00:01:30,060 --> 00:01:32,400
就是你的ack如果告訴我 都是很

32
00:01:32,400 --> 00:01:34,840
很正確的 都是很流暢的

33
00:01:34,840 --> 00:01:36,760
我就會越送越多

34
00:01:36,760 --> 00:01:39,739
但是如果說我們講 網路阻塞了

35
00:01:39,739 --> 00:01:41,019
那什麼叫網路阻塞

36
00:01:41,019 --> 00:01:43,780
有兩種狀況一個就是說你的封包掉了

37
00:01:43,780 --> 00:01:45,480
一個就是你發生timeout

38
00:01:45,480 --> 00:01:47,360
就是不管哪邊有狀況呢

39
00:01:47,360 --> 00:01:49,280
都代表說欸網路可能這個所有

40
00:01:49,280 --> 00:01:52,760
沒有那麼那麼完美啦 可能有點阻塞了

41
00:01:52,760 --> 00:01:55,200
好那我們就開始所謂的降速的意思

42
00:01:55,200 --> 00:01:57,099
我就速度開始放慢嘛 好也就是說

43
00:01:58,099 --> 00:02:01,959
不管是我送快 還是送慢

44
00:02:01,959 --> 00:02:05,360
都是靠這個ack 因為ack會告訴我

45
00:02:05,360 --> 00:02:07,840
所有的答案嘛 所以我們說

46
00:02:07,840 --> 00:02:11,539
這個TCP本身 我們叫做所謂的self-clocking

47
00:02:11,539 --> 00:02:14,900
self-clocking就是說它自我

48
00:02:14,900 --> 00:02:18,479
自我來校正那個整個clock的速度

49
00:02:18,479 --> 00:02:20,139
那根據這個ack嘛

50
00:02:20,139 --> 00:02:22,699
所以這是比較特別的地方 就是說

51
00:02:22,699 --> 00:02:26,440
TCP的連線呢 到底要送快還是要送慢

52
00:02:26,440 --> 00:02:29,460
其實是根據這個ack回覆的這個

53
00:02:29,460 --> 00:02:31,520
裡面的內容 來做一個這個判斷

54
00:02:32,520 --> 00:02:36,060
好那我們說TCP的congestion control裡面呢

55
00:02:36,060 --> 00:02:39,240
有一個非常重要的機制叫做AIMD

56
00:02:39,240 --> 00:02:42,240
這是非常非常重要的方法

57
00:02:42,240 --> 00:02:43,979
這個AIMD是什麼呢

58
00:02:43,979 --> 00:02:48,680
它叫做additive increase 那它的意思就是說

59
00:02:48,680 --> 00:02:50,880
好我一開始的時候呢

60
00:02:50,880 --> 00:02:53,380
比如說我不知道網路的狀態嘛

61
00:02:53,380 --> 00:02:56,560
那我就慢慢的加速的意思

62
00:02:56,560 --> 00:02:59,419
所以這個increase就是加速

63
00:02:59,419 --> 00:03:01,680
那我加速的時候呢是進階

64
00:03:01,680 --> 00:03:05,180
就是一步一步的加 就加速的時候有點像是linear

65
00:03:05,180 --> 00:03:10,240
線性加速啦比如說40 加到50 加到60

66
00:03:10,240 --> 00:03:13,500
加到70就是我慢慢的這個線性的加

67
00:03:14,500 --> 00:03:18,180
但是呢一旦讓我發現說欸網路呢

68
00:03:18,180 --> 00:03:20,220
可能阻塞包含說 剛剛提到

69
00:03:20,220 --> 00:03:23,479
欸封包可能掉 那封包掉你怎麼判斷

70
00:03:23,479 --> 00:03:25,360
比如說我們出現你剛剛講的叫做

71
00:03:25,360 --> 00:03:27,919
這個所謂的three-duplicated

72
00:03:27,919 --> 00:03:29,259
或者triple duplicated就是我收到

73
00:03:30,259 --> 00:03:32,500
重複的ack連續三次

74
00:03:32,500 --> 00:03:34,620
所以我就認定這個網路呢 可能欸

75
00:03:34,620 --> 00:03:36,199
真的是已經阻塞了

76
00:03:36,199 --> 00:03:38,759
或者timeout 這個timeout呢

77
00:03:38,759 --> 00:03:42,900
反應代表是說這個情形更嚴重 代表是說

78
00:03:43,900 --> 00:03:46,539
這個封包掉而且可能ack都掉了

79
00:03:46,539 --> 00:03:48,979
所以我才根本連ack都沒收到嘛

80
00:03:48,979 --> 00:03:52,240
我就變成timeout 所以timeout其實隱含了一個

81
00:03:52,240 --> 00:03:54,900
網路阻塞更嚴重的這個狀態啦

82
00:03:54,900 --> 00:03:57,699
所以呢 我就根據這個不同的狀態

83
00:03:57,699 --> 00:04:00,500
我就說我會加速那我也會減速

84
00:04:00,500 --> 00:04:02,580
減速呢就是這個後面這個叫做

85
00:04:02,580 --> 00:04:06,180
multiplicative的這個decrease

86
00:04:06,180 --> 00:04:09,139
就是說我是線性的慢慢的加速

87
00:04:09,139 --> 00:04:11,740
但是碰到阻塞的時候呢

88
00:04:11,740 --> 00:04:14,940
我這個減速啊我是馬上減一半

89
00:04:14,940 --> 00:04:16,459
速度馬上減一半

90
00:04:16,459 --> 00:04:18,579
所以這個AIMD的特性就這樣子

91
00:04:18,579 --> 00:04:20,040
那在做這個事情呢

92
00:04:20,040 --> 00:04:21,019
我們首先必須有一個參數

93
00:04:22,019 --> 00:04:23,360
我們叫做congestion window

94
00:04:24,360 --> 00:04:27,279
congestion window就是說 相對於

95
00:04:27,279 --> 00:04:30,980
我們講相對於這個 所謂的flow control

96
00:04:30,980 --> 00:04:34,180
flow control本身有一個叫做advertise window嘛

97
00:04:34,180 --> 00:04:37,319
就是receiver本身它要讓sender送多少量

98
00:04:38,319 --> 00:04:40,839
那congestion window就是說這個網路

99
00:04:40,839 --> 00:04:42,100
可以讓sender送多少量

100
00:04:43,100 --> 00:04:45,319
好那congestion window就是用來

101
00:04:45,319 --> 00:04:46,920
限制這個sender

102
00:04:46,920 --> 00:04:50,959
在同一個時間可以送多少量出去的意思

103
00:04:50,959 --> 00:04:52,279
也就是說它控制這個congestion

104
00:04:53,279 --> 00:04:55,860
好 這個congestion window本身呢 就是我們講

105
00:04:55,860 --> 00:04:59,060
就是相對於 我們在flow control裡面的

106
00:05:00,060 --> 00:05:03,660
advertise window好那其實等於說

107
00:05:03,660 --> 00:05:06,180
這個sender 要把這個封包丟到網路裡面去

108
00:05:07,180 --> 00:05:12,899
它其實受兩個控制 一個就是網路的壅擠的程度

109
00:05:12,899 --> 00:05:16,500
一個就是receiver本身他可以有多少buffer

110
00:05:16,500 --> 00:05:20,300
來承接 那這兩個呢都必須考慮

111
00:05:20,300 --> 00:05:21,000
你不能只考慮一個嘛

112
00:05:22,000 --> 00:05:23,019
所以也就是說這個時候呢

113
00:05:24,019 --> 00:05:26,259
我們就要把這兩個 通通放進來變成說

114
00:05:27,259 --> 00:05:29,759
一個connection這個sender

115
00:05:29,759 --> 00:05:34,199
到底可以送多少量進到這個網路裡面去呢

116
00:05:34,199 --> 00:05:36,440
就要取這個所謂的congestion window

117
00:05:37,440 --> 00:05:41,579
跟advertise window的所謂的最小值

118
00:05:41,579 --> 00:05:43,060
我們叫minimum value就是說

119
00:05:44,060 --> 00:05:47,440
因為這兩個都是控制的這個sender

120
00:05:47,440 --> 00:05:52,300
網路裡面丟進去的這個整個所謂的這個速度啦

121
00:05:52,300 --> 00:05:55,880
或者這個這個量 所以呢這兩個呢

122
00:05:55,880 --> 00:05:58,560
最小的才是最重要的 比如說

123
00:05:58,560 --> 00:06:00,259
flow control這個server很小

124
00:06:00,259 --> 00:06:02,959
網路其實很大 網路很流暢

125
00:06:02,959 --> 00:06:04,380
你也不能送太快

126
00:06:04,380 --> 00:06:08,319
那或者是說好啦如果說這個receiver

127
00:06:08,319 --> 00:06:12,180
它有很大的buffer可以承接 sender送的資料

128
00:06:12,180 --> 00:06:14,139
啊可是網路阻塞 你也送不了

129
00:06:15,139 --> 00:06:17,779
所以這兩個congestion window跟這個

130
00:06:17,779 --> 00:06:21,180
advertise window我們要取最小值

131
00:06:21,180 --> 00:06:24,740
取最小值來作為這個這個sender

132
00:06:24,740 --> 00:06:28,899
傳送的這個控制 好我們說好那不管怎麼樣

133
00:06:28,899 --> 00:06:31,399
假設有一個congestion window呢 那這時候我們

134
00:06:31,399 --> 00:06:32,060
這個傳送的rate

135
00:06:33,060 --> 00:06:36,560
我們說 在transmission rate他的算法就是說

136
00:06:36,560 --> 00:06:39,740
因為這個congestion window其實就代表著說

137
00:06:39,740 --> 00:06:41,519
在一個RTT的這個時間內

138
00:06:42,519 --> 00:06:45,720
因為我們要靠那個ack嘛 我們要等ack回來

139
00:06:45,720 --> 00:06:48,540
那ack回來通常都是RTT的時間

140
00:06:48,540 --> 00:06:50,399
也就是說在這個RTT的時間之內呢

141
00:06:51,399 --> 00:06:52,120
我們可以傳送的量

142
00:06:53,120 --> 00:06:55,699
所以把congestion window除以RTT

143
00:06:55,699 --> 00:06:58,560
基本上就相當於這個TCP連線

144
00:06:58,560 --> 00:07:01,279
他可以傳輸的這個所謂的transmission rate

145
00:07:01,279 --> 00:07:02,380
這個是簡單的算法

146
00:07:03,380 --> 00:07:06,360
好那我們剛剛提到說好那這個時候

147
00:07:06,360 --> 00:07:09,360
我們要怎麼去算 在某一個時間點

148
00:07:09,360 --> 00:07:13,720
一個TCP的連線 到底有多少量可以送

149
00:07:13,720 --> 00:07:16,620
就那個window嘛 我們說首先

150
00:07:16,620 --> 00:07:19,339
因為我們現在控制這個connection呢

151
00:07:19,339 --> 00:07:23,720
有兩個重要的參數 一個是receiver的buffer

152
00:07:23,720 --> 00:07:25,420
我們叫做advertisement window

153
00:07:25,420 --> 00:07:27,720
這是receiver告訴sender的

154
00:07:27,720 --> 00:07:29,519
好另外一個是congestion window

155
00:07:29,519 --> 00:07:31,440
這是這是這個TCP的sender

156
00:07:32,440 --> 00:07:35,699
它自己呢去算出來的

157
00:07:35,699 --> 00:07:37,399
我們後面會跟各位解釋

158
00:07:37,399 --> 00:07:40,060
它怎麼怎麼去算出這個congestion window

159
00:07:41,060 --> 00:07:43,440
那我們取它的最小值嘛

160
00:07:43,440 --> 00:07:45,940
取最小值我們叫做maximum window

161
00:07:45,940 --> 00:07:48,079
就是現在window可以最大就是這樣子啦

162
00:07:49,079 --> 00:07:51,500
然後呢這是maximum window

163
00:07:51,500 --> 00:07:54,759
可是呢我們可能已經用掉了一些window

164
00:07:54,759 --> 00:07:56,839
就是有一些封包已經丟出去

165
00:07:56,839 --> 00:07:58,959
那可是呢還在等它的ack

166
00:07:58,959 --> 00:08:01,440
就是已經在網路上面跑了

167
00:08:01,440 --> 00:08:05,540
last byte send減掉last byte acked

168
00:08:05,540 --> 00:08:10,639
就代表說這個是已經在外面送的這些封包的量

169
00:08:10,639 --> 00:08:12,959
那我們把這個maximum window 就是

170
00:08:12,959 --> 00:08:15,000
最大的這個同時可送的量

171
00:08:16,000 --> 00:08:18,720
減掉已經送出去的量

172
00:08:18,720 --> 00:08:21,940
那就代表說 那你現在還可以多少量可以送

173
00:08:21,940 --> 00:08:26,560
所以這個effective window就是指說 你現在

174
00:08:26,560 --> 00:08:29,880
還有多少量可以送的意思啦

175
00:08:29,880 --> 00:08:33,480
那我們TCP本身 在送的時候呢

176
00:08:34,480 --> 00:08:39,240
它就不可以快過網路可以允許他送的

177
00:08:39,240 --> 00:08:41,820
或者呢是所謂的目的地呢

178
00:08:41,820 --> 00:08:43,960
可以允許他送的

179
00:08:43,960 --> 00:08:47,519
我們說 就是剛提到的因為receiver本身呢

180
00:08:47,519 --> 00:08:50,139
是靠這個東西來做flow control

181
00:08:50,139 --> 00:08:52,000
他希望控制這個sender的流量不要太快

182
00:08:53,000 --> 00:08:56,500
那網路本身呢 就是靠這個 congestion window

183
00:08:56,500 --> 00:09:00,559
來告訴它說你不要送太多的量進到網路去

184
00:09:00,559 --> 00:09:02,460
以免造成所謂的阻塞 好

185
00:09:03,460 --> 00:09:05,559
那我們就說啦接下來就是說

186
00:09:05,559 --> 00:09:08,440
好那這個這個TCP的sender

187
00:09:08,440 --> 00:09:11,539
它到底怎麼來決定這個congestion window呢

188
00:09:12,539 --> 00:09:14,679
就是現在到底有沒有擁擠啊

189
00:09:14,679 --> 00:09:16,700
擁擠的程度到底怎麼樣

190
00:09:16,700 --> 00:09:19,659
那它怎麼知道呢 我們說

191
00:09:19,659 --> 00:09:23,580
在flow control的時候 這個advertise window

192
00:09:23,580 --> 00:09:26,059
是由receiver 告訴sender的

193
00:09:27,059 --> 00:09:28,559
就是我們有兩個很重要的嘛

194
00:09:28,559 --> 00:09:30,320
一個是flow control 一個是congestion control

195
00:09:31,320 --> 00:09:34,220
那在flow control裡面是由receiver

196
00:09:34,220 --> 00:09:36,179
因為他根據他的buffer的大小

197
00:09:36,179 --> 00:09:38,580
它告訴這個所謂的sender

198
00:09:38,580 --> 00:09:42,480
所以advertise window是receiver告知

199
00:09:42,480 --> 00:09:44,440
好那我們就說那congestion window呢

200
00:09:45,440 --> 00:09:46,659
沒有人告訴他啊

201
00:09:46,659 --> 00:09:49,100
就在網路上面 網路不會告訴這個sender說

202
00:09:50,100 --> 00:09:52,519
你現在的congestion window是多少

203
00:09:52,519 --> 00:09:54,019
就沒有人告訴sender這個值

204
00:09:55,019 --> 00:09:56,940
它必須自己找出來

205
00:09:56,940 --> 00:10:00,799
它必須自己找 也就是說TCP的做法就是說

206
00:10:00,799 --> 00:10:04,559
好它就來開始設定它的congestion window

207
00:10:04,559 --> 00:10:07,779
那它的設定的這個方法就base on

208
00:10:07,779 --> 00:10:11,580
根據它自己觀察 觀察這個網路

209
00:10:11,580 --> 00:10:14,220
所以一開始呢有一個congestion window一個初始值

210
00:10:15,220 --> 00:10:17,279
這個初始值通常就是說

211
00:10:17,279 --> 00:10:21,179
好一個我們叫做MSS就是一個segment

212
00:10:21,179 --> 00:10:23,159
最大的這個segment的值

213
00:10:23,159 --> 00:10:24,679
就是有一個初始值

214
00:10:24,679 --> 00:10:27,600
然後呢它就發現說這個congestion本身

215
00:10:28,600 --> 00:10:31,700
如果呢越來越嚴重

216
00:10:31,700 --> 00:10:34,279
就是說congestion的這個程度

217
00:10:34,279 --> 00:10:37,220
越來越嚴重 它就減這個值的意思

218
00:10:38,220 --> 00:10:39,880
congestion window就開始減

219
00:10:39,880 --> 00:10:42,240
那如果發現說 這個時候呢congestion

220
00:10:42,240 --> 00:10:45,620
這個程度呢 是下降的

221
00:10:45,620 --> 00:10:46,200
就是網路狀態還不錯

222
00:10:47,200 --> 00:10:50,360
他就增加啦 所以我們剛剛前面提到有說

223
00:10:50,360 --> 00:10:54,380
這個方法呢 就叫做AIMD嘛

224
00:10:54,380 --> 00:10:57,580
就是根據這個TCP呢 他去觀察

225
00:10:57,580 --> 00:10:59,460
這個網路現在壅擠的狀態

226
00:10:59,460 --> 00:11:02,779
如果現在擁擠的狀態呢是輕緩

227
00:11:02,779 --> 00:11:04,320
或者說沒有什麼壅擠

228
00:11:04,320 --> 00:11:08,440
好那我就增加的意思

229
00:11:08,440 --> 00:11:09,159
我就把那個congestion window呢

230
00:11:10,159 --> 00:11:12,220
用線性的方式增加

231
00:11:12,220 --> 00:11:13,059
怎麼增加我們等一下介紹

232
00:11:14,059 --> 00:11:16,399
但如果說他發現說 這個時候

233
00:11:16,399 --> 00:11:18,639
網路壅擠的程度呢是比較嚴重

234
00:11:18,639 --> 00:11:20,240
或者越來越嚴重的話

235
00:11:20,240 --> 00:11:22,159
他就開始把這個congestion window把它減少

236
00:11:23,159 --> 00:11:24,179
那減少呢是一次減一半

237
00:11:25,179 --> 00:11:27,980
就增加是慢慢的線性增加

238
00:11:27,980 --> 00:11:30,139
可是減少呢是一次就減一半

239
00:11:30,139 --> 00:11:32,860
所以才叫做才叫做所謂的multiplicative

240
00:11:32,860 --> 00:11:36,740
就它是等於說一次除一半 一次除一半的意思

241
00:11:36,740 --> 00:11:39,279
好那我們就說 接下來就看說

242
00:11:40,279 --> 00:11:43,399
我要怎麼知道網路現在有沒有擁擠呢

243
00:11:43,399 --> 00:11:45,240
我們剛剛提到TCP本來就是它自己判斷

244
00:11:46,240 --> 00:11:49,419
網路沒有壅擠它就往前衝速度加快

245
00:11:49,419 --> 00:11:51,480
加速 那網路壅擠它就踩剎車

246
00:11:52,480 --> 00:11:54,019
啊問題在於說我這個TCP連線

247
00:11:55,019 --> 00:11:57,000
啊我怎麼知道網路現在有沒有壅擠

248
00:11:57,000 --> 00:11:58,299
我根據什麼來判斷

249
00:11:58,299 --> 00:12:00,539
我們說很簡單 它就根據

250
00:12:00,539 --> 00:12:01,580
一個很簡單就是

251
00:12:01,580 --> 00:12:05,340
如果 發生了所謂的我們介紹叫做

252
00:12:05,340 --> 00:12:06,720
three duplicated的ack

253
00:12:07,720 --> 00:12:10,519
如果我在傳送的過程當中

254
00:12:10,519 --> 00:12:13,159
出現了three duplicated ack這個情形的話

255
00:12:14,159 --> 00:12:17,220
我就說這個代表我把它解釋啦

256
00:12:17,220 --> 00:12:18,080
說封包開始掉

257
00:12:19,080 --> 00:12:21,980
所以three duplicated ack我就把它解釋成

258
00:12:21,980 --> 00:12:26,779
packet lost 好那每一次如果發生packet lost的話

259
00:12:26,779 --> 00:12:29,320
我就把congestion window 把它變成原來的一半

260
00:12:30,320 --> 00:12:31,639
就是我們剛剛講的

261
00:12:31,639 --> 00:12:34,539
如果我發生 發現這個封包

262
00:12:34,539 --> 00:12:38,720
有lost掉就是發生了three duplicated ack的話

263
00:12:38,720 --> 00:12:40,940
我就把它認定封包是掉了

264
00:12:40,940 --> 00:12:44,220
那我就立刻踩剎車的意思

265
00:12:44,220 --> 00:12:46,179
我就把我原來的congestion window呢

266
00:12:46,179 --> 00:12:49,440
就把它除以一半 這個做法是這樣啦

267
00:12:49,440 --> 00:12:51,419
好那我們用一個比較簡單的例子

268
00:12:51,419 --> 00:12:53,980
比較直覺的例子來解釋 就是我們用

269
00:12:53,980 --> 00:12:57,299
封包量數量來解釋啦 那事實上

270
00:12:58,299 --> 00:13:00,039
我們說 事實上congestion window的值

271
00:13:02,039 --> 00:13:05,559
它是用byte的數量 因為我們說

272
00:13:05,559 --> 00:13:08,960
TCP是一個所謂的byte oriented protocol

273
00:13:08,960 --> 00:13:10,679
或叫做byte stream protocol嘛

274
00:13:10,679 --> 00:13:15,360
TCP本身它給 像我們對方Receiver

275
00:13:15,360 --> 00:13:18,039
給Sender的那個Advertise Window嘛

276
00:13:18,039 --> 00:13:19,820
我們講做流量控制

277
00:13:19,820 --> 00:13:22,200
做flow control的那個Advertise Window

278
00:13:23,200 --> 00:13:26,179
它的一個數字那個數字代表是一個量

279
00:13:26,179 --> 00:13:27,399
一個byte的量

280
00:13:27,399 --> 00:13:30,259
所以事實上TCP這個congestion window呢

281
00:13:30,259 --> 00:13:32,580
它其實定義的是一個數字

282
00:13:32,580 --> 00:13:34,620
這個數字呢代表是一個

283
00:13:34,620 --> 00:13:36,240
我們講number of byte

284
00:13:36,240 --> 00:13:37,139
就是byte的數量

285
00:13:38,139 --> 00:13:39,320
不過我們這裡為了比較

286
00:13:40,320 --> 00:13:43,639
簡單來解釋我們就用封包的數量嘛

287
00:13:43,639 --> 00:13:46,600
那事實上他不是封包的數量 事實上我們說

288
00:13:46,600 --> 00:13:47,899
congestion window呢

289
00:13:47,899 --> 00:13:51,759
它的值是byte的量不是封包量

290
00:13:51,759 --> 00:13:53,019
不過我們這裡為了比較容易解釋

291
00:13:54,019 --> 00:13:56,799
我們就用封包量來解釋 也就是說

292
00:13:56,799 --> 00:13:59,480
假設呢一開始 現在呢congestion window

293
00:13:59,480 --> 00:14:00,519
是等於16個封包

294
00:14:01,519 --> 00:14:04,240
16好那一旦發生這個packet lost

295
00:14:05,240 --> 00:14:07,019
它就把它減一半變成8

296
00:14:08,019 --> 00:14:11,759
那如果又發生一次它就變成4

297
00:14:11,759 --> 00:14:13,539
如果再發生一次

298
00:14:13,539 --> 00:14:15,419
啊就是所謂的three duplicated

299
00:14:15,419 --> 00:14:18,880
ack的話就變成2 所以變成每一次減一半

300
00:14:18,880 --> 00:14:22,799
16變成8 8變成4 4變成2 2變成1

301
00:14:22,799 --> 00:14:25,539
2變成1啦 最後這樣子 不過

302
00:14:25,539 --> 00:14:26,039
最少就是1了

303
00:14:27,039 --> 00:14:28,440
congestion window如果小於1

304
00:14:28,440 --> 00:14:29,980
就代表已經不能送了嘛

305
00:14:29,980 --> 00:14:32,360
所以congestion window不能小於1啦

306
00:14:32,360 --> 00:14:35,620
好那這個我們說 congestion window本身

307
00:14:35,620 --> 00:14:38,340
最小最小 也要等於一個封包

308
00:14:38,340 --> 00:14:42,620
那以TCP的這個所謂的 terminology來看的話

309
00:14:42,620 --> 00:14:45,960
就是一個maximum segment size

310
00:14:45,960 --> 00:14:47,380
一般我們叫MSS

311
00:14:47,380 --> 00:14:52,259
就是它的最小值 也要等於一個MSS的值的意思

312
00:14:53,259 --> 00:14:55,940
那我們說減少的時候是怎麼減少

313
00:14:55,940 --> 00:14:57,539
那我們來看怎麼增加

314
00:14:57,539 --> 00:14:58,840
那增加的時候是這樣子

315
00:14:58,840 --> 00:15:01,960
就是說如果網路現在 比如說一開始的時候阿

316
00:15:01,960 --> 00:15:03,299
現在變得比較流暢的話

317
00:15:04,299 --> 00:15:05,960
一開始可能很順暢

318
00:15:05,960 --> 00:15:08,320
那我就慢慢加慢慢加嘛

319
00:15:08,320 --> 00:15:11,019
所以我們接下來就看說 那我怎麼加

320
00:15:12,019 --> 00:15:14,440
加這個所謂的這個congestion window

321
00:15:14,440 --> 00:15:16,440
我們的做法是這樣就是說

322
00:15:16,440 --> 00:15:19,139
好我們說每一次呢 這個source

323
00:15:20,139 --> 00:15:22,399
如果可以把一個congestion window的量

324
00:15:23,399 --> 00:15:26,980
通通把它送完出去然後可以送到ack

325
00:15:27,980 --> 00:15:32,919
就是說 在一個RTT的時間

326
00:15:32,919 --> 00:15:34,279
就是上一個RTT啦

327
00:15:34,279 --> 00:15:35,980
就上一個Round Trip Time

328
00:15:35,980 --> 00:15:40,799
那所送過的封包 它的ack都收到的話

329
00:15:40,799 --> 00:15:43,380
就是說在上一個RTT的時間

330
00:15:43,380 --> 00:15:47,100
我這個封包傳送是很 比如說很流暢的

331
00:15:48,100 --> 00:15:50,639
就是代表說沒有congestion的意思嘛

332
00:15:50,639 --> 00:15:53,799
代表說 在上一個RTT的時間

333
00:15:53,799 --> 00:15:55,919
我們所有送出去的封包

334
00:15:55,919 --> 00:15:57,940
或者所有送出去的data

335
00:15:57,940 --> 00:16:01,179
都收到了ack 代表說這個網路呢現在

336
00:16:02,179 --> 00:16:05,759
都沒有阻塞 所以我就要加速啊

337
00:16:05,759 --> 00:16:09,240
加速怎麼加就是在一個RTT的時間之內

338
00:16:10,240 --> 00:16:11,279
如果你所送的封包

339
00:16:12,279 --> 00:16:14,480
通通成功的收到了ack

340
00:16:14,480 --> 00:16:16,940
我們就把這個congestion window呢

341
00:16:16,940 --> 00:16:19,019
就把它加一個封包的大小

342
00:16:20,019 --> 00:16:23,620
一個封包這個封包的大小就是一個MSS

343
00:16:23,620 --> 00:16:25,960
就是最大量的意思

344
00:16:25,960 --> 00:16:30,779
所以就是說 如果呢 網路流暢的時候

345
00:16:30,779 --> 00:16:34,740
沒有阻塞的時候 每經過一個RTT的時間

346
00:16:35,740 --> 00:16:38,539
經過一個RTT的時間代表說

347
00:16:38,539 --> 00:16:43,159
我前面送的封包 都成功的收到ack的話

348
00:16:44,159 --> 00:16:47,799
好我就把我的congestion window加上一個

349
00:16:47,799 --> 00:16:50,600
MSS的值所以我們說

350
00:16:50,600 --> 00:16:53,299
加速的時候是線性加速

351
00:16:53,299 --> 00:16:55,100
就一開始congestion window不管是多少

352
00:16:56,100 --> 00:17:00,639
經過一個RTT我就把它加上一個MSS

353
00:17:00,639 --> 00:17:03,980
假設呢又經過了一個RTT的時間

354
00:17:03,980 --> 00:17:05,079
我再加一個MSS

355
00:17:06,079 --> 00:17:08,900
就是它的所謂的addictive increase

356
00:17:08,900 --> 00:17:12,980
就是我增加的時候呢 是線性增加

357
00:17:12,980 --> 00:17:14,500
或者簡單的講就是

358
00:17:14,500 --> 00:17:18,559
每一個RTT加一個封包的大小

359
00:17:18,559 --> 00:17:22,200
每經過一個RTT加一個封包的大小

360
00:17:22,200 --> 00:17:26,480
好這個就是 簡單的講 就是所謂的AIMD裡面的

361
00:17:26,480 --> 00:17:29,240
addictive的這種increase的機制

362
00:17:29,240 --> 00:17:31,000
 Subtitles End: mo.dbxdb.com


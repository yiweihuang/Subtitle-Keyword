2
00:00:09,000 --> 00:00:11,100
阿接下來呢我們來跟各位介紹

3
00:00:11,100 --> 00:00:13,080
這個TCP congestion  control裡面呢

4
00:00:13,080 --> 00:00:16,860
還有一個非常非常重要的機器叫做Slow Start

5
00:00:16,860 --> 00:00:18,880
那我們來看甚麼叫做Slow Start

6
00:00:18,880 --> 00:00:21,840
阿我們之前介紹 所謂的AIMD

7
00:00:21,840 --> 00:00:23,680
裡面的所謂的additive increase

8
00:00:23,680 --> 00:00:27,240
就是說這個TCP呢如果觀察這個網路本身

9
00:00:27,240 --> 00:00:31,300
沒有阻塞 它會慢慢的加速啦

10
00:00:31,300 --> 00:00:33,560
那所謂的加速就是把congestion window呢

11
00:00:33,560 --> 00:00:36,400
把它變大 那變大的方式就是說

12
00:00:36,400 --> 00:00:38,740
每經過一個RTT的時間

13
00:00:38,740 --> 00:00:40,440
就把congestion window呢的值

14
00:00:41,440 --> 00:00:44,140
多加一個MSS就是最大封包的量

15
00:00:45,140 --> 00:00:48,480
每經過一個RTT就加一個MSS

16
00:00:48,480 --> 00:00:51,480
每經過一個RTT 加一個MSS

17
00:00:51,480 --> 00:00:54,180
那我們說這種加法呢叫做所謂的線性加法

18
00:00:55,180 --> 00:00:58,200
叫做additive increase因為他每一個RTT呢

19
00:00:59,200 --> 00:01:01,440
加一個MSS 線性

20
00:01:01,440 --> 00:01:04,280
就是這個加速比較慢 比較慢

21
00:01:04,280 --> 00:01:07,940
好那這個AIMD比較適合的

22
00:01:07,940 --> 00:01:09,620
這個時間點是說

23
00:01:10,620 --> 00:01:12,760
也就是這個TCP呢它如果傳送呢

24
00:01:12,760 --> 00:01:16,019
已經快接近了那個所謂的上限

25
00:01:17,019 --> 00:01:20,440
就是說這個網路的這個所謂的上限呢

26
00:01:20,440 --> 00:01:22,620
我在逼近這個上限的時候呢

27
00:01:22,620 --> 00:01:24,959
我用這個所謂的線性加法

28
00:01:25,959 --> 00:01:28,780
會比較好 也就是說比較比較適合啦

29
00:01:28,780 --> 00:01:32,440
因為我已經快到了這個網路的極限了嘛

30
00:01:32,440 --> 00:01:35,160
所以我就慢慢的靠近它慢慢的靠近它然後

31
00:01:35,160 --> 00:01:39,120
碰到它的時候 就會發生所謂的packet lost對不對

32
00:01:39,120 --> 00:01:40,420
所以我就降了一半

33
00:01:40,420 --> 00:01:43,180
所以也就是說 這個AIMD

34
00:01:43,180 --> 00:01:46,079
比較合適的地方 比較適用的地方是說

35
00:01:47,079 --> 00:01:49,980
好當你TCP呢傳送這個速度

36
00:01:49,980 --> 00:01:53,620
已經快接近 這個網路的上限

37
00:01:53,620 --> 00:01:55,099
就是說網路可以允許的這個

38
00:01:56,099 --> 00:01:58,780
所謂的速度的上限的時候

39
00:01:58,780 --> 00:02:00,019
我們就用這個線性

40
00:02:01,019 --> 00:02:03,660
方法來逼近這個網路的上限

41
00:02:03,660 --> 00:02:06,420
但是說 但是它最大的問題就在於說

42
00:02:07,420 --> 00:02:09,520
connectionㄧ開始的時候

43
00:02:09,520 --> 00:02:11,440
剛連線剛建起來的時候 這個時候

44
00:02:11,440 --> 00:02:12,160
網路可能還非常的寬

45
00:02:13,160 --> 00:02:16,800
非常的鬆 也就是說那個時候容量很大

46
00:02:16,800 --> 00:02:18,440
那一開始的時候容量很大

47
00:02:18,440 --> 00:02:21,900
我們如果用線性的慢慢的逼近的話

48
00:02:21,900 --> 00:02:23,340
就是說這個時間花太久

49
00:02:24,340 --> 00:02:27,500
就是說網路呢這個時候 就是高速公路一樣

50
00:02:27,500 --> 00:02:28,440
這個高速公路都沒有車

51
00:02:29,440 --> 00:02:31,280
那你車子開上來的時候 你開始加速

52
00:02:32,280 --> 00:02:34,039
所以我們每次加一公里 每次加一公里

53
00:02:35,039 --> 00:02:37,240
阿這個加的速度就太慢了

54
00:02:37,240 --> 00:02:39,120
就是一開始連線剛建立的時候

55
00:02:40,120 --> 00:02:41,740
網路可能這時候呢

56
00:02:42,740 --> 00:02:44,759
不知道網路的這個上限在甚麼地方

57
00:02:44,759 --> 00:02:47,520
可能非常的寬 可能非常的大

58
00:02:47,520 --> 00:02:49,880
這時候我們就希望這個TCP呢

59
00:02:49,880 --> 00:02:52,979
它可以加速可以加快一點

60
00:02:52,979 --> 00:02:55,160
加快一點的方式 就是叫做slow start

61
00:02:56,160 --> 00:02:58,740
slow start就是一開始很慢

62
00:02:58,740 --> 00:03:01,520
可是呢它接下來的加速的動作呢

63
00:03:01,520 --> 00:03:03,099
是用exponential

64
00:03:03,099 --> 00:03:05,979
我們特別強調 是用exponential的加速

65
00:03:05,979 --> 00:03:09,440
而不是用linear 我們說AIMD呢

66
00:03:09,440 --> 00:03:11,080
那個加速是線性加速法

67
00:03:12,080 --> 00:03:15,819
就是每一個RTT呢 我們加一個MSS

68
00:03:15,819 --> 00:03:18,620
那connectionㄧ開始的時候呢

69
00:03:18,620 --> 00:03:22,340
我們必須把這個速度 加速的動作呢

70
00:03:22,340 --> 00:03:23,180
正式再加快一點

71
00:03:24,180 --> 00:03:26,060
所以我們希望用exponential的方式來加

72
00:03:27,060 --> 00:03:29,680
就是加速呢變成指數加速

73
00:03:29,680 --> 00:03:31,539
就把那個油門踩到底的意思

74
00:03:31,539 --> 00:03:33,280
讓它趕快衝上去

75
00:03:33,280 --> 00:03:35,819
好那它的做法是甚麼東西呢

76
00:03:35,819 --> 00:03:37,759
很簡單就這麼做

77
00:03:37,759 --> 00:03:41,400
我們說 好首先一開始的時候我們說

78
00:03:41,400 --> 00:03:43,860
還是一樣 讓這個congestion window呢

79
00:03:43,860 --> 00:03:47,500
等於一個封包的大小 就是一個MSS

80
00:03:47,500 --> 00:03:48,960
所以我們簡單算一下

81
00:03:48,960 --> 00:03:51,360
ㄧ開始的時候一個TCP連線速度有多快

82
00:03:52,360 --> 00:03:54,940
就是傳輸速度有多快我們說好假設

83
00:03:54,940 --> 00:03:56,380
MSS是500個bytes

84
00:03:57,380 --> 00:03:59,460
舉個例子喔500個bytes

85
00:03:59,460 --> 00:04:01,500
ㄧ個MSS到底有多大

86
00:04:01,500 --> 00:04:04,759
其實他是根據說 你這個主機

87
00:04:04,759 --> 00:04:07,599
你下面所連的這個網路的上限

88
00:04:07,599 --> 00:04:09,699
比如如果是我們連Ethernet的話

89
00:04:09,699 --> 00:04:11,300
這個MSS就是1500個bytes

90
00:04:12,300 --> 00:04:14,840
如果我們這個網路ㄧ開始接是接wifi

91
00:04:14,840 --> 00:04:17,380
比如說IEEE 802.11的話

92
00:04:17,380 --> 00:04:19,759
那你的最大限制是2300個bytes

93
00:04:19,759 --> 00:04:24,560
比如說2312啦 就是說一個MSS到底是多少

94
00:04:24,560 --> 00:04:26,420
這是可以設定的值

95
00:04:26,420 --> 00:04:29,399
可是這個值呢通常就是這個主機

96
00:04:29,399 --> 00:04:33,519
他所連的這個網路 這個封包的最大

97
00:04:33,519 --> 00:04:37,300
最大上限 我們假設這個時候MSS是500好了

98
00:04:37,300 --> 00:04:40,459
那我們假設說 雙方來回的這個Round Trip Time

99
00:04:41,459 --> 00:04:44,040
因為TCP建連線嘛 所以是ㄧ定是兩邊

100
00:04:45,040 --> 00:04:47,800
阿兩邊這個訊號來回的RTT的時間是

101
00:04:47,800 --> 00:04:50,660
200個millisecond 喔那把這個

102
00:04:50,660 --> 00:04:55,040
MSS的值除以這個RTT 就是我們的Rate

103
00:04:56,040 --> 00:04:57,139
就是20kㄧ個sec

104
00:04:58,139 --> 00:05:01,100
我們500是bytes啦 所以要乘上8變成4000

105
00:05:02,100 --> 00:05:05,240
阿4000呢除以200就是等於20

106
00:05:05,240 --> 00:05:06,300
20 kb per second也就是說

107
00:05:07,300 --> 00:05:09,139
你看一個TCP建連線 剛開始的時候

108
00:05:10,139 --> 00:05:12,500
其實他的傳輸的速率不高

109
00:05:12,500 --> 00:05:16,699
20 kb per second其實算是算是慢速啦

110
00:05:16,699 --> 00:05:19,160
ㄧ開始很慢所以為甚麼叫做slow start

111
00:05:20,160 --> 00:05:21,480
就是因為一開始很慢

112
00:05:21,480 --> 00:05:22,980
為什麼他慢你可以算

113
00:05:22,980 --> 00:05:24,660
我簡單就算出來阿你看

114
00:05:24,660 --> 00:05:26,500
ㄧ個MSS假設500個bytes

115
00:05:26,500 --> 00:05:28,220
RTT 200個millisecond ㄧ組合就知道

116
00:05:29,220 --> 00:05:30,680
一個TCP連線一開始

117
00:05:30,680 --> 00:05:32,899
只能送掉20個 kb per second

118
00:05:32,899 --> 00:05:34,199
這算是很慢的阿

119
00:05:34,199 --> 00:05:37,800
但是呢我們接下來讓他快速的加起來

120
00:05:37,800 --> 00:05:39,440
就好我們的做法是這樣

121
00:05:39,440 --> 00:05:42,199
我們說 每收到一個ack 注意到

122
00:05:43,199 --> 00:05:45,300
我們就把這個congestion window呢

123
00:05:46,300 --> 00:05:51,959
加一個MSS 跟AIMD不一樣的地方

124
00:05:51,959 --> 00:05:56,500
我們特別強調AIMD 是每一個RTT的時間

125
00:05:57,500 --> 00:06:02,220
才加一個MSS 每一個RTT加MSS

126
00:06:02,220 --> 00:06:06,440
現在slow start是每一個ack每收到ack我就加

127
00:06:07,440 --> 00:06:11,160
ㄧ次 每收到一個ack就加一個這個RT

128
00:06:11,160 --> 00:06:12,880
加一個這個MSS

129
00:06:12,880 --> 00:06:18,019
所以特別注意到 是每收到一個ack就加一個MSS

130
00:06:19,019 --> 00:06:21,779
那這樣他就會達到所謂的exponential

131
00:06:21,779 --> 00:06:23,800
變成說你一開始送一個封包

132
00:06:23,800 --> 00:06:25,940
ㄧ個ack之後送變兩個

133
00:06:25,940 --> 00:06:27,660
阿兩個ack之後就變四個

134
00:06:27,660 --> 00:06:29,839
四個之後就變八個 所以你可以想

135
00:06:29,839 --> 00:06:32,380
一個封包會收到一個ack嘛

136
00:06:32,380 --> 00:06:34,740
收到一個ack以後就變兩個封包

137
00:06:34,740 --> 00:06:36,800
阿兩個封包就會有兩個ack

138
00:06:36,800 --> 00:06:39,319
就變成四個封包然後變成

139
00:06:39,319 --> 00:06:41,579
四個 四個封包加四個ack

140
00:06:41,579 --> 00:06:44,980
就變成八個所以他的那個congestion window增加了

141
00:06:44,980 --> 00:06:48,100
就變成1、2、4、8、16、32、64喔

142
00:06:49,100 --> 00:06:51,560
所以他就是所謂的exponential

143
00:06:51,560 --> 00:06:54,819
變成指數的增加非常非常快速 也就是說

144
00:06:54,819 --> 00:06:56,920
每經過一個RTT呢

145
00:06:56,920 --> 00:07:00,300
其實他會把他的封包的數量呢double

146
00:07:01,300 --> 00:07:04,620
double的意思 剛剛提到就每一個RTT

147
00:07:04,620 --> 00:07:06,220
事實上每一個ack

148
00:07:06,220 --> 00:07:08,560
事實上是每一個ack加一個MSS

149
00:07:09,560 --> 00:07:12,000
他的結果就是每一個RTT呢就是

150
00:07:12,000 --> 00:07:13,040
double原來的congestion control

151
00:07:14,040 --> 00:07:15,779
所以他我們說他是exponential

152
00:07:15,779 --> 00:07:18,240
是因為他每一個RTT呢

153
00:07:18,240 --> 00:07:21,019
會變成原來的congestion control兩倍

154
00:07:21,019 --> 00:07:24,319
我們用一個這個 這個圖來解釋一下

155
00:07:24,319 --> 00:07:26,220
我們說我們看右邊這個圖

156
00:07:26,220 --> 00:07:28,019
ㄧ開始 就送一個封包嘛

157
00:07:29,019 --> 00:07:31,600
那我現在一個封包處理了收到一個ack

158
00:07:31,600 --> 00:07:33,740
好當我收到一個ack的時候呢

159
00:07:33,740 --> 00:07:36,500
我就把我的congestion window加一個

160
00:07:37,500 --> 00:07:39,360
MSS是加一個封包的意思

161
00:07:39,360 --> 00:07:40,639
好這樣我就可以送兩個封包

162
00:07:41,639 --> 00:07:45,740
好那送兩個封包就會收到兩個ack

163
00:07:45,740 --> 00:07:47,560
那我原來就是2了嘛

164
00:07:47,560 --> 00:07:50,019
那又收到兩個ack阿就變成4

165
00:07:50,019 --> 00:07:53,180
所以接下來 我就可以送四個封包的意思

166
00:07:54,180 --> 00:07:56,319
四個封包又收到四個ack

167
00:07:57,319 --> 00:08:00,399
那每收到一個 每收到一個ack就加ㄧ嘛

168
00:08:00,399 --> 00:08:02,120
那收到四個ack就加四阿原來就是四

169
00:08:03,120 --> 00:08:05,399
接下來我就可以送 八個封包

170
00:08:05,399 --> 00:08:08,319
我就可以12345678八個封包

171
00:08:08,319 --> 00:08:09,639
就一次丟出去啦

172
00:08:09,639 --> 00:08:11,720
也就是說我們就可以看得出來

173
00:08:11,720 --> 00:08:15,399
ㄧ開始送一個封包那經過一個RTT之後

174
00:08:15,399 --> 00:08:18,860
這個地方為甚麼特別強調RTT 是因為說

175
00:08:20,860 --> 00:08:24,259
經過這個RTT的時間 我就變兩個封包

176
00:08:24,259 --> 00:08:26,100
阿經過這個RTT呢我就變三個封包

177
00:08:27,100 --> 00:08:29,639
好再經過這個RTT呢我就變四個封包

178
00:08:29,639 --> 00:08:30,899
阿就是變八個封包

179
00:08:30,899 --> 00:08:34,720
就是每經過一個RTT呢我就加倍的意思

180
00:08:34,720 --> 00:08:36,259
所以他的結果呢就是

181
00:08:37,259 --> 00:08:40,299
每一個RTT我會把congestion window的值加倍

182
00:08:41,299 --> 00:08:44,559
阿我的做法 就是說每收到一個ack

183
00:08:45,559 --> 00:08:48,940
每收到一個ack我就把這個congestion window呢

184
00:08:48,940 --> 00:08:52,679
加上一個MSS 那他的結果就是說

185
00:08:52,679 --> 00:08:56,360
ㄧ開始的時候呢這個這個傳輸速率是很慢的

186
00:08:57,360 --> 00:09:01,799
但是呢 他接下來會用exponential的方式

187
00:09:01,799 --> 00:09:03,880
然後快速的加速這樣子

188
00:09:03,880 --> 00:09:07,399
所以這個slow start呢在TCP裡面

189
00:09:07,399 --> 00:09:09,860
是非常非常重要的方式

190
00:09:09,860 --> 00:09:13,799
好那我們再來看一下特別強調我們說

191
00:09:13,799 --> 00:09:16,440
不管我是slow start快速增加

192
00:09:16,440 --> 00:09:20,639
還是所謂的快靠近那個網路的上限的時候

193
00:09:20,639 --> 00:09:23,899
他會用所謂的AIMD嘛 就是線性增加

194
00:09:23,899 --> 00:09:29,860
或者指數增加 或線性增加 我們都會碰到一個地方

195
00:09:29,860 --> 00:09:32,500
就開始要掉下來 那我們說

196
00:09:32,500 --> 00:09:35,460
就是因為不管你是指數增加

197
00:09:35,460 --> 00:09:39,139
還是線性增加都會碰到那個網路的上限

198
00:09:39,139 --> 00:09:42,860
就是那個頂 那碰到那個頂的時候

199
00:09:42,860 --> 00:09:45,740
反映出甚麼 第一個就是說阻塞嘛

200
00:09:45,740 --> 00:09:49,500
掉封包嘛 我們說 這個封包掉呢

201
00:09:49,500 --> 00:09:51,620
有兩種 第一個就是說

202
00:09:51,620 --> 00:09:53,679
我如果看到三個duplicated ack

203
00:09:54,679 --> 00:09:58,720
如果我們看到 收到三個重複的ack 我們認定

204
00:09:58,720 --> 00:10:01,320
這是封包掉了 那我會把

205
00:10:01,320 --> 00:10:03,899
我的congestion window把他減半

206
00:10:03,899 --> 00:10:06,919
減半 然後再來一樣減半之後呢

207
00:10:06,919 --> 00:10:10,100
再線性的增加 但是有一個很特別的地方就是說

208
00:10:11,100 --> 00:10:13,659
但是如果我這個是出現了timeout

209
00:10:14,659 --> 00:10:17,700
我們說右邊這邊看一下

210
00:10:17,700 --> 00:10:22,419
三個duplicated ack 代表說這個網路呢

211
00:10:22,419 --> 00:10:24,279
只是偶爾掉一個封包

212
00:10:24,279 --> 00:10:28,519
它還有能力 來繼續傳送

213
00:10:28,519 --> 00:10:31,039
所以我們把window呢congestion window減半

214
00:10:32,039 --> 00:10:34,500
減半 然後呢再增加

215
00:10:35,500 --> 00:10:37,899
但是如果發生timeout

216
00:10:37,899 --> 00:10:39,919
timeout代表說這個網路

217
00:10:39,919 --> 00:10:42,899
somehow呢是比較比較危險的

218
00:10:42,899 --> 00:10:46,500
也就是說timeout本身 他所要帶來的訊息就是說

219
00:10:47,500 --> 00:10:50,759
這個網路阻塞的程度呢是比較嚴重

220
00:10:50,759 --> 00:10:54,980
這個時候呢我們的congestion window不是減半

221
00:10:54,980 --> 00:10:56,100
我們直接給他減到ㄧ

222
00:10:57,100 --> 00:10:59,500
不是減半喔timeout的時候

223
00:10:59,500 --> 00:11:00,820
congestion window不是減半

224
00:11:00,820 --> 00:11:02,440
是直接讓他降到ㄧ從頭再來

225
00:11:03,440 --> 00:11:06,100
因為你發生了timeout代表網路的阻塞呢

226
00:11:06,100 --> 00:11:09,860
是比較嚴重的 那如果網路阻塞比較嚴重

227
00:11:09,860 --> 00:11:13,220
大家就是等於說那個剎車呢就等於說我緊急踩剎車

228
00:11:13,220 --> 00:11:17,460
把他剎到停下來然後再從頭開始的意思

229
00:11:17,460 --> 00:11:20,100
也就是說如果我們發生timeout的話

230
00:11:20,100 --> 00:11:25,720
我們說 我們的congestion window 把他直接降到ㄧ

231
00:11:25,720 --> 00:11:30,440
降到ㄧ喔然後呢再開始由slow star

232
00:11:30,440 --> 00:11:33,220
ㄧ樣喔降到ㄧ之後呢用slow start呢

233
00:11:33,220 --> 00:11:36,720
再開始長起來 用slow start的方式

234
00:11:36,720 --> 00:11:39,480
再來長 那長到甚麼時候呢

235
00:11:39,480 --> 00:11:42,139
長到一個threshold 就是一個頂

236
00:11:43,139 --> 00:11:45,720
這個threshold就是我們當時

237
00:11:45,720 --> 00:11:47,440
發生timeout的時候呢

238
00:11:47,440 --> 00:11:49,440
我的congestion window的一半的值

239
00:11:50,440 --> 00:11:52,919
ㄧ半的值喔 變成我的一個

240
00:11:52,919 --> 00:11:54,940
ㄧ個所謂的臨界點

241
00:11:54,940 --> 00:11:58,720
然後降到ㄧ 然後開始慢慢exponential

242
00:11:58,720 --> 00:12:00,399
就碰到這個值之後

243
00:12:00,399 --> 00:12:03,759
碰到這個threshold呢 再改成linear

244
00:12:03,759 --> 00:12:05,320
所以這個地方特別注意到

245
00:12:05,320 --> 00:12:07,559
就是如果發生timeout的話

246
00:12:07,559 --> 00:12:10,519
我們會把congestion window直接降為ㄧ

247
00:12:10,519 --> 00:12:13,620
然後用exponential 就是用slow start的方式呢

248
00:12:13,620 --> 00:12:17,299
讓他指數的增加 增加到呢

249
00:12:17,299 --> 00:12:19,000
原來的congestion window的ㄧ半

250
00:12:20,000 --> 00:12:22,639
然後就改成linear的做法

251
00:12:22,639 --> 00:12:24,740
我們等一下用一個圖來解釋啦

252
00:12:24,740 --> 00:12:27,919
好所以我們說整個把TCP的congestion control

253
00:12:27,919 --> 00:12:29,240
做ㄧ個很快的這個summary喔就是說

254
00:12:30,240 --> 00:12:34,320
首先如果呢 這個congestion window呢

255
00:12:34,320 --> 00:12:37,820
他是低於這個threshold 我們的一個臨界值

256
00:12:37,820 --> 00:12:39,240
那這個時候呢就用slow start

257
00:12:41,240 --> 00:12:44,120
slow start 來用指數的增加

258
00:12:45,120 --> 00:12:47,480
當這個congestion window呢他

259
00:12:47,480 --> 00:12:49,380
超過這個threshold的時候

260
00:12:49,380 --> 00:12:53,100
我們就用線性增加就是AIMD的線性增加

261
00:12:53,100 --> 00:12:55,220
那我們說 這個時候我們叫做

262
00:12:55,220 --> 00:12:56,360
congestion-avoidance的phase

263
00:12:57,360 --> 00:13:00,240
就是說一開始我們叫做slow start的phase

264
00:13:00,240 --> 00:13:02,480
就是用指數 快速增加

265
00:13:02,480 --> 00:13:04,480
那碰到一個threshold的時候呢

266
00:13:04,480 --> 00:13:07,840
就改成線性的 線性的 linear的

267
00:13:07,840 --> 00:13:11,200
阿這個線性的這一段增加的過程

268
00:13:11,200 --> 00:13:14,299
就叫做congestion-avoidance的phase

269
00:13:14,299 --> 00:13:18,860
好那但是呢我們說如果我們 出現了

270
00:13:18,860 --> 00:13:21,899
發生了一個叫做triple duplicated ack

271
00:13:21,899 --> 00:13:26,639
就是 等於說發生了三次重複的ack

272
00:13:26,639 --> 00:13:29,759
好那我們就把 這個window呢設為ㄧ半

273
00:13:30,759 --> 00:13:33,639
window設為ㄧ半 然後我的threshold呢

274
00:13:33,639 --> 00:13:38,500
也設為ㄧ半 變成就降ㄧ半然後從linear開始

275
00:13:38,500 --> 00:13:40,000
那我們說如果我們發生了timeout

276
00:13:41,000 --> 00:13:42,279
剛剛提到timeout就比較嚴重

277
00:13:43,279 --> 00:13:45,639
我們的threshold呢就設為原來的ㄧ半

278
00:13:46,639 --> 00:13:49,559
然後呢可是呢我的congestion window

279
00:13:49,559 --> 00:13:51,000
會降為原來的 降為ㄧ

280
00:13:52,000 --> 00:13:54,860
然後再用exponential長上來

281
00:13:54,860 --> 00:13:58,580
我們用一個圖呢 這個圖很清楚的告訴我們說

282
00:13:58,580 --> 00:14:02,259
TCP的congestion control 到底是怎麼運作的

283
00:14:02,259 --> 00:14:03,600
好我們用這個例子來看

284
00:14:04,600 --> 00:14:06,960
這個圖喔首先ㄧ開始的時候

285
00:14:06,960 --> 00:14:08,220
我們的橫軸呢是Round Trip Time

286
00:14:09,220 --> 00:14:12,279
就是1代表是1個RTT啦

287
00:14:12,279 --> 00:14:14,159
2代表兩個RTT這樣子

288
00:14:14,159 --> 00:14:16,380
就因為我們每一個RTT來做一個檢查嘛

289
00:14:17,380 --> 00:14:20,580
好ㄧ開始的時候 剛連連線剛建起來

290
00:14:20,580 --> 00:14:22,340
所以我們的一開始這個等於ㄧ

291
00:14:22,340 --> 00:14:26,440
就是我們的congestion window等於ㄧ嘛

292
00:14:26,440 --> 00:14:28,000
那經過一個RTT之後他就變成二

293
00:14:30,000 --> 00:14:32,279
再經過一個RTT就變成四

294
00:14:32,279 --> 00:14:34,620
再來就變成八再來就變成十六

295
00:14:34,620 --> 00:14:38,399
所以這一段 這一根就是我們的exponential

296
00:14:38,399 --> 00:14:41,620
指數的加速嘛 加速上去

297
00:14:41,620 --> 00:14:44,620
好那接下來就我們說假設

298
00:14:44,620 --> 00:14:47,019
發生一個three duplicated的ack

299
00:14:48,019 --> 00:14:50,799
three duplicated ack代表說封包掉了

300
00:14:50,799 --> 00:14:53,120
那我們就降ㄧ半 所以我們看

301
00:14:53,120 --> 00:14:54,220
這個地方就降ㄧ半 降到八

302
00:14:55,220 --> 00:14:57,419
降到八之後呢再linear

303
00:14:57,419 --> 00:15:00,380
再線性的增加 這個地方是線性增加

304
00:15:00,380 --> 00:15:03,679
增到這邊好假設呢這個時候呢我們說

305
00:15:03,679 --> 00:15:05,299
congestion window到12了

306
00:15:05,299 --> 00:15:07,799
好這個時候發生一個timeout

307
00:15:07,799 --> 00:15:10,240
這個地方特別注意 這個地方很重要

308
00:15:11,240 --> 00:15:13,840
發生timeout的時候會有甚麼事情呢

309
00:15:13,840 --> 00:15:15,919
發生timeout的時候注意到

310
00:15:15,919 --> 00:15:18,679
第一個事情 這個congestion window

311
00:15:18,679 --> 00:15:23,860
馬上降為ㄧ 第一個congestion window降為ㄧ

312
00:15:23,860 --> 00:15:25,159
然後threshold設為原來的ㄧ半

313
00:15:26,159 --> 00:15:28,840
這裡是12 所以threshold是6

314
00:15:28,840 --> 00:15:30,340
所以這一條線就變為ㄧ半

315
00:15:31,340 --> 00:15:35,960
然後接下來呢又指數exponential呢就slow start

316
00:15:35,960 --> 00:15:39,019
去逼近這條threshold就這個地方

317
00:15:39,019 --> 00:15:41,799
1、2、4 碰到這個地方

318
00:15:41,799 --> 00:15:44,620
那碰到這個threshold之後呢 又再變成linear

319
00:15:45,620 --> 00:15:48,980
再變成linear 好接下來呢我們說 又碰到一個

320
00:15:48,980 --> 00:15:52,159
three duplicated的ack 這個three duplicated ack

321
00:15:52,159 --> 00:15:54,299
是算是比較輕微嘛 所以我們減半就好

322
00:15:55,299 --> 00:15:56,220
減半然後再linear

323
00:15:58,220 --> 00:16:02,620
所以從這個圖裡面呢我們就很清楚的看到說

324
00:16:02,620 --> 00:16:06,600
當我們發生就是說TCP連線一開始的最後

325
00:16:06,600 --> 00:16:09,399
slow start指數方式呢加速衝

326
00:16:10,399 --> 00:16:12,159
好那接下來就看到我們發生甚麼事

327
00:16:13,159 --> 00:16:16,320
如果發生了three duplicated我們就降ㄧ半

328
00:16:17,320 --> 00:16:20,559
然後linear 如果發生一個timeout

329
00:16:20,559 --> 00:16:23,779
我就降為ㄧ 然後用exponential在增加

330
00:16:23,779 --> 00:16:26,399
碰到原來的threshold就是原來的ㄧ半

331
00:16:26,399 --> 00:16:30,139
改成linear 那我們說這種線性增加的這一段

332
00:16:31,139 --> 00:16:33,759
這一段 像這一段我們說

333
00:16:33,759 --> 00:16:36,460
叫congestion avoidence phase

334
00:16:37,460 --> 00:16:41,220
代表說這個時候呢 比較算是溫和的逼近

335
00:16:42,220 --> 00:16:44,740
逼近那個網路的上限

336
00:16:44,740 --> 00:16:46,820
所以叫做congestion avoidence

337
00:16:46,820 --> 00:16:48,019
就是所謂的線性的這一塊

338
00:16:49,019 --> 00:16:52,620
那這個灰色的這一塊

339
00:16:52,620 --> 00:16:57,139
這一塊跟這一塊 那這個呢就是slow start phase

340
00:16:58,139 --> 00:17:00,320
就是說連線一開始的時候用slow start

341
00:17:01,320 --> 00:17:03,220
或者發生timeout

342
00:17:03,220 --> 00:17:06,200
發生timeout的時候整個降到ㄧ然後再來slow start

343
00:17:07,200 --> 00:17:10,619
所以這個圖呢就非常非常的清楚的

344
00:17:10,619 --> 00:17:14,480
告訴我們說 TCP的congestion control到底是

345
00:17:14,480 --> 00:17:15,279
怎麼運作的

346
00:17:15,279 --> 00:17:17,000
 Subtitles End: mo.dbxdb.com


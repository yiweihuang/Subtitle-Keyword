2
00:00:09,039 --> 00:00:11,560
好那接下來我們來介紹說這個

3
00:00:11,560 --> 00:00:14,039
所謂的timeout value的設計

4
00:00:14,039 --> 00:00:16,180
我們說知道因為TCP本身

5
00:00:16,180 --> 00:00:18,480
為了提供reliable transmission嘛

6
00:00:18,480 --> 00:00:21,180
所以每一個封包丟出去的時候

7
00:00:21,180 --> 00:00:22,580
都會設一個timer

8
00:00:22,580 --> 00:00:24,960
希望說再這個timer timeout之前

9
00:00:24,960 --> 00:00:26,960
能夠收到對方的acknowledgement

10
00:00:26,960 --> 00:00:29,520
就是每一個byte丟出去之後呢

11
00:00:29,520 --> 00:00:33,000
等於說我們都相對有一個timer在跑的意思

12
00:00:33,000 --> 00:00:35,860
那這個timer本設計呢就很重要

13
00:00:35,860 --> 00:00:38,020
第一個因為如果timer設的太短

14
00:00:39,020 --> 00:00:41,380
那我們封包跑到對方去

15
00:00:41,380 --> 00:00:42,400
因為還要繞回來嘛

16
00:00:42,400 --> 00:00:44,220
一個我們一般叫做round trip time

17
00:00:44,220 --> 00:00:45,640
來回的時間

18
00:00:45,640 --> 00:00:47,720
如果我們這個timer呢

19
00:00:47,720 --> 00:00:49,340
設得太小的話

20
00:00:49,340 --> 00:00:51,440
那有可能封包的這個acknowledgement

21
00:00:51,440 --> 00:00:53,340
還沒有回來呢我就timeout了

22
00:00:53,340 --> 00:00:55,880
那我們就會引發不必要的

23
00:00:55,880 --> 00:00:57,940
所謂的retransmission

24
00:00:57,940 --> 00:01:00,000
好那如果我們的timer設得太大

25
00:01:01,000 --> 00:01:04,239
代表說我這個封包呢either是

26
00:01:04,239 --> 00:01:06,060
封包真的掉了或是acknowledgement掉了

27
00:01:07,060 --> 00:01:08,900
不管哪一個那掉了之後我們就要

28
00:01:08,900 --> 00:01:11,860
等timeout嘛 那timeout設得太大

29
00:01:11,860 --> 00:01:14,340
就變城說萬一封包真的掉了的話

30
00:01:14,340 --> 00:01:17,700
我們要等太久的時間這個

31
00:01:17,700 --> 00:01:19,099
這個connection才知道

32
00:01:19,099 --> 00:01:20,640
才會做retransmission

33
00:01:20,640 --> 00:01:23,280
所以我們說這個timeout的值

34
00:01:23,280 --> 00:01:26,540
設得太小會產生不必要的重送

35
00:01:26,540 --> 00:01:30,040
那設得太大 會產生什麼問題

36
00:01:30,040 --> 00:01:33,019
就是封包或者ack真的掉了的時候呢

37
00:01:33,019 --> 00:01:35,500
要太久才能夠、才能夠發現

38
00:01:35,500 --> 00:01:36,140
因為靠timeout嘛

39
00:01:37,140 --> 00:01:38,300
所以我們說

40
00:01:38,300 --> 00:01:41,599
到底怎麼樣來設定這個timeout的值

41
00:01:41,599 --> 00:01:44,540
就是一個很重要的這個事情

42
00:01:44,540 --> 00:01:47,500
好我們說在TCP這個標準裡面

43
00:01:47,500 --> 00:01:49,860
它原來的演算法是這樣就是說

44
00:01:49,860 --> 00:01:52,220
針對每一個segment就是

45
00:01:52,220 --> 00:01:53,239
我們每一個封包丟出去嘛

46
00:01:54,239 --> 00:01:56,580
然後呢它會對應有一個ack回來

47
00:01:56,580 --> 00:01:58,580
我們就針對這樣的所謂的

48
00:01:58,580 --> 00:02:00,340
一個segment一個ack

49
00:02:00,340 --> 00:02:01,860
跟他一個來回的時間

50
00:02:01,860 --> 00:02:03,940
啊因為我們說這個來回的時間

51
00:02:03,940 --> 00:02:05,580
跟網路的狀態也有關

52
00:02:05,580 --> 00:02:07,019
比如說網路很流暢的時候

53
00:02:07,019 --> 00:02:08,840
可能來回呢就是很快

54
00:02:08,840 --> 00:02:10,160
但是如果網路本身

55
00:02:10,160 --> 00:02:12,440
這個說正在所謂的壅擠

56
00:02:12,440 --> 00:02:13,940
或者說我們這個封包呢

57
00:02:13,940 --> 00:02:15,139
被繞遠路啦

58
00:02:15,139 --> 00:02:18,800
那繞遠路之後可能你來回的時間就會變大

59
00:02:18,800 --> 00:02:21,539
所以這個來回的時間不是一個常數

60
00:02:21,539 --> 00:02:23,660
它會跟我們的網路的狀態有關

61
00:02:23,660 --> 00:02:26,520
可能有時候很快有時候就很慢

62
00:02:26,520 --> 00:02:28,819
因此呢我們要反映說

63
00:02:28,819 --> 00:02:30,020
這個timeout的時間

64
00:02:31,020 --> 00:02:34,360
可不可以有點我可不可以根據這個網路的狀態

65
00:02:34,360 --> 00:02:35,639
來調整這個timeout

66
00:02:35,639 --> 00:02:37,680
所以他的做法是這樣

67
00:02:37,680 --> 00:02:41,479
就是說首先我們針對每一個segment

68
00:02:41,479 --> 00:02:43,419
就是每一個封包跟每一個ack

69
00:02:43,419 --> 00:02:45,120
就是送一個封包等它的ack嘛

70
00:02:46,120 --> 00:02:48,020
我們去量它的一個RTT

71
00:02:49,020 --> 00:02:51,060
就針對每一對啦

72
00:02:51,060 --> 00:02:53,360
就是一個封包加上它的ack

73
00:02:53,360 --> 00:02:54,360
我們叫一個pair

74
00:02:54,360 --> 00:02:57,220
這一對我們就量它出去的時間

75
00:02:57,220 --> 00:02:58,580
跟回來的時間嘛

76
00:02:58,580 --> 00:03:00,020
啊這個我們叫做sample RTT

77
00:03:01,020 --> 00:03:02,120
相當於說我們是取樣

78
00:03:03,120 --> 00:03:04,580
取這樣的一個sample

79
00:03:04,580 --> 00:03:08,000
這樣說欸一個封包去呢跟他

80
00:03:08,000 --> 00:03:10,880
回來的這個時間我們叫sample RTT

81
00:03:10,880 --> 00:03:13,900
這個是每一次一個封包一回來

82
00:03:13,900 --> 00:03:15,400
我們就去算的意思

83
00:03:15,400 --> 00:03:17,620
就封包一回來我就去算說 對不起

84
00:03:17,620 --> 00:03:21,560
ack一回來 我們就去算那當時這個封包

85
00:03:21,560 --> 00:03:24,340
是甚麼時候送的啊現在ack什麼時候回來

86
00:03:24,340 --> 00:03:26,080
我就算它之間的時間差

87
00:03:26,080 --> 00:03:28,220
我們就知道說這一次呢

88
00:03:28,220 --> 00:03:30,180
它的sample的RTT是多少

89
00:03:30,180 --> 00:03:32,539
那這個sample RTT有點是

90
00:03:32,539 --> 00:03:36,300
反映現在網路的現況

91
00:03:36,300 --> 00:03:40,120
好那我們這個RTT呢我們的round trip time

92
00:03:40,120 --> 00:03:41,660
我們剛剛提它不是一個常數

93
00:03:41,660 --> 00:03:43,900
所以它會隨著、隨著網路的狀態呢

94
00:03:43,900 --> 00:03:45,259
可能會有大有小

95
00:03:45,259 --> 00:03:47,720
那我們就去算一個我們叫做weighted這種

96
00:03:47,720 --> 00:03:50,280
average of RTT等於說

97
00:03:50,280 --> 00:03:52,940
我們把這個過去一段時間

98
00:03:52,940 --> 00:03:55,479
所實際量測的RTT

99
00:03:55,479 --> 00:03:57,919
把它拿來做一個所謂的平均啦

100
00:03:57,919 --> 00:03:59,380
或者做一個所謂的weighted

101
00:03:59,380 --> 00:04:00,680
按照不同的比重

102
00:04:00,680 --> 00:04:02,360
也就是說我們要看看說

103
00:04:02,360 --> 00:04:05,099
那你最近這一次的你希望它佔多少份量

104
00:04:06,099 --> 00:04:07,840
所以我們的算法就是說

105
00:04:07,840 --> 00:04:10,520
Estimated的RTT我們就預估這個RTT呢

106
00:04:10,520 --> 00:04:12,660
就等於說過去的RTT

107
00:04:13,660 --> 00:04:18,579
乘上一個α然後加上呢你現在最後一次

108
00:04:18,579 --> 00:04:20,399
最後一次量測的

109
00:04:20,399 --> 00:04:22,680
那我們就1-α乘上去

110
00:04:22,680 --> 00:04:25,000
那我們說α呢通常是0.8

111
00:04:26,000 --> 00:04:29,860
到0.9我們就以0.9假設來看的話

112
00:04:29,860 --> 00:04:32,839
代表說好那你現在最後一次這個

113
00:04:32,839 --> 00:04:34,639
量測這個sample RTT嘛

114
00:04:34,639 --> 00:04:38,060
那1-α我們假設α是0.9的話

115
00:04:38,060 --> 00:04:41,540
那1-α就是0.1 就代表說

116
00:04:41,540 --> 00:04:42,800
你最近這一次呢

117
00:04:42,800 --> 00:04:47,240
我們把它的這個所謂的sample RTT的值

118
00:04:47,240 --> 00:04:51,019
等於說它的重量或者它的份量是10%

119
00:04:51,019 --> 00:04:55,480
那我過去量的呢是等於說是90%

120
00:04:55,480 --> 00:04:58,199
那如果你α是0.8就代表說

121
00:04:58,199 --> 00:04:59,100
那我過去的呢要占8成

122
00:05:00,100 --> 00:05:02,680
然後你最後一次量的呢就占兩成

123
00:05:02,680 --> 00:05:04,120
那我們這樣子把它有點做

124
00:05:04,120 --> 00:05:05,800
所謂的平均的意思啦

125
00:05:05,800 --> 00:05:08,180
平均 而且我們叫做weighted

126
00:05:08,180 --> 00:05:10,639
weighted就是說這個α的意思

127
00:05:10,639 --> 00:05:12,560
就是說我們把過去的累積值

128
00:05:12,560 --> 00:05:14,100
或過去的歷史平均值

129
00:05:15,100 --> 00:05:17,440
當成一個比較重的比重

130
00:05:17,440 --> 00:05:20,399
那最近一次量的呢 這個比重比較低

131
00:05:20,399 --> 00:05:22,459
啊我就這樣子來算

132
00:05:22,459 --> 00:05:25,160
那算完之後呢那因為我們說

133
00:05:25,160 --> 00:05:27,480
你即使算了這個RTT

134
00:05:27,480 --> 00:05:29,019
我們為了這個保險起見

135
00:05:29,019 --> 00:05:31,720
我們的timeout、timeout的這個值

136
00:05:31,720 --> 00:05:34,560
要設比這個RTT呢還大一點點

137
00:05:34,560 --> 00:05:37,240
還大因為妳即使設了這個RTT

138
00:05:37,240 --> 00:05:40,639
可能因為封包它可能 它可能在送的過程當中

139
00:05:40,639 --> 00:05:43,740
也有可能突然被稍微delay一下

140
00:05:43,740 --> 00:05:45,380
啊它就會超過了嘛

141
00:05:45,380 --> 00:05:46,880
所以為了保險起見

142
00:05:46,880 --> 00:05:49,839
在標準這個呃這個方法裡面呢

143
00:05:49,839 --> 00:05:52,380
我們就把這個timeout的時間

144
00:05:52,380 --> 00:05:56,819
注意到設成兩倍的estimated的RTT

145
00:05:56,819 --> 00:06:00,540
就是說RTT的算法是把過去的歷史

146
00:06:00,540 --> 00:06:02,480
然後加上最近的這一次

147
00:06:02,480 --> 00:06:04,319
然後按照這個所謂的weighted

148
00:06:04,319 --> 00:06:07,220
按照比重啦然後做一個這個平均值

149
00:06:07,220 --> 00:06:09,720
然後我們再把這個timeout呢

150
00:06:09,720 --> 00:06:13,839
設定成這個RTT算出來的RTT的兩倍

151
00:06:13,839 --> 00:06:17,360
這是在TCP的原始的演算法裡面是這麼做的

152
00:06:18,360 --> 00:06:20,720
好這麼做呢我們說

153
00:06:20,720 --> 00:06:23,000
它有一個 一個問題就是說

154
00:06:24,000 --> 00:06:25,660
這麼做法是很簡單

155
00:06:25,660 --> 00:06:27,279
但是它出現一個問題就是說

156
00:06:27,279 --> 00:06:29,360
當我們有一個segment呢

157
00:06:29,360 --> 00:06:30,339
它是retransmit

158
00:06:31,339 --> 00:06:32,800
我們剛剛提到因為我們在量

159
00:06:32,800 --> 00:06:34,120
那個sample RTT的時候是說

160
00:06:35,120 --> 00:06:38,040
針對每一個送出去的封包 跟它對應的ack

161
00:06:39,040 --> 00:06:40,040
我們量它的時間差嘛

162
00:06:41,040 --> 00:06:42,880
但現在出現一個問題就是說

163
00:06:42,880 --> 00:06:45,000
那我們TCP在送資料的時候

164
00:06:45,000 --> 00:06:47,860
可能會產生一個所謂的retransmission

165
00:06:47,860 --> 00:06:51,660
會重送 那針對這個重送的封包本身

166
00:06:51,660 --> 00:06:55,180
那我們假設重送一個封包 那等一下收到一個ack

167
00:06:56,180 --> 00:06:57,540
那問題就在於說

168
00:06:57,540 --> 00:07:01,500
當你發生重送的時候 而且收到一個ack

169
00:07:01,500 --> 00:07:04,339
那我們沒辦法判斷說這個ack呢

170
00:07:04,339 --> 00:07:08,000
到底是 這個ack是我們第一次原來的封包

171
00:07:09,000 --> 00:07:11,360
還是呢現在重送封包的ack

172
00:07:12,360 --> 00:07:14,279
也就是說我們重送之後

173
00:07:14,279 --> 00:07:16,779
可能會收到一個ack但是我們不知道說

174
00:07:16,779 --> 00:07:19,420
這個ack是原來的那個封包的ack

175
00:07:19,420 --> 00:07:21,819
還是你現在重送的這個封包的ack

176
00:07:21,819 --> 00:07:26,040
因為ack本身它也有可能在網路上面被delay

177
00:07:26,040 --> 00:07:27,040
那ack如果晚到或遲到

178
00:07:28,040 --> 00:07:30,899
我們就會發生這種判斷性的問題

179
00:07:30,899 --> 00:07:33,579
那什麼意思呢我們舉個例子來看

180
00:07:33,579 --> 00:07:36,040
比如說以我們左邊這個例子的話

181
00:07:38,040 --> 00:07:41,699
我們說第一個封包丟出去在這個地方

182
00:07:41,699 --> 00:07:45,339
好那封包呢也對方也收到

183
00:07:45,339 --> 00:07:47,000
不過呢 這個回來的ack不見了

184
00:07:48,000 --> 00:07:50,199
ack不見了所以我們就timeout

185
00:07:50,199 --> 00:07:51,639
然後我們就retransmit

186
00:07:51,639 --> 00:07:52,160
我們就重送嘛

187
00:07:53,160 --> 00:07:56,740
那重送呢我們這個重送之後就回了 回到一個ack

188
00:07:56,740 --> 00:07:58,380
我們就收到一個ack

189
00:07:58,380 --> 00:08:00,600
那我們從這一個圖就可以知道說

190
00:08:00,600 --> 00:08:04,540
這個ack呢其實它是retransmission的ack

191
00:08:04,540 --> 00:08:06,620
所以我們如果要上RTT的話

192
00:08:06,620 --> 00:08:08,620
應該是這個地方是比較準

193
00:08:08,620 --> 00:08:11,560
因為這個ack呢是retransmission

194
00:08:11,560 --> 00:08:15,839
就是第二次封包的ack 也就是說如果我們說

195
00:08:15,839 --> 00:08:19,440
如果我們說 我們這個ack想要去跟第一個

196
00:08:20,440 --> 00:08:23,079
跟第一個封包綁 跟它綁啦這樣子

197
00:08:23,079 --> 00:08:27,040
那我們這個其實是就會 就會算錯啦

198
00:08:27,040 --> 00:08:30,579
就是說我們如果說 我們的策略就是說

199
00:08:30,579 --> 00:08:32,120
我們現在問題就在於說

200
00:08:32,120 --> 00:08:33,960
當我們收到一個ack的時候呢

201
00:08:33,960 --> 00:08:35,240
我不知道這個ack是

202
00:08:35,240 --> 00:08:37,019
第一個封包還是第二個封包

203
00:08:37,019 --> 00:08:39,299
那我們說好吧那我們就比較簡單一點說

204
00:08:39,299 --> 00:08:41,080
這個ack呢就是第一個封包好了

205
00:08:41,080 --> 00:08:43,919
那我們就說那這個狀況發生的時候

206
00:08:43,919 --> 00:08:49,799
我們就說 這個ack其實應該是第二個封包

207
00:08:49,799 --> 00:08:51,840
所以我們如果把它算成第一個封包的話

208
00:08:51,840 --> 00:08:53,259
我們會量到sample RTT這麼大

209
00:08:54,259 --> 00:08:56,980
就有點 我們就有點量錯的意思啦

210
00:08:56,980 --> 00:08:59,059
那我們說好吧那如果

211
00:08:59,059 --> 00:09:01,120
我們發生retransmission的時候呢

212
00:09:01,120 --> 00:09:03,419
我們說那個ack呢就算第二個

213
00:09:04,419 --> 00:09:06,240
就算第二個我們就來看

214
00:09:06,240 --> 00:09:08,960
那算第二個呢就變成像右邊這個

215
00:09:08,960 --> 00:09:10,240
這個例子也就是說

216
00:09:10,240 --> 00:09:15,480
啊我們第一個封包丟出去 那它的ack注意到

217
00:09:15,480 --> 00:09:17,740
這個ack只是delay ack沒有掉

218
00:09:17,740 --> 00:09:20,320
只是在網路上面呢被耽擱

219
00:09:20,320 --> 00:09:22,659
好然後我們當然就引發timeout嘛

220
00:09:22,659 --> 00:09:26,779
然後就有retransmit 那這個一retransmit之後呢

221
00:09:26,779 --> 00:09:30,179
這個ack就回來 所以也就是如果我們

222
00:09:30,179 --> 00:09:33,399
我們決定說把一個ack呢去

223
00:09:33,399 --> 00:09:36,440
跟他的重送的這個封包綁一起的話

224
00:09:36,440 --> 00:09:38,620
那我們的sample RTT呢就會這樣子

225
00:09:38,620 --> 00:09:42,440
就這麼短因為你看 我們如果看client這邊

226
00:09:42,440 --> 00:09:44,659
它一retransmit就有一個ack回來

227
00:09:44,659 --> 00:09:48,259
所以他會認為說欸這個 現在網路非常好

228
00:09:48,259 --> 00:09:50,179
我一重送呢ack就回來

229
00:09:50,179 --> 00:09:52,840
但是我們事實上看這個圖我們也知道說

230
00:09:52,840 --> 00:09:55,139
其實這個ack呢並不是

231
00:09:56,139 --> 00:09:57,500
retransmission的它的ack

232
00:09:57,500 --> 00:09:59,980
而這個ack事實上是第一個封包的ack嘛

233
00:09:59,980 --> 00:10:02,360
是它的ack啊所以這個時候

234
00:10:02,360 --> 00:10:05,340
正常的sample RTT以正確的應該是這樣子

235
00:10:05,340 --> 00:10:08,299
可是我們如果說我們把這個ack去綑綁

236
00:10:09,299 --> 00:10:10,580
retransmission的話

237
00:10:10,580 --> 00:10:13,159
我們的sample RTT就會算成這樣子

238
00:10:13,159 --> 00:10:14,740
也就是這兩個case呢 也就是說

239
00:10:14,740 --> 00:10:17,880
不管我們把這個ack呢

240
00:10:17,880 --> 00:10:21,120
把它跟第一個原來的封包綁在一起

241
00:10:22,120 --> 00:10:24,659
或者說我們把跟第二個封包

242
00:10:24,659 --> 00:10:26,919
綁在一起我們都有一個狀況

243
00:10:26,919 --> 00:10:28,799
會讓他算錯的意思

244
00:10:28,799 --> 00:10:31,860
像左邊這個case就是說 如果我們把ack呢

245
00:10:31,860 --> 00:10:35,700
都把它認定為是原來的第一個封包

246
00:10:35,700 --> 00:10:37,240
就是我們會算出這樣的

247
00:10:37,240 --> 00:10:39,100
sample RTT 那如果我們說

248
00:10:40,100 --> 00:10:42,899
這個ack呢就把它跟retransmission呢

249
00:10:42,899 --> 00:10:46,139
把它綁在一起 那我們會有算出這樣的

250
00:10:46,139 --> 00:10:50,539
sample RTT那可是呢在這兩個例子裡面

251
00:10:50,539 --> 00:10:52,340
這個算法都錯因為

252
00:10:52,340 --> 00:10:55,519
以左邊來講的話真的RTT是這一個

253
00:10:55,519 --> 00:10:58,539
以右邊來講的話正確的RTT是這一個

254
00:10:58,539 --> 00:11:01,779
也就是說我們 在

255
00:11:01,779 --> 00:11:03,860
有發生retransmission的時候呢

256
00:11:03,860 --> 00:11:06,380
如果收到一個ack我們實在是

257
00:11:06,380 --> 00:11:08,700
沒有辦法知道說這個ack到底是

258
00:11:08,700 --> 00:11:13,419
原來的封包的ack 還是呢 重送的封包的ack

259
00:11:13,419 --> 00:11:15,240
就是會讓我們產生這樣的問題啦

260
00:11:16,240 --> 00:11:19,279
好所以呢就有人提出一個方法

261
00:11:19,279 --> 00:11:22,000
這個就是所謂的Karn跟所謂的Patridge

262
00:11:22,000 --> 00:11:23,940
他們所提出的演算法

263
00:11:23,940 --> 00:11:26,919
它的演算法就是觀察到剛剛講那樣的問題

264
00:11:26,919 --> 00:11:28,940
所以他就說好如果我們

265
00:11:28,940 --> 00:11:30,899
做retransmission的時候呢

266
00:11:30,899 --> 00:11:33,320
我們就不要sample 因為

267
00:11:33,320 --> 00:11:35,779
一旦做retransmission像剛剛這個例子

268
00:11:35,779 --> 00:11:38,799
你因為retransmission收到一個ack

269
00:11:38,799 --> 00:11:41,880
啊這個ack不管你是說它是屬於原來的封包

270
00:11:41,880 --> 00:11:43,620
還是屬於重送的封包

271
00:11:43,620 --> 00:11:46,820
都有一個狀況會讓它發生錯誤嘛

272
00:11:46,820 --> 00:11:49,860
那倒不如說 好如果我們有真的有

273
00:11:49,860 --> 00:11:52,559
發生這個retransmission的時候呢

274
00:11:52,559 --> 00:11:54,899
我們就不要做這個sample RTT

275
00:11:54,899 --> 00:11:56,440
就這一次retransmission

276
00:11:56,440 --> 00:11:58,679
這一次我就不算 避免說我

277
00:11:58,679 --> 00:12:02,580
算錯的意思啦 還有就是說那我每一次

278
00:12:02,580 --> 00:12:04,200
做retransmission之後呢

279
00:12:05,200 --> 00:12:07,480
每次做retransmission之後呢我就把

280
00:12:07,480 --> 00:12:11,940
我的timeout呢再把它double一次的意思

281
00:12:11,940 --> 00:12:14,919
double timeout 就每一次做retransmission

282
00:12:14,919 --> 00:12:17,220
代表說你為什麼會做retransmission

283
00:12:17,220 --> 00:12:20,000
就代表說欸有可能你發生timeout嘛

284
00:12:20,000 --> 00:12:22,419
那你發生timeout 為什麼發生timeout

285
00:12:22,419 --> 00:12:24,139
因為你的封包在網路裡面呢

286
00:12:24,139 --> 00:12:26,639
可能掉了那為什麼會掉

287
00:12:26,639 --> 00:12:30,419
因為網路可能阻塞 好那既然網路可能阻塞

288
00:12:30,419 --> 00:12:32,799
那我就把這個timeout再放長一點

289
00:12:32,799 --> 00:12:34,779
這樣的話可以容忍

290
00:12:34,779 --> 00:12:37,179
這個網路這個封包在網路上面呢

291
00:12:37,179 --> 00:12:40,139
可能可以因為阻塞嘛可能會被

292
00:12:40,139 --> 00:12:44,139
待久一點我就把這個timeout加倍的意思啦

293
00:12:44,139 --> 00:12:46,179
所以他這個方法也很簡單

294
00:12:46,179 --> 00:12:48,100
就這兩點一個就是說如果

295
00:12:48,100 --> 00:12:51,820
我們做了retransmission的話 我就不要做sample

296
00:12:51,820 --> 00:12:54,539
或者是說我做retransmission的時候呢

297
00:12:54,539 --> 00:12:56,399
我把timeout呢再加倍

298
00:12:56,399 --> 00:12:58,980
把那個timeout的時間再加長的意思

299
00:12:58,980 --> 00:13:00,559
那這個方法呢本身呢

300
00:13:00,559 --> 00:13:03,620
對原來的這個方法當然有一些改善

301
00:13:03,620 --> 00:13:05,320
但是呢它還是沒有辦法來

302
00:13:06,320 --> 00:13:08,659
整個消除這個congestion啦

303
00:13:08,659 --> 00:13:11,720
那我們要消除這個網路的congestion呢

304
00:13:11,720 --> 00:13:13,340
我們當然要先知道說

305
00:13:13,340 --> 00:13:17,559
這個timeout的值 的設計呢

306
00:13:17,559 --> 00:13:19,940
到底跟這個congestion有什麼關連

307
00:13:19,940 --> 00:13:20,019
關係到底是什麼

308
00:13:21,019 --> 00:13:23,200
那我們比較初步的了解是說

309
00:13:23,200 --> 00:13:27,299
如果我們timeout呢設得太短 我們剛剛提到

310
00:13:27,299 --> 00:13:29,380
timeout的時間設得太小

311
00:13:29,380 --> 00:13:32,500
那就有可能說這個你的

312
00:13:32,500 --> 00:13:34,799
這個acknowledgement其實還沒有到

313
00:13:34,799 --> 00:13:37,240
可能在網路上面稍微耽擱了一下

314
00:13:37,240 --> 00:13:39,299
那你就timeout了嘛 因為你timeout值設得太小

315
00:13:40,299 --> 00:13:44,240
那 這種timeout呢就會引發retransmission

316
00:13:44,240 --> 00:13:47,659
那這種retransmission我們講是沒有必要的因為

317
00:13:47,659 --> 00:13:50,380
你的這個ack呢才剛剛快要到

318
00:13:50,380 --> 00:13:52,720
你就timeout啦 然後你就會retransmission

319
00:13:52,720 --> 00:13:57,399
這個就有點說 其實timeout的值如果設得太小

320
00:13:57,399 --> 00:14:01,460
那會產生一些不必要的retransmission

321
00:14:01,460 --> 00:14:03,740
那這些不必要的retransmission會造成什麼

322
00:14:03,740 --> 00:14:05,659
那反而造成網路更壅擠

323
00:14:05,659 --> 00:14:08,440
因為retransmission也是把封包

324
00:14:08,440 --> 00:14:10,500
注入到這個網路裡面去嘛

325
00:14:10,500 --> 00:14:12,620
那如果說我們timer設得太小

326
00:14:12,620 --> 00:14:16,080
那我就常常在注入封包注入封包注入封包

327
00:14:16,080 --> 00:14:17,000
因為一直在timeout的話

328
00:14:18,000 --> 00:14:22,559
常常timeout就常常要重送 那你大量的重送

329
00:14:22,559 --> 00:14:27,820
你幾乎是等於說在送double或者triple的量

330
00:14:27,820 --> 00:14:30,580
送到網路上面去其實 反而是造成

331
00:14:30,580 --> 00:14:32,940
網路阻塞的這個原因之一啦

332
00:14:32,940 --> 00:14:37,720
好所以呢這個最主要的問題就是說

333
00:14:37,720 --> 00:14:41,080
因為呢我們在設計這個timeout的value的時候呢

334
00:14:41,080 --> 00:14:43,880
沒有考慮到 我們這個sample RTT

335
00:14:43,880 --> 00:14:45,960
我們剛剛提到這個來回的時間呢

336
00:14:45,960 --> 00:14:48,919
它是每一次可能都不太一樣的

337
00:14:48,919 --> 00:14:53,159
所以我們希望說 真的好的設計呢是希望說

338
00:14:53,159 --> 00:14:56,399
我們這個RTT本身要考慮到我們叫做

339
00:14:56,399 --> 00:14:58,120
variance of sample RTT就是

340
00:14:59,120 --> 00:15:02,659
每一次做這個來回的這個RTT的取樣的時候

341
00:15:02,659 --> 00:15:05,279
他每次都不一樣 那不一樣我們要

342
00:15:05,279 --> 00:15:07,799
算它的variance 等於說算他的這個

343
00:15:07,799 --> 00:15:10,179
它的差異值啦或者變異度

344
00:15:10,179 --> 00:15:14,639
把這個它的variance呢 是大是小如果variance很大

345
00:15:14,639 --> 00:15:17,840
就代表說這個時候 網路其實變化很大

346
00:15:17,840 --> 00:15:21,039
如果variance很小就代表他很穩定的意思

347
00:15:21,039 --> 00:15:23,460
代表它的RTT每次取樣的時候呢

348
00:15:23,460 --> 00:15:26,740
差異值很小 代表網路相對是穩定的

349
00:15:26,740 --> 00:15:30,679
那差異值很大 就代表說相對是不穩定的

350
00:15:30,679 --> 00:15:34,620
那我們說 如果是針對比較小的variance

351
00:15:34,620 --> 00:15:36,940
如果因為variance很小啊

352
00:15:36,940 --> 00:15:39,159
所以我用這個estimated的RTT呢

353
00:15:39,159 --> 00:15:40,139
應該就可以了啦

354
00:15:41,139 --> 00:15:45,360
好然後呢但是如果說variance很大

355
00:15:45,360 --> 00:15:46,700
variance很大的時候呢

356
00:15:46,700 --> 00:15:49,919
我們就不可以 把這個eatimated RTT呢

357
00:15:49,919 --> 00:15:52,600
綁得太緊 就是說因為variance很大

358
00:15:52,600 --> 00:15:54,440
代表說這個時候網路不太穩定

359
00:15:54,440 --> 00:15:56,399
然後我們應該要考慮variance

360
00:15:56,399 --> 00:15:58,860
把variance這個參數呢也考慮進來

361
00:15:58,860 --> 00:16:00,539
就是variance很小的時候呢

362
00:16:00,539 --> 00:16:02,899
我們用這個estimated RTT呢

363
00:16:02,899 --> 00:16:06,559
應該就可以事實上我也不用乘上兩倍的意思啦

364
00:16:06,559 --> 00:16:09,179
我們那個有一個乘兩倍的概念嘛

365
00:16:09,179 --> 00:16:12,820
但如果說我如果現在這個 變化很小代表很穩定

366
00:16:12,820 --> 00:16:15,279
很穩定我就也不要乘兩倍啊

367
00:16:15,279 --> 00:16:17,659
免得浪費這個timeout的時間

368
00:16:17,659 --> 00:16:19,820
好那如果說這個variance很大

369
00:16:19,820 --> 00:16:22,120
變化很大的時候那你靠這個

370
00:16:22,120 --> 00:16:24,019
estimated的RTT呢也不太準

371
00:16:24,019 --> 00:16:26,340
因為變化很大所以我們希望把

372
00:16:26,340 --> 00:16:28,059
variance能夠把它納進來

373
00:16:28,059 --> 00:16:31,120
好那因此呢就有另外的學者

374
00:16:31,120 --> 00:16:34,659
像Jacobson他們就提出一個方法

375
00:16:34,659 --> 00:16:37,840
他們方法就是說 好那我就去量這個variance

376
00:16:37,840 --> 00:16:41,360
所以他怎麼做呢 他的做法是這樣首先

377
00:16:41,360 --> 00:16:45,740
他把最後一次我們叫 sample RTT嘛

378
00:16:45,740 --> 00:16:49,940
跟我過去呢 所量測這個estimated RTT

379
00:16:49,940 --> 00:16:52,840
過去的平均值啦做一個

380
00:16:52,840 --> 00:16:55,899
這個減法 找到它的所謂的差異

381
00:16:55,899 --> 00:16:58,820
就difference那重點就在於說

382
00:16:58,820 --> 00:17:01,500
我們這個estimated的RTT呢

383
00:17:01,500 --> 00:17:03,440
我們就把這個difference乘上一個δ

384
00:17:04,440 --> 00:17:07,319
乘上一個這個加上這是原來的這個

385
00:17:08,319 --> 00:17:10,660
estimated的RTT是原來的值

386
00:17:10,660 --> 00:17:14,259
然後在加上一個這個δ乘上這個difference

387
00:17:14,259 --> 00:17:17,599
這個difference可能是正的可能是負的

388
00:17:17,599 --> 00:17:22,160
例如說我這個RTT嘛 那我現在量到的跟過去的

389
00:17:22,160 --> 00:17:24,559
可能比過去的大可能比過去的小

390
00:17:24,559 --> 00:17:28,720
所以這個difference本身 可能是正的可能是負的

391
00:17:28,720 --> 00:17:31,619
所以我們這個一乘上這個δ

392
00:17:31,619 --> 00:17:36,319
當然這個數 還是可能是正的可能是負的啦

393
00:17:36,319 --> 00:17:38,380
所以這個estimated RTT呢

394
00:17:38,380 --> 00:17:41,839
當然就是可能會比原來的多或比原來的小

395
00:17:42,839 --> 00:17:44,000
那另外就是所謂的deviation

396
00:17:45,000 --> 00:17:49,480
這個deviation本身呢一樣 我們也是把原來的deviation

397
00:17:49,480 --> 00:17:53,799
加上δ 乘上這個difference的絕對值

398
00:17:53,799 --> 00:17:55,440
減掉這個deviation

399
00:17:56,440 --> 00:17:59,420
這個就是這個值就是算他的這個deviation

400
00:17:59,420 --> 00:18:02,579
那我們說 我們就把這個timeout呢

401
00:18:02,579 --> 00:18:05,079
就這樣子來算就變成說 有一個μ

402
00:18:06,079 --> 00:18:09,259
乘上這個estimate的RTT然後加上Ø

403
00:18:09,259 --> 00:18:12,220
乘上deviation那在這個真正的

404
00:18:12,220 --> 00:18:15,519
這個實作裡面這個μ是1啦

405
00:18:15,519 --> 00:18:17,440
然後Ø是用4

406
00:18:17,440 --> 00:18:20,400
也就是說 如果呢我們說

407
00:18:20,400 --> 00:18:24,220
如果如果這個variance變化很小

408
00:18:25,220 --> 00:18:27,299
變化很小的時候呢

409
00:18:27,299 --> 00:18:29,980
這個會dominate就相當於

410
00:18:29,980 --> 00:18:31,039
我就是用原來的estimate

411
00:18:32,039 --> 00:18:34,220
那如果說我這個deviation很大

412
00:18:34,220 --> 00:18:36,279
就是變化很大的時候呢

413
00:18:36,279 --> 00:18:38,599
因為我們這邊乘上4倍嘛

414
00:18:38,599 --> 00:18:41,680
當我很大的時候我是把它乘上4倍啊

415
00:18:41,680 --> 00:18:43,579
所以反而這個是dominate

416
00:18:43,579 --> 00:18:46,400
所以這個就跟我們剛剛前面講的就是說

417
00:18:46,400 --> 00:18:49,440
如果呢我們這個sample RTT呢

418
00:18:49,440 --> 00:18:52,279
它的variance是比較小的話

419
00:18:52,279 --> 00:18:53,059
就small variance的話呢

420
00:18:54,059 --> 00:18:56,180
我們就用estimated的RTT呢

421
00:18:56,180 --> 00:19:00,859
來做就可以 就小的時候呢就用estimate

422
00:19:00,859 --> 00:19:02,059
那如果變化很大的時候呢

423
00:19:03,059 --> 00:19:05,619
我們就不可以跟estimate綁得太緊

424
00:19:05,619 --> 00:19:08,259
應該用所謂的deviation

425
00:19:08,259 --> 00:19:10,920
所以最後呢就修正了說我們在

426
00:19:10,920 --> 00:19:13,279
算timeout的時候 就用這個公式來算

427
00:19:14,279 --> 00:19:16,740
就最後這個公式來算就可以了

428
00:19:16,740 --> 00:19:18,240
那我們用這個公式來算

429
00:19:20,240 --> 00:19:22,039
那我們就可以反應出

430
00:19:22,039 --> 00:19:25,279
如果說現在這個RTT呢非常穩定

431
00:19:25,279 --> 00:19:27,980
就是前面這一項 那如果說呢

432
00:19:27,980 --> 00:19:29,880
這個時候RTT呢非常不穩定

433
00:19:29,880 --> 00:19:32,119
就是變化很大的時候呢 就是後面這一項

434
00:19:33,119 --> 00:19:34,000
這一項呢來dominate

435
00:19:35,000 --> 00:19:38,259
這樣的話就可以讓這個timeout的value

436
00:19:38,259 --> 00:19:42,019
能夠依據這個網路壅擠的狀態

437
00:19:42,019 --> 00:19:45,299
做一個所謂的 適度的調整

438
00:19:45,299 --> 00:19:47,000
 Subtitles End: mo.dbxdb.com


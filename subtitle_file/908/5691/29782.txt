2
00:00:09,380 --> 00:00:14,110
那接下來呢我們就來介紹所謂的reliable byte stream protocol

3
00:00:14,110 --> 00:00:19,410
就是所謂的ＴＣＰ 變成說ＴＣＰ本身他要提供的是可靠的服務

4
00:00:19,410 --> 00:00:21,310
那我們來看一下 我們說

5
00:00:21,310 --> 00:00:25,510
相對於ＵＤＰ是一個不可靠的服務

6
00:00:25,510 --> 00:00:30,079
那ＴＣＰ叫做Transmission Control Protocol

7
00:00:30,079 --> 00:00:35,380
ＴＣＰ本身他要提供是可靠的服務 主要的特性

8
00:00:35,380 --> 00:00:42,550
第一個 他是reliable 也就是說我們交給ＴＣＰ的資料

9
00:00:42,550 --> 00:00:49,280
他會很可靠的把它送到對方去 交給他的對應的application

10
00:00:49,280 --> 00:00:54,650
也就是說傳送的application交什麼內容給ＴＣＰ

11
00:00:54,650 --> 00:01:01,450
然後ＴＣＰ就會負責把這個內容原封不動的把他送給所謂的

12
00:01:01,450 --> 00:01:05,750
另外一端的application 我們的傳輸是application對application

13
00:01:05,750 --> 00:01:10,410
兩端最上面都是application 相同的application

14
00:01:10,410 --> 00:01:16,780
下面在ＴＣＰ之上 也就是說左邊交給ＴＣＰ的內容

15
00:01:16,780 --> 00:01:17,910
交了什麼內容

16
00:01:17,910 --> 00:01:22,510
等一下右邊ＴＣＰ就要送給上面這個application什麼內容

17
00:01:22,510 --> 00:01:26,910
就是非常可靠 可靠就在於說第一個他必須克服剛剛提到

18
00:01:26,910 --> 00:01:30,849
封包可能會掉 封包可能會順序不對

19
00:01:30,849 --> 00:01:35,580
封包可能會在網路上面delay很久等等

20
00:01:35,580 --> 00:01:43,049
所有的狀況通通要把它克服掉 使得說我提供一個很可靠的服務

21
00:01:43,049 --> 00:01:45,880
這是第一點 那第二點就是說

22
00:01:45,880 --> 00:01:49,610
ＴＣＰ本身我們叫做Connection oriented

23
00:01:49,610 --> 00:01:56,150
就是說ＴＣＰ在使用的時後 必須先建連線 先建連線

24
00:01:56,150 --> 00:01:58,880
那相對於ＵＤＰ他是不用建連線

25
00:01:58,880 --> 00:02:03,750
ＵＤＰ本身如果你想要一個application丟給一個application

26
00:02:03,750 --> 00:02:09,250
你只要把封包準備好 直接丟給ＵＤＰ就可以了 就是他不建連線

27
00:02:09,250 --> 00:02:16,680
那可是兩個ＴＣＰ他們在通訊之前他必須先建連線 連線怎麼建

28
00:02:16,680 --> 00:02:22,380
後面會再做解釋 就是說他是一個連線導向的protocol

29
00:02:22,380 --> 00:02:27,780
就是通訊之前一定要先建連線 那另外他傳輸呢

30
00:02:27,780 --> 00:02:33,780
特性叫做Byte-stream service Byte-stream的概念就是說

31
00:02:33,780 --> 00:02:41,009
對於TCP來講 他所傳送的資料是以一個byte一個byte為一個單位

32
00:02:41,009 --> 00:02:45,479
就是說我們這個application 上層這個application

33
00:02:45,479 --> 00:02:50,580
他丟給ＴＣＰ的時候 可能可以一次丟譬如說若干個byte

34
00:02:50,580 --> 00:02:55,710
譬如說一次丟一百個byte 一百個然後再一百個再兩百個

35
00:02:55,710 --> 00:03:02,349
就是說丟下去的時候 可以分段 資料量分段的丟下去

36
00:03:02,349 --> 00:03:07,949
我們注意到 可是送到對方的時候 他上來的時候

37
00:03:07,949 --> 00:03:12,650
就是下去跟上來 這個每次上來的這個

38
00:03:12,650 --> 00:03:18,250
譬如說byte的數量跟下去的數量是可以不一樣

39
00:03:18,250 --> 00:03:20,780
就是說這邊譬如ㄧ百一百一百

40
00:03:20,780 --> 00:03:25,680
可是我上去的時候可能是五十五十五十 但是差在哪裡

41
00:03:25,680 --> 00:03:31,979
差在於說我的byte這個順序是對的 我們是byte stream

42
00:03:31,979 --> 00:03:34,610
就把它想像成說是一個串流

43
00:03:34,610 --> 00:03:38,349
串流裡面就是一個byte一個byte一個byte這樣子送

44
00:03:38,349 --> 00:03:45,349
我只要是那個第一個byte的總量要對 第二個他的順序要對

45
00:03:45,349 --> 00:03:51,250
至於說我一次送幾個byte跟一次拿幾個byte

46
00:03:51,250 --> 00:03:55,280
譬如說送一百個byte不一定要拿一百個byte

47
00:03:55,280 --> 00:03:59,610
就是他這個量是沒有一定嚴格的關係

48
00:03:59,610 --> 00:04:04,050
就我可能送一百個byte一百個byte一百個byte 總共送三百

49
00:04:04,050 --> 00:04:11,380
但對方再拿的時候可以五十五十五十五十五十五十 我一樣分六次拿

50
00:04:11,380 --> 00:04:16,750
分三次送分六次拿 都是沒有關係的 我們只要說

51
00:04:16,750 --> 00:04:21,209
反正送了三次一百總共三百個byte

52
00:04:21,209 --> 00:04:26,050
那我最後這邊拿出去只要是三百個byte 就是說量要對

53
00:04:26,050 --> 00:04:32,550
順序要對 那就對了 至於說分幾次送還有分幾次拿

54
00:04:32,550 --> 00:04:38,110
是沒有關係。那相對於說如果在網路上面呢 我們這個三百個byte

55
00:04:38,110 --> 00:04:43,709
如果我在網路上面可能分成兩個封包 或者分成三個封包來送

56
00:04:43,709 --> 00:04:52,110
在網路上面把這個資料量到底分幾個封包來送 也是沒有關係

57
00:04:52,110 --> 00:04:56,209
我們的目的就是說 反正我就是這麼多的量 這麼多個byte

58
00:04:56,209 --> 00:05:01,709
我只要對方收到他的量跟順序都是對的那就好了

59
00:05:01,709 --> 00:05:07,649
至於說我分幾次送 我分幾次拿 或者在網路裡面

60
00:05:07,649 --> 00:05:13,009
我分幾個封包都沒有關係 幾個封包都沒有關係

61
00:05:13,009 --> 00:05:18,110
所以他跟封包的數量是沒有關係 所以我們叫做byte stream

62
00:05:18,110 --> 00:05:23,850
我就把它看成是一個 一連串的byte的傳遞

63
00:05:23,850 --> 00:05:26,680
他提供的是這樣的一個service 很特別

64
00:05:26,680 --> 00:05:30,949
那我們說因為他要建連線 那連線建起來的時候

65
00:05:30,949 --> 00:05:35,509
我們就把資料量送給對方 那在送給對方的時候

66
00:05:35,509 --> 00:05:41,850
ＴＣＰ本身他還有兩個地方是他要去面臨 要去處置的

67
00:05:41,850 --> 00:05:47,149
第一個我們叫做flow control 什麼叫做flow control？

68
00:05:47,149 --> 00:05:52,980
因為我們說他要建連線 所以建連線的時候就有一個是sender

69
00:05:52,980 --> 00:05:56,810
一個是receiver 就一邊是要傳送的 一邊要接收的

70
00:05:56,810 --> 00:06:04,709
那我們剛剛也提到這個接收的這端 他到底可以讓sender送多快

71
00:06:04,709 --> 00:06:12,149
是receiver來決定的 就receiver他其實雖然有連線建起來可是呢

72
00:06:12,149 --> 00:06:18,910
這個receiver它具有傳送的節奏主導權 這個節奏 就他的tempo

73
00:06:18,910 --> 00:06:22,709
就是說他要避免這個sender送太快

74
00:06:22,709 --> 00:06:26,009
因為sender如果送太快送太多

75
00:06:26,009 --> 00:06:31,180
那有可能把他的這個所謂的buffer把它塞爆掉

76
00:06:32,180 --> 00:06:37,009
因為我們說任何computer他上面可能會有很多application

77
00:06:37,009 --> 00:06:41,180
包括說我們現在正在傳輸的 一個connection建起來

78
00:06:41,180 --> 00:06:47,009
然後我現在正在透過ＴＣＰ正在收資料 那你資料收進來

79
00:06:47,009 --> 00:06:50,149
那你丟給application 我們剛剛講丟給application

80
00:06:50,149 --> 00:06:53,779
那application也沒有辦法就立刻處理這個資料

81
00:06:53,779 --> 00:06:58,550
因為我上面跑了很多應用軟體 每一個應用軟體什麼時候執行

82
00:06:58,550 --> 00:07:04,149
那是ＯＳ幫我排程 所以資料即使收到了 丟給application

83
00:07:04,149 --> 00:07:07,610
放在那個queue application也不見得可以馬上處理

84
00:07:07,610 --> 00:07:10,680
或者說application他不會馬上來拿

85
00:07:10,680 --> 00:07:14,079
就是說資料收到我先存在一個buffer

86
00:07:14,079 --> 00:07:16,579
這個buffer我讓他交給application

87
00:07:16,579 --> 00:07:21,050
可是這個application可能正在忙別的事情

88
00:07:21,050 --> 00:07:26,509
所以他也不見得會立刻把這個收到的資料拿去處理

89
00:07:26,509 --> 00:07:32,410
那你的buffer就一下子就滿了 所以你就告訴sender說你現在要送慢一點

90
00:07:32,410 --> 00:07:35,480
就是說flow control談的就是說

91
00:07:35,480 --> 00:07:45,449
receiver他要有一個機制來控制從sender過來的流量 包含流量

92
00:07:45,449 --> 00:07:49,380
量就是他的大小 甚至說他的速度等等

93
00:07:49,380 --> 00:07:56,209
不要讓這個receiver因為沒辦法接受 讓這個資料變成over flow

94
00:07:56,209 --> 00:08:01,949
這叫做flow control 就是receiver控制sender的傳送的節奏

95
00:08:01,949 --> 00:08:07,009
那另外還有一個更重要的問題在於說 叫做Congestion control

96
00:08:07,009 --> 00:08:12,279
就是說這個ＴＣＰ他要面臨兩個很重要的問題

97
00:08:12,279 --> 00:08:14,810
一個叫做flow control 我們雖然建連線

98
00:08:14,810 --> 00:08:22,649
我送的資料量靠這個receiver控管 不能送太多也不能送太大

99
00:08:22,649 --> 00:08:28,579
除了receiver之外 我們要考慮整個internet

100
00:08:28,579 --> 00:08:32,649
我們說整個internet上面同時會有幾個連線

101
00:08:32,649 --> 00:08:36,509
我們可以簡單的想一想 假設你這台電腦

102
00:08:36,509 --> 00:08:41,779
今天假設你run了一個譬如說你去看一個瀏覽器 上一個網站

103
00:08:41,779 --> 00:08:45,809
可能你建一個ＴＣＰ連線 如果你run一個P2P

104
00:08:45,809 --> 00:08:49,909
譬如說我要做所謂的檔案分享 BT啊Bit Torrent啊等等

105
00:08:49,909 --> 00:08:54,179
那你可能建一百個連線 因為你同時通訊的對象一百個

106
00:08:54,179 --> 00:08:59,179
你一個電腦就一百個連線 我們說全世界有幾十億個電腦

107
00:08:59,179 --> 00:09:04,110
所以internet上面同時出現連線的數量 可能是幾百億

108
00:09:04,110 --> 00:09:10,380
那麼大的連線大家都把封包丟進去 internet本身就會阻塞

109
00:09:10,380 --> 00:09:16,309
所以Congestion control就是說 這個ＴＣＰ雖然跟對方建了連線

110
00:09:16,309 --> 00:09:22,110
但是他如果丟的太快 不只是說receiver可能受不了

111
00:09:22,110 --> 00:09:26,649
internet可能受不了。所以我們如果把封包丟的太快

112
00:09:26,649 --> 00:09:30,149
丟到這個網路上面去 可能在網路的某個地方

113
00:09:30,149 --> 00:09:36,980
因為我們講封包一旦丟給internet 事實上就是交給router 那router本身自己會去繞

114
00:09:36,980 --> 00:09:41,210
可是因為如果大家都把封包全部丟到internet裡面去

115
00:09:41,210 --> 00:09:46,279
同時丟非常非常大的量進internet 那裡面就塞住了

116
00:09:46,279 --> 00:09:52,350
那塞住就開始掉封包 所以ＴＣＰ本身他有一個Congestion control的機制

117
00:09:52,350 --> 00:09:59,380
當他把封包丟進去的時後 他盡量不要讓internet也塞住

118
00:09:59,380 --> 00:10:13,049
所以Congestion control就在於說 他要避免too much data 盡量不要送太多的封包進入這個網路

119
00:10:13,049 --> 00:10:19,380
使得網路變成所謂的overloaded 就是網路本身阻塞

120
00:10:19,380 --> 00:10:26,950
就是說ＴＣＰ本身必須跟他的receiver 必須跟他的receiver維持flow control

121
00:10:26,950 --> 00:10:34,549
同時他要對網路做所謂的 Congestion control 所以這兩個control是同時存在

122
00:10:34,549 --> 00:10:40,250
同時必須解的問題。他不能送太快讓receiver爆掉

123
00:10:40,250 --> 00:10:49,779
他也不能送太多讓這個網路把它塞住 那我們說這個flow control比較容易做

124
00:10:49,779 --> 00:10:55,309
是因為說他到底能夠送多少是receiver告訴他

125
00:10:55,309 --> 00:11:01,110
是receiver告訴sender 所以他可以送多少量是非常非常清楚的

126
00:11:01,110 --> 00:11:06,049
因為receiver會告訴sender說 你這個時候可以送多少量

127
00:11:06,049 --> 00:11:11,649
是receiver很清楚告訴sender 所以flow control相對簡單

128
00:11:11,649 --> 00:11:15,779
那我們說Congestion control是一個相對複雜的

129
00:11:15,779 --> 00:11:21,279
因為internet沒有人會告訴你說現在網路是不是雍塞了

130
00:11:21,279 --> 00:11:28,179
現在internet本身他是不會告訴我 router不會跟我講說現在壅塞了你送慢一點

131
00:11:28,179 --> 00:11:34,250
所以ＴＣＰ本身他在處理這個Congestion control的時候 他就面臨一個挑戰說

132
00:11:34,250 --> 00:11:39,610
他能不能知道網路現在已經壅塞了 就是我已經送的量太大

133
00:11:39,610 --> 00:11:45,380
當然網路壅塞不是因為我個人造成的。是大家都送很多

134
00:11:45,380 --> 00:11:50,480
那如果大家都送很多造成阻塞 那這個阻塞我知不知道

135
00:11:50,480 --> 00:11:53,679
router不會跟我講 所以我必須有一個方法

136
00:11:53,679 --> 00:11:58,480
必須自己去判斷說這個網路可能阻塞了 那阻塞之後呢

137
00:11:58,480 --> 00:12:04,450
我就送慢一點。所以ＴＣＰ本身除了剛剛提到 他要送很可靠

138
00:12:04,450 --> 00:12:07,880
reliable 要建連線 是byte stream

139
00:12:07,880 --> 00:12:13,710
同時它還要處理所謂的flow control 不能送太快讓receiver塞爆掉

140
00:12:13,710 --> 00:12:20,409
也不能送太多讓整個internet塞住。如果說真的送太多了

141
00:12:20,409 --> 00:12:24,710
因為我真的不知道internet有沒有塞住 所以當然會一直送

142
00:12:24,710 --> 00:12:29,279
一直到真的發生了Congestion 啊這個真的會發生

143
00:12:29,279 --> 00:12:34,679
那發生之後router還不會跟我講 那我怎麼知道說網路阻塞了

144
00:12:34,679 --> 00:12:40,049
所以我們有一些方法譬如說我的封包掉了 就是封包掉了

145
00:12:40,049 --> 00:12:43,580
那我們說你怎麼知道封包掉了 因為你掉的時候對方

146
00:12:43,580 --> 00:12:49,509
我們講acknowledgement 我們以前有介紹過所謂acknowledgement的觀念

147
00:12:49,509 --> 00:12:54,179
就是封包丟給對方 對方要丟個回應說他收到了

148
00:12:54,179 --> 00:13:00,279
那如果說我們一直丟一直丟封包 那萬一說 回應說你掉封包

149
00:13:00,279 --> 00:13:08,710
封包沒有收到 封包對方沒有收到就是一個網路阻塞的一個信號

150
00:13:08,710 --> 00:13:16,009
封包掉就代表說網路可能有發生阻塞 要是說封包掉很多

151
00:13:16,009 --> 00:13:20,809
就知道說這個網路阻塞得還蠻嚴重的 封包掉很多

152
00:13:20,809 --> 00:13:27,710
那所以我們就譬如放慢速度 譬如說減量 大家如果都減量

153
00:13:27,710 --> 00:13:37,149
我們講阻塞的狀況就會得到一些舒緩 所謂的Congestion control就是講這樣的一個機制

154
00:13:37,149 --> 00:13:47,549
第一個怎麼偵測網路可能發生阻塞 第二個當你偵測網路發生阻塞的時候你的反應是什麼

155
00:13:47,549 --> 00:13:53,250
你的對策是什麼？可以讓這個網路的阻塞能夠得到舒緩

156
00:13:53,250 --> 00:13:59,000
那這就所謂的Congestion control 這個對ＴＣＰ來講也是非常重要的一個機制 Subtitles

2
00:00:09,180 --> 00:00:13,480
好那接下來我們來介紹這個ＴＣＰ這個protocol他的header

3
00:00:13,480 --> 00:00:20,750
就是說TCP本身他們在溝通的時候 他到底需要哪些資料來跟對方溝通

4
00:00:20,750 --> 00:00:26,250
我們說這個protocol的header 那他的header呢就像我們這個圖裡面

5
00:00:26,250 --> 00:00:31,210
有這樣所顯示的 比較重要的地方 我們說第一個所謂的source port

6
00:00:31,210 --> 00:00:36,310
source port就是說送這個ＴＣＰ我們叫做segment

7
00:00:36,310 --> 00:00:43,079
送這個segment 他的對方是哪一台電腦我們叫做source ip

8
00:00:43,079 --> 00:00:47,410
source ip是記錄在ip header 不在這裡 那是在ip header

9
00:00:47,410 --> 00:00:53,480
那他的目的地 destination ip也在ip header

10
00:00:53,480 --> 00:00:59,250
所以source ip跟destination ip兩個ip address都在ip header

11
00:00:59,250 --> 00:01:01,980
那我們這裡看不到因為他在ip header裡面

12
00:01:01,980 --> 00:01:07,950
所以ip address已經跟我們講他是從哪一台電腦送到哪一台電腦

13
00:01:07,950 --> 00:01:15,280
那我們這裡的source port 就是說source那台電腦他的哪一個application

14
00:01:15,280 --> 00:01:20,610
那他想送到現在這個目的地電腦他的哪一個application

15
00:01:20,610 --> 00:01:27,750
所以source port跟destination port他其實代表這個ＴＣＰ連線

16
00:01:27,750 --> 00:01:32,079
因為建連線 他兩邊的application是誰

17
00:01:32,079 --> 00:01:36,780
因為我們說一個電腦上面同時可能run很多application

18
00:01:36,780 --> 00:01:40,550
所以這些不同application怎麼區隔呢 就是靠port number

19
00:01:40,550 --> 00:01:48,049
所以source port就代表說 從source這台電腦的哪一個application送封包

20
00:01:48,049 --> 00:01:54,049
這個封包送到一樣這個目的地的ip的哪一個application

21
00:01:54,049 --> 00:01:58,380
所以source port代表來自哪一個application

22
00:01:58,380 --> 00:02:04,280
destination port告訴我們說 這個封包是要送給哪一個application

23
00:02:04,280 --> 00:02:07,580
我們用port number代表來自哪一個application

24
00:02:07,580 --> 00:02:13,009
要送給哪一個application 所以這是所謂的port number的概念

25
00:02:13,009 --> 00:02:21,150
在看第二個就是說 我們說因為他是reliable的service

26
00:02:21,150 --> 00:02:24,550
那我們也介紹過什麼叫做sliding window

27
00:02:24,550 --> 00:02:30,880
就是說sliding window本身 會把每一個封包給他一個sequence number

28
00:02:30,880 --> 00:02:34,910
就我們把它編號1,2,3,4,5,6,7 給他一個sequence number

29
00:02:34,910 --> 00:02:41,880
那因為有了sequence number之後 我們才知道說這個封包收到的時候有沒有所謂的重複

30
00:02:41,880 --> 00:02:44,910
那我們也說在這個sliding window裡面

31
00:02:44,910 --> 00:02:49,009
那個receiver他有一個所謂的receiver的sliding window

32
00:02:49,009 --> 00:02:56,009
那如果你的封包的這個 sequence number沒有落在那個receiver的receiving window

33
00:02:56,009 --> 00:03:03,780
沒有在那個視窗裡面的話 他是不收的 代表說他可能重複所以sequence number是很重要的

34
00:03:03,780 --> 00:03:07,780
那我們以前介紹的那個sliding window在layer 2

35
00:03:07,780 --> 00:03:14,550
在一個link上面的這種所謂的 sliding window用到了所謂的sequence number

36
00:03:14,550 --> 00:03:20,710
不過那個所謂的 sequence number是每一個封包一個sequence number

37
00:03:20,710 --> 00:03:27,509
那我們說因為ＴＣＰ 我們說ＴＣＰ是byte oriented的protocol

38
00:03:27,509 --> 00:03:31,680
他每個byte都是單位是每個byte

39
00:03:31,680 --> 00:03:38,880
所以他的sequence number必須細到 每一個byte都給他一個sequence number

40
00:03:38,880 --> 00:03:44,380
所以我們這個封包裡面header帶了一個叫做sequence number

41
00:03:44,380 --> 00:03:49,580
這個是非常重要的 sequence number 代表什麼呢

42
00:03:49,580 --> 00:03:55,979
代表說這個封包所帶的data裡面 這是我們的data

43
00:03:55,979 --> 00:04:01,880
這個是我們的第一個byte 你的data裡面

44
00:04:01,880 --> 00:04:05,280
就是我們說ＴＣＰ是一個byte stream

45
00:04:05,280 --> 00:04:08,910
所以整個來看他就是byte的一個的串流

46
00:04:08,910 --> 00:04:12,949
那我們這個封包在這個串流裡面是切在什麼地方

47
00:04:12,949 --> 00:04:18,509
我們說我們care的是整個byte stream 切在什麼地方都無所謂

48
00:04:18,509 --> 00:04:24,980
我們講一個封包把這個內容送完他是兩個封包還是三個封包還是四個封包我都無所謂

49
00:04:24,980 --> 00:04:29,350
但是你必須告訴我說你這個帶的內容

50
00:04:29,350 --> 00:04:36,550
就是這個data的第一個byte他到底他的sequence number是多少

51
00:04:36,550 --> 00:04:39,079
所以這個很重要

52
00:04:39,079 --> 00:04:48,410
就變成說這個sequence number就告訴對方說我這個封包後面帶這個data的第一個byte

53
00:04:48,410 --> 00:04:57,079
注意是這個byte 他在整個這個byte的stream裡面是編號第幾號

54
00:04:57,079 --> 00:05:04,079
所以這個sequence number專門是指說這個封包所攜帶的data

55
00:05:04,079 --> 00:05:07,380
這個data可能有多有少 可能有長可能有短

56
00:05:07,380 --> 00:05:12,649
這個data裡面的第一個byte的sequence number

57
00:05:12,649 --> 00:05:21,709
所以再講一次這個sequence number是指這個封包所攜帶的data他的第一個byte的sequence number

58
00:05:21,709 --> 00:05:24,980
因為我們現在每一個byte都有一個sequence number

59
00:05:24,980 --> 00:05:28,649
因為我們是byte oriented 每一個byte都很重要

60
00:05:28,649 --> 00:05:32,380
這是sequence number 這是非常非常重要的資訊

61
00:05:32,380 --> 00:05:37,550
好那我們這個ＴＣＰ的封包裡面header還有帶一個acknowledgement

62
00:05:37,550 --> 00:05:41,649
那acknowledge number就變成是說

63
00:05:41,649 --> 00:05:45,250
好一樣因為我們把這個封包丟過去的時候

64
00:05:45,250 --> 00:05:50,180
告訴對方說那我們這個資料sequence number是多少

65
00:05:50,180 --> 00:05:55,509
然後因為我們有知道整個我們有長度 我們知道說這個封包的長度

66
00:05:55,509 --> 00:06:00,550
所以我知道說我這個data帶多少量到對方

67
00:06:00,550 --> 00:06:06,380
那對方收到的話他要回我就是我們以前有介紹叫做acknowledgement

68
00:06:06,380 --> 00:06:11,750
你必須回應這個回應一樣這就叫做acknowledgement number

69
00:06:11,750 --> 00:06:18,410
一樣他也是一個sequence number 但是呢他是告訴對方說我收到的情況

70
00:06:18,410 --> 00:06:23,310
所以我們如果簡單的講就是說我送過去會有一個sequence number

71
00:06:23,310 --> 00:06:27,180
那我回來的這個資料會帶這個acknowledgement number

72
00:06:27,180 --> 00:06:33,480
就是告訴對方說這個number以前的我通通收到了

73
00:06:33,480 --> 00:06:39,279
如果我們還有印象的話這個叫做所謂的cumulative的acknowledgement

74
00:06:39,279 --> 00:06:45,750
就這個acknowledgement是告訴對方說這個number以前的我通通收到了

75
00:06:45,750 --> 00:06:49,980
那這個number以後的我現在還在等的意思

76
00:06:49,980 --> 00:06:53,579
所以這個acknowledgement number就是要告訴對方

77
00:06:53,579 --> 00:07:03,079
告訴sender說我的接收的狀況這個是這兩個都是跟sequence number相關的

78
00:07:03,079 --> 00:07:13,209
那在ＴＣＰ裡面他的sequence number跟acknowledgement number這兩個數字它的長度都是32 bits

79
00:07:13,209 --> 00:07:17,350
他32 bit的這個sequence number 好我們再來看

80
00:07:17,350 --> 00:07:21,579
ＴＣＰ header裡面還有一些比較重要的資料

81
00:07:21,579 --> 00:07:25,910
我們首先來看他有一些叫做flag 所謂的旗標

82
00:07:25,910 --> 00:07:30,980
他有六個flag 六個 這六個都很關鍵

83
00:07:30,980 --> 00:07:38,380
首先我們說ＴＣＰ本身要建連線所以在通訊之前必須先把連線建起來

84
00:07:38,380 --> 00:07:43,910
那一個TCP封包你怎麼知道這個封包是要建連線 還是他是送data

85
00:07:43,910 --> 00:07:48,279
我們就看這個欄位。這個bit 這個叫做ＳＹＮ

86
00:07:48,279 --> 00:07:53,649
ＳＹＮ就是synchronize 就是要建連線。這是一個flag

87
00:07:53,649 --> 00:07:59,050
一個bit 這個bit設為1就代表說這個封包是要建連線

88
00:07:59,050 --> 00:08:04,449
因為我們要通訊之前要先把連線建起來 那第一個封包

89
00:08:04,449 --> 00:08:11,480
就連線的第一個封包就是要建連線 第一個封包這個bit會設為1

90
00:08:11,480 --> 00:08:17,810
就代表說這個是要建連線的 那如果說這個連線建完之後

91
00:08:17,810 --> 00:08:23,509
我們封包就送送送送完之後就結束了 我就把這個連線把它取消

92
00:08:23,509 --> 00:08:27,850
就是我們可以建連線 也可以把連線取消掉

93
00:08:27,850 --> 00:08:34,909
取消一個連線我怎麼知道這個封包是要取消連線 在這裡這個FIN

94
00:08:34,909 --> 00:08:41,450
ＦＩＮ就是finish 就是finish的意思 這個bit設為1就代表說

95
00:08:41,450 --> 00:08:44,509
喔對方送了一個封包來 這個bit設為1

96
00:08:44,509 --> 00:08:49,750
就代表說對方要把連線close掉 要把連線關掉的意思

97
00:08:49,750 --> 00:08:56,250
所以你看這個bit如果是1 就代表說這個是要把連線close掉的意思

98
00:08:56,250 --> 00:09:02,880
那還有什麼呢我們再來看 我們剛剛說那我們把封包丟過去給對方

99
00:09:02,880 --> 00:09:08,649
那對方如果告訴我說 我這個sequence number我也回給你

100
00:09:08,649 --> 00:09:14,509
那我們有一個叫做ＡＣＫ 這個ＡＣＫ 這個bit如果設為1

101
00:09:14,509 --> 00:09:22,509
就代表說這個封包上面的acknowledgement number是有意義的值

102
00:09:22,509 --> 00:09:26,850
就是說我有這個封包我帶了acknowledgement number

103
00:09:26,850 --> 00:09:30,909
如果這個封包帶了acknowledgement number這個bit就設為1

104
00:09:30,909 --> 00:09:39,049
那這個bitACKbit如果等於0的話就代表說 這個欄位現在沒有特別的意義

105
00:09:39,049 --> 00:09:47,110
你不用看上面的值並沒有意義因為我並沒有把真正的acknowledgement 帶上去的意思

106
00:09:47,110 --> 00:09:49,309
所以這個bit ＡＣＫ

107
00:09:49,309 --> 00:09:56,610
他是說我們上面這個acknowledgement number是不是有意義在上面

108
00:09:56,610 --> 00:09:58,980
那另外還有一個我們叫做ＲＳＴ

109
00:09:58,980 --> 00:10:06,580
ＲＳＴ就是說因為我們連線已經建起來 建起來之後我可能開始送data

110
00:10:06,580 --> 00:10:14,710
然後只要有一端覺得說這個連線狀況怪怪的 什麼叫做狀況怪怪的

111
00:10:14,710 --> 00:10:18,480
因為我們雖然建連線 網路上面有很多很奇怪的東西

112
00:10:18,480 --> 00:10:24,549
有駭客我們有一個一種叫做ＴＣＰ hack jet 就是ＴＣＰ的這種劫持

113
00:10:24,549 --> 00:10:31,179
好像劫機一樣 你明明建連線我在中間把你攔下來 然後我就送了一些奇奇怪怪的封包給你

114
00:10:31,179 --> 00:10:40,950
所以我們任何一端如果發現這個連線有異常 他就可以馬上送一個封包把這個連線立刻把它切掉

115
00:10:40,950 --> 00:10:44,580
這個叫做ＲＳＴ 就是說重來 重設 就這個bit

116
00:10:44,580 --> 00:10:48,610
所以這個bit很重要我們如果連線建起來在通訊

117
00:10:48,610 --> 00:10:55,980
就突然發現來了一個封包ＲＳＴ設為1 就代表對方強制要把連線把它清掉

118
00:10:55,980 --> 00:11:02,279
這時候不管你data收到一半 通通都不管 連線立刻把它切掉

119
00:11:02,279 --> 00:11:12,679
這個叫ＲＳＴ。這是一個非常極端的動作就是強制把一個連線立刻清除 這個叫做ＲＳＴ

120
00:11:12,679 --> 00:11:18,409
那還有 還有就是說那我們如果說一般data在送的時候

121
00:11:18,409 --> 00:11:23,250
我們剛剛有提到我們封包本身都是 譬如說我們看這個例子

122
00:11:23,250 --> 00:11:29,480
我們說這個封包本身在送的時候從這個地方我們注意一下 我們在送封包的時候

123
00:11:29,480 --> 00:11:35,850
都是先把他送到這個buffer裡面來 然後buffer他會等

124
00:11:35,850 --> 00:11:43,009
等到說這個封包的內容譬如說累積到一個比較大的量 然後就送出一個segment

125
00:11:43,009 --> 00:11:49,350
或者另外一個segment也就是說如果你這個資料量累積的還不夠多的時候

126
00:11:49,350 --> 00:11:56,380
這個TCP暫時不會把他打包 暫時不會 因為累積的量還不夠大

127
00:11:56,380 --> 00:12:02,409
那什麼叫做這個我們提到這個叫做ＰＳＨ 我們有一個bit比較特別

128
00:12:02,409 --> 00:12:06,909
這個叫ＰＳＨ 就是ＰＳＨ。ＰＳＨ的意思就是說

129
00:12:06,909 --> 00:12:15,149
強制把buffer裡面的內容 不管他多少 強制把它沖出去的意思

130
00:12:15,149 --> 00:12:20,750
這個ＰＳＨＰＳＨ就相當於說我把它擠壓 把它硬把他推出去的意思

131
00:12:20,750 --> 00:12:30,149
也就是說如果我這個TCP的application送一個資料給這個TCP說我要PSH

132
00:12:30,149 --> 00:12:36,409
這意思就是說好我不管你這個地方現在等於說 在這個buffer裡面

133
00:12:36,409 --> 00:12:47,779
等於說不管你現在buffer裡面有多少 不管有多少 都強制打包出去的意思

134
00:12:47,779 --> 00:12:53,250
ＰＳＨ就是相當於一個更直接就像沖水馬桶一樣

135
00:12:53,250 --> 00:12:57,880
也就是把它按下去 反正就把它沖掉 不管裡面多少全部把它沖掉

136
00:12:57,880 --> 00:13:04,080
那這個ＰＳＨ如果這個bit被設為1 就代表說他要強制清除

137
00:13:04,080 --> 00:13:11,309
清空buffer裡面的內容那送到對方之後一樣 我們說receiver也一樣

138
00:13:11,309 --> 00:13:16,350
因為receiver收到之後 他原來會放到這個receiver buffer裡面

139
00:13:16,350 --> 00:13:22,450
然後呢在一部分 在慢慢地給這個application 那如果呢

140
00:13:22,450 --> 00:13:27,409
我們sender把這個ＰＳＨ設為1的時候 我就強制就沖到對方去

141
00:13:27,409 --> 00:13:33,279
那一樣我用ＰＳＨ就強制把這個buffer全部清空 全部丟給application

142
00:13:33,279 --> 00:13:41,380
所以如果說這個sender本身他把這個ＰＳＨ設為1就代表說我們要把這個連線

143
00:13:41,380 --> 00:13:47,549
那個ＴＣＰ的buffer不管內容是多少強制把它清空送給對方

144
00:13:47,549 --> 00:13:49,909
這個是有時候比較緊急 狀況比較緊急的時候

145
00:13:49,909 --> 00:13:53,580
我們可以用ＰＳＨ強迫把它清空 就不要等

146
00:13:53,580 --> 00:13:58,980
因為我們的資料如果放在buffer 其實他在等上面在送多一點

147
00:13:58,980 --> 00:14:03,950
送多一點變成比較大包 但是在等當然就會牽涉到delay

148
00:14:03,950 --> 00:14:08,580
那我們說那我看這個ＴＣＰ是做什麼 譬如說我們講如果是檔案傳輸

149
00:14:08,580 --> 00:14:13,909
你時間稍微長一點大家就沒有什麼感覺 送檔案嘛

150
00:14:13,909 --> 00:14:19,679
但是我這個ＴＣＰ連線我如果是拿來看電影 譬如說看一個video

151
00:14:19,679 --> 00:14:22,909
那看一個video當然是資料越快送越好 越快越好

152
00:14:22,909 --> 00:14:29,309
所以你就說我每次送封包都給他PSH不管資料量大小反正就是push push push 他

153
00:14:29,309 --> 00:14:35,149
就一直送一直送。變成說他就可以增加這個速度 爭取這個時效

154
00:14:35,149 --> 00:14:41,480
好那我們說還有一個 這個flag裡面還有一個是叫做ＵＲＧ

155
00:14:41,480 --> 00:14:48,950
就是說如果我們在送data的過程當中 就兩邊的ＴＣＰ 我們在送這個資料

156
00:14:48,950 --> 00:14:53,309
那application說我除了送這個資料之外

157
00:14:53,309 --> 00:15:00,110
我有一些比較重要緊急的資訊要送給對方 我們這個叫做ＵＲＧ

158
00:15:00,110 --> 00:15:08,950
我可以用這個bit 也就是說這個bit設為1的時候就代表說我這個封包裡面帶了一些緊急的資料

159
00:15:08,950 --> 00:15:16,980
他不是正常的data是一些像control 是一些特殊控制的資訊要帶給對方

160
00:15:16,980 --> 00:15:22,980
所以說我把一些資料把它塞到這個封包裡面來

161
00:15:22,980 --> 00:15:27,980
這個資料我們叫做urgent data 那urgent data到底在哪裡呢

162
00:15:27,980 --> 00:15:32,250
在哪裡呢？我們這個還有 這邊就有一個叫做urgent point

163
00:15:32,250 --> 00:15:37,080
如果這個bit設為1 也就是ＵＲＧ這個bit如果設為1

164
00:15:37,080 --> 00:15:44,009
就代表說我有一個緊急的資料藏在這個封包裡面 藏在哪裏呢

165
00:15:44,009 --> 00:15:49,179
我這個urgent point就會告訴我說是藏在這裡 他是一個point

166
00:15:49,179 --> 00:15:57,279
也就是說他那個資料都藏在最前面。資料的前面 然後這個point就指著說

167
00:15:57,279 --> 00:16:04,080
這個point指到的後面才是真正的data 啊這個point所指的位址的前面

168
00:16:04,080 --> 00:16:07,679
因為我們data從這裡開始算 到這個point這個中間

169
00:16:07,679 --> 00:16:15,450
這個就是我的緊急資料 他不是data data就在這個point後面才是data

170
00:16:15,450 --> 00:16:24,279
那這個地方我們就可以看到說 經由這六個flag這個ＴＣＰ可以做很多事情

171
00:16:24,279 --> 00:16:29,679
建連線 連線把它中止 強制中止 我有沒有帶ＡＣＫ

172
00:16:29,679 --> 00:16:35,350
我要不要push強制清空 我有沒有帶緊急的資料 都在這個flag裡面

173
00:16:35,350 --> 00:16:41,480
最後我們再來看一下 這個叫做advertised window 這個欄位

174
00:16:41,480 --> 00:16:46,080
這個欄位也很重要 這個欄位就是專門做flow control

175
00:16:46,080 --> 00:16:56,450
我們上次有提到說ＴＣＰ他需要做flow control就是說receiver會告訴sender說你可以送多少量

176
00:16:56,450 --> 00:17:02,549
我們知道量他是一個量的概念 這個量就是送在這個地方 就是這個window

177
00:17:02,549 --> 00:17:12,980
啊這個量的欄位有多少個bit我們可以從這邊看得出來 他的這個欄位的長度是16bits

178
00:17:12,980 --> 00:17:17,980
16 bits如果表示成數字就是2^16 就是六萬多個byte

179
00:17:17,980 --> 00:17:28,650
單位是byte 也就是說receiver他可以告訴sender說最多最多我給你的量就是65536

180
00:17:28,650 --> 00:17:34,250
或者簡稱65536的這個64K的量給sender

181
00:17:34,250 --> 00:17:40,109
所以sender可以送過來的量最多就是這上面的數字 就是64Ｋ

182
00:17:40,109 --> 00:17:46,710
那64K送完之後 sender就必須停下來 然後等這個receiver再給他

183
00:17:46,710 --> 00:17:53,109
給他這個量所以這個量本身呢 我們一般叫做所謂credit 就給他一個額度

184
00:17:53,109 --> 00:17:59,349
就是receiver控制sender說你可以送多少量過來

185
00:17:59,349 --> 00:18:07,880
因為封包是一直一直過去的 所以每次給他這個數字 給一個量

186
00:18:07,880 --> 00:18:16,049
那sender就看這個封包裡面的量是多少 來決定說他可以送多少量出去

187
00:18:16,049 --> 00:18:23,210
不過我們特別強調 這個量只是做flow control 不是做congestion control

188
00:18:23,210 --> 00:18:30,849
這個地方是receiver控制sender送的量 但是這個不是internet的congestion

189
00:18:30,849 --> 00:18:34,579
internet congestion是沒有在這個ＴＣＰ header裏面

190
00:18:34,579 --> 00:18:39,680
他要靠另外的方式才能夠知道說到底發生什麼事

191
00:18:39,680 --> 00:18:47,180
那我們後面這邊一些所謂的文字的說明 基本上就是剛剛跟各位解釋的

192
00:18:47,180 --> 00:18:50,150
就是說我們這個port number是什麼意思

193
00:18:50,150 --> 00:18:52,579
acknowledgement sequence number

194
00:18:52,579 --> 00:18:54,509
還有advertised window

195
00:18:54,509 --> 00:18:58,509
那我們說每一個byte都有一個sequence number

196
00:18:58,509 --> 00:19:03,710
然後我們說acknowledgement跟acknowledgement

197
00:19:03,710 --> 00:19:06,609
這個advertised window就強調說我要給對方

198
00:19:06,609 --> 00:19:10,680
acknowledgement代表說我收到對方的資料情況

199
00:19:10,680 --> 00:19:15,750
advertised window是告訴對方說你可以送多少量過來

200
00:19:15,750 --> 00:19:25,079
我們說有六個flag 包括所謂的我們有提到ＳＹＮ是為了建連線

201
00:19:25,079 --> 00:19:31,309
FIN是要把連線取消 RST是強制中斷 PSH是清空buffer

202
00:19:31,309 --> 00:19:34,509
ＵＲＧ是說我帶了緊急資料在這個封包裏面

203
00:19:34,509 --> 00:19:40,210
ＡＣＫ是說我的acknowledgement這個欄位到底有沒有帶真正的一個值

204
00:19:40,210 --> 00:19:45,950
那我們說如果有這個ＵＲＧ的時候呢 我們有一個urgent point

205
00:19:45,950 --> 00:19:50,009
告訴我們說我們這個urgent的資料是放在什麼地方

206
00:19:50,009 --> 00:19:58,380
然後如果需要的時候我們可以用PSH這個flag來強制一個所謂的push operation

207
00:19:58,380 --> 00:20:05,609
把它清空這樣的話我們就知道這個ＴＣＰ header其實帶了非常多的資訊

208
00:20:05,609 --> 00:20:10,450
讓我們可以兩端可以做適當的溝通

209
00:20:10,450 --> 00:20:19,849
好那最後就是說我們有需要的時候可以做一個所謂的reset 強制這個通訊結束

210
00:20:19,849 --> 00:20:21,880
最後還有一個checksum

211
00:20:21,880 --> 00:20:27,509
checksum就是說因為我們ＴＣＰ在送的時候也有可能會受到一些干擾

212
00:20:27,509 --> 00:20:31,279
所以我們要檢查說我們的header到底有沒有錯

213
00:20:31,279 --> 00:20:35,450
我們這個checksum檢查完之後 如果發現是錯誤的

214
00:20:35,450 --> 00:20:42,910
那這個封包就會丟掉。那一樣丟掉我們一定要讓對方重送 要重送

215
00:20:42,910 --> 00:20:48,049
因為我們要的是reliable service。可是我們這個checksum本身

216
00:20:48,049 --> 00:20:55,650
會除了檢差這個ＴＣＰ的header之外 我們有時候會把ip header

217
00:20:55,650 --> 00:21:01,450
ip的欄位也一起加進來做檢查 這個叫做pseudo header

218
00:21:01,450 --> 00:21:04,710
pseudo header就是說除了ＴＣＰ header之外

219
00:21:04,710 --> 00:21:12,380
還要再加上ip header裡面的這個source還有destination ip

220
00:21:12,380 --> 00:21:14,180
還有他的length fields

221
00:21:14,180 --> 00:21:19,210
從ip header裡面也把某一些欄位一起加進來檢查

222
00:21:19,210 --> 00:21:25,009
因為這個都很重要因為這個資料如果都錯的話 對這個封包影響都很大

223
00:21:25,009 --> 00:21:30,809
所以我們如果把ip header裡面的source address, source ip

224
00:21:30,809 --> 00:21:33,549
destination ip, 還有所謂的length field

225
00:21:33,549 --> 00:21:36,750
這三個欄位的內容一起加進來檢查的話

226
00:21:36,750 --> 00:21:43,000
我們這個叫做所謂的pseudo header 這樣的話就是一個比較完整的檢查的機制 Subtitles End: mo.dbxdb.com
